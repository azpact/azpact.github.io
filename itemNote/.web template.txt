https://api.jsonbin.io/b/5dcd09ab9e3eb3638dc01524
*前端勸退指南
https://github.com/roger-hiro/BlogFN

資料組件化-局部組件 : 
body
div(="app")
OK|-TheSide (id)
OK  |-TheScrollViewer (id)
OK  |-TheScrollViewerImage (class)
|-TheMain (id)
|-TheControllerBar (id)
|-TheSerchBar (id)

|-VSerchBox (class)
|-VLightBox (class)
|-VToolBar (class)
|-VLightBox (class)
OK |-VButton (class)

*今日目標
d3 完整學習


Vue-router 10

4.8 vue-router 
4.8.1 vue-router 通過 CDN 的方式引用
<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>

div
 router-link(to="/use/foo") Go to Foo
 router-link(to="/use/bar") Go to Bar
router-view

<script>
  // 組件4
  const Foo = { template: "<div>foo</div>" };
  const Bar = { template: "<div>bar</div>" };
  // router.js
  const routes = [
    { path: "/use/foo", component: Foo },
    { path: "/use/bar", component: Bar }
  ];
  // main.js
  const router = new VueRouter({
    routes
  });
  const app = new Vue({
    router,
    data() {
      return {
        ms: "123"
      };
    }
  }).$mount("#app");
</script>

4.8.2 import 資料



4.8.3 動態路由匹配 - path:"/:id"
-很多時候，我們需要將具有一定模式的路由映射到同一組件。
-如一個 user 應為所有用戶呈現的組件，但具有不同的用戶 ID。
-這時就可以在路徑中使用動態以實現。

$router.params.id //顯示當前路徑 id

div
 router-link(to="/use/1") Go to 1
 router-link(to="/use/2") Go to 2
router-view

// 組件
const User = { template: "<div>foo {{$route.params.id}}</div>" };

// router.js
const routes = [{ path: "/use/:id", component: User }];

// main.js
const router = new VueRouter({
  routes
});
new Vue({
  router 
  }
}).$mount("#app");

4.8.4 自訂更多動態路由匹配 - path:"/:id"
-如此在路徑上自訂 path: "/:username/post/:id" 的規則
-而在 router-link(to) 上則依照規則，進入相對應的路徑

div
 router-link(to="/ben/post/1") Go to 1
 router-link(to="/Jan/post/10") Go to 2
router-view

// 組件
const User = {
  template: `<div>當前路徑 UserName: {{$route.params.username}}
  <br>當前路徑 ID: {{$route.params.id}}
  </div>`
};

// router.js
const routes = [{ path: "/:username/post/:id", component: User }];


4.8.5 父子層路徑 - children
-有一個當前組件 index.js (用來顯示點選 router-link 與 router-view)
-定義一個主要組件 User (用來顯示子層路徑的 router-view)
-定義多個次要組件 UserHome、UserFoo、UserBar (子路徑上的三個組件)
-於當前組件 index.js 與主要組件 User 下，使用 router-view (來正常顯示資料)

//index.js
div
 router-link(to="/user/1") Home
 router-link(to="/user/1/foo") Foo
 router-link(to="/user/1/bar") Bar

// 組件
const User = {
  template: `
    <div class="user">
      <h2>User {{ $route.params.id }}</h2>
      <router-view></router-view>
    </div>
  `
};

const UserHome = { template: "<div>Home..</div>" };
const UserFoo = { template: "<div>Foo..</div>" };
const UserBar = { template: "<div>Bar...</div>" };
// router.js
const routes = [
  {
    path: "/user/:id",
    component: User,
    children: [
      { path: "", component: UserHome },
      { path: "foo", component: UserFoo },
      { path: "bar", component: UserBar }
    ]
  }
];


4.8.6 使用編譯式操作歷史紀錄
瀏覽器輸入指令
router.push({path:'/user/1'}) //直接指定當前畫面路徑
router.go(1) //在瀏覽器紀錄中進一步，下一頁的意思
router.go(3) //在瀏覽器紀錄中進三步，下一頁的意思
router.go(-1) //在瀏覽器紀錄中後退一步，上一頁的意思

使用 router.push、router.go 等等，實際上確實效法 window.history API，
因此，你已經熟悉 Browser History APIs，那麼在 Vue Router 中操作 history 就是超級簡單。

button(@click="Home()") Home
button(@click="Back()") Back
button(@click="Next()") Next

methods: {
  Home() {
    router.push({ path: "/user/1" });
  },
  Back() {
    router.go(-1);
  },
  Next() {
    router.go(1);
  }
}

4.8.7 命名路由 - 原型
通過一個名稱來標示路由，顯示起來更方便

router-link(:to="{name:'userHome',params:{id:1}}") Home
router-link(:to="{name:'userFoo',params:{id:2}}") Foo
router-link(:to="{name:'userBar',params:{id:3}}") Bar

// router.js
const routes = [
  {
    path: "/user/:id",
    component: User,
    children: [
      { path: "", component: UserHome, name: "userHome" },
      { path: "foo", component: UserFoo, name: "userFoo" },
      { path: "bar", component: UserBar, name: "userBar" }
    ]
  }
];

4.8.8 命名路由 - v-for
div(v-for="item in list" :key="item.id")
 router-link(:to="item.to") {{item.label}}

data() {
  return {
    list: [
      { label: "Home", to: { name: "userHome", params: { id: 1 } } },
      { label: "Foo", to: { name: "userFoo", params: { id: 2 } } },
      { label: "Bar", to: { name: "userBar", params: { id: 3 } } }
    ]
  };
}

4.8.9 點選顯示指定組件的路由 - 命名視圖
-由時候想同時展示多個視圖，，而不是嵌套展示。
-例如創建一個布局，有 sidebr(側導覽) 和 main (主內容) 兩個視圖，這時候命名試圖就派上用場了。
-你可以在這一個布局上使用多個 router-view，沒有設置名字，會默認 default

// 簡單來說，點選 link，顯示不同組合的視圖，每個視圖是由不同組件組成。
// 改變布局與改變內容
// 一個按鈕改變布局內容
//布局
Lank A - Component A
       - Component B
Lank B - Component A
       - Component C
       - Component B

router-view(class="view")
router-view(class="view two" name="a")
router-view(class="view three" name="b")

const router = new VueRouter({
  routes:[
    path:'/',
    components:{
      default:Foo,
      a:Bar,
      b:Baz
    }
  ]
})

4.8.10 重新向和別名 - redirect & alias
-path 為原始路徑，使用 redirect，
將 path 路徑重新導向 redirect 下的路徑。
-最後網址顯示路徑一定為 redirect

-重新定義路徑 path
// 原始路徑為 "/a"，自動導向 path 為 "/c"
{ path: "/a", redirect: "/c", component: Foo },

-重新定義名稱 name
// 原始路徑為 "/a"，自動導向 name 為 "test"
{ path: "/a", redirect: { name: "test" }, component: Foo },

-動態返回一個目標 to
...

別名
別名功能讓你自由地 UI 結構映射到任意 URL，而不是受限於配置的嵌套路由結構。

// 原始路徑 path '/a'，也可以由路徑 '/b' 進入
// 不管是 a 或 b 進入，都可以且都會保留當前瀏覽器網址的顯示
<router-link to="/a">Go to Foo</router-link>
{ path: "/a", alias: "/b", component: Foo },






*---
關於 $route
{
  "name": null, 
  "meta": {}, 
  "path": "/", 
  "hash": "", 
  "query": {}, 
  "params": {}, 
  "fullPath": "/",
   "matched": [] 
}





>>爾後處理
-- v-on 
-Vue.js: 元件 Components - Events Up 自定義事件
https://cythilya.github.io/2017/05/20/vue-component-events-up/

-- $listeners
接收除了帶有 .native 事件修飾符的所有事件監聽器
同 $attrs 屬性一樣，可以通過 v-on="$listeners"，將事件監聽器繼續往下傳遞，讓孫組件放問到父組件，且可以使用 $emit 觸發父組件的函數

Vue - 组件通信之$attrs、$listeners
https://www.lagou.com/lgeduarticle/19448.html

-vue中的$emit 與$on父子元件與兄弟元件的之間通訊方式
https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/200283/

$emit

v-bind:is
JSX
****組件化
Vue Mixin
觸發事件
@keydown.enter
常用網路字形


10.4.2 水平圖-文圖群組
組件化
svg 的寬跟高


13 Vue rande

