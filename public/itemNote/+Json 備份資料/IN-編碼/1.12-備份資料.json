{
  "listOne": [
  {
    "value": "0",
    "label": "總編輯",
    "image": "assets/750x464.jpg",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "本網站為 0 的網站資料。",
    "labelLink": "#總編輯"
  },
  {
    "value": "0.1",
    "label": "初始樣板-文件版",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-style 與 scrip 皆以相對路徑方式連結。\n-相關套件有 element-ui.css、element.js、vue、axios、jquery。",
    "labelLink": "#初始樣板-文件版"
  },
  {
    "value": "0.2",
    "label": "初始樣板-CDN版",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-style 與 scrip 皆以 CDN 網路方式連結。\n-相關套件有 element-ui.css、element.js、vue、axios、jquery。\n\n <link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"\n/>\n<script\n  src=\"https://code.jquery.com/jquery-3.4.1.min.js\"\n  integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.js\"></script>\n<script src=\"https://unpkg.com/element-ui/lib/index.js\"></script>",
    "labelLink": "#初始樣板-CDN版"
  },
  {
    "value": "0.3",
    "label": "初始樣板-D3版",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "使用 D3 CDN\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.12.0/d3.min.js\"></script>",
    "labelLink": "#初始樣板-D3版"
  },
  {
    "value": "0.4",
    "label": "初始樣板-Prop 版",
    "image": "0.4.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "父子組件傳遞 prop\n\nv-base(:title=\"ms\")\n\nVue.component(\"v-base\", {\n  props: {\n    title: String\n  },\n  data() {\n    return {\n      //\n    };\n  },\n  template: `<div> Base Test... {{title}} </div>`\n});\n\nnew Vue({\n  data: {\n    ms: \"123\"\n  }\n}).$mount(\"#app\");",
    "labelLink": "#初始樣板-Prop 版"
  },
  {
    "value": "0.5",
    "label": "初始樣板-Vue Router版",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "使用 Vue Router CDN\n\n <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n\ndiv\n router-link(to=\"/use/foo\")\n router-link(to=\"/use/bar\")\nrouter-view\n\n// 組件\nconst Foo = { template: \"<div>foo</div>\" };\nconst Bar = { template: \"<div>bar</div>\" };\n// router.js\nconst routes = [\n  { path: \"/use/foo\", component: Foo },\n  { path: \"/use/bar\", component: Bar }\n];\n// main.js\nconst router = new VueRouter({\n  routes\n});\nnew Vue({\n  router,\n  data() {\n    return {\n      ms: \"123\"\n    };\n  }\n}).$mount(\"#app\");",
    "labelLink": "#初始樣板-Vue Router版"
  },
  {
    "value": "1",
    "label": "基礎 Html & Css",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "單純的 Html 語言撰寫",
    "labelLink": "#基礎 Html & Css"
  },
  {
    "value": "1.1",
    "label": "錨點連結-原型",
    "image": "1/-.1.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-點擊超連結，直接移動到其位置上\n\na(href=\"#link\") //連結\ndiv(id=\"link\") //目的",
    "labelLink": "#錨點連結-原型"
  },
  {
    "value": "1.2",
    "label": "Image 圖片",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "圖片使用 max-width 去讓圖片去融入父層的寬度\n\nimg{\n max-width: 100%;\n height: auto;\n}",
    "labelLink": "#Image 圖片"
  },
  {
    "value": "1.2.1",
    "label": "圖片切版",
    "image": "1/-.2.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "一欄位圖片\n兩欄位圖片\n\nimg {\n  max-width: 100%;\n  height: auto;\n  border: 1px solid #ddd;\n}\n.imgOne,\n.imgTwo {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  box-shadow: 1px 1px 1px 1px rgb(177, 177, 177);\n  margin-bottom: 1rem;\n  transition: all 0.3s;\n}\n.imgTwo img {\n  width: 50%;\n}\n.imgOne:hover,\n.imgTwo:hover {\n  box-shadow: 1px 1px 8px 1px rgb(177, 177, 177);\n}\n\nElRow(type=\"flex\" justify=\"center\")\n ElCol\n  div(class=\"imgOne\")\n   img(src=\"../assets/750x464.jpg\" alt=\"Image One\" title=\"Image One\")\nElRow(type=\"flex\" justify=\"center\")\n ElCol\n  div(class=\"imgTwo\")\n   img(src=\"../assets/750x464.jpg\" alt=\"Image Two\" title=\"Image Two\")",
    "labelLink": "#圖片切版"
  },
  {
    "value": "1.3",
    "label": "常用 Icon",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "使用套件或網路資源的網路字型",
    "labelLink": "#常用 Icon"
  },
  {
    "value": "1.3.1",
    "label": "Icon 查詢網站",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "https://materialdesignicons.com/\n\n可以搜尋到各大知名網站所使用的 ICone",
    "labelLink": "#Icon 查詢網站"
  },
  {
    "value": "1.3.2",
    "label": "Element Icon",
    "image": "1/-.3.2.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "Icon 由 Element 提供\n第一行\n<i class=\"el-icon-caret-left\" title=\"Left\"></i>\n<i class=\"el-icon-caret-right\" title=\"Right\"></i>\n<i class=\"el-icon-caret-top\" title=\"Top\"></i>\n<i class=\"el-icon-caret-bottom\" title=\"Down\"></i>\n\n第二行\n<i class=\"el-icon-edit\" title=\"Modify\"></i>\n<i class=\"el-icon-delete\" title=\"Delete\"></i>\n<i class=\"el-icon-setting\" title=\"Setting\"></i>\n\n第三行\n<i class=\"el-icon-user\" title=\"User\"></i>\n<i class=\"el-icon-star-off\" title=\"Star off\"></i>\n<i class=\"el-icon-star-on\" title=\"Star on\"></i>\n\n第四行\n<i class=\"el-icon-phone-outline\" title=\"Phone outline\"></i>\n<i class=\"el-icon-goods\" title=\"Goods\"></i>",
    "labelLink": "#Element Icon"
  },
  {
    "value": "1.4",
    "label": "Input 輸入",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "讓使用者從 input 元素輸入資料",
    "labelLink": "#Input 輸入"
  },
  {
    "value": "1.4.1",
    "label": "常用的屬性",
    "image": "1/-.4.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "p 預設字樣: placeholder\ninput(type=\"text\" placeholder=\"12\")\n\np 限制輸入長度: maxlength\ninput(type=\"text\" maxlength=\"2\")\n\np 遮蔽輸入框: disabled=\"disabled\"\ninput(type=\"text\" disabled=\"disabled\")\n\n參考資料\ninput禁止輸入的方法\nhttps://blog.csdn.net/diwuyanting/article/details/78589766",
    "labelLink": "#常用的屬性"
  },
  {
    "value": "1.5",
    "label": "Css 常用樣式",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "常用的樣式\n\n*a \n去除底線: text-decoration: none\n",
    "labelLink": "#Css 常用樣式"
  },
  {
    "value": "1.5.1",
    "label": "網站初始樣式",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "@charset \"UTF-8\";\n\nbody {\n  overflow-x: hidden;\n}\na{\n  text-decoration: none;\n  color:black\n}\nli {\n  display: flex;\n  height: 1rem;\n  height: 1rem;\n}",
    "labelLink": "#網站初始樣式"
  },
  {
    "value": "1.5.2",
    "label": "修改滾動條樣式 - scrollbar",
    "image": "1/-.5.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "/* 修改滾動條寬高級背景 */\n::-webkit-scrollbar {\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #e5ebe7;\n}\n/* 修改滾動條裡面的小方塊樣式 */\n::-webkit-scrollbar-thumb {\n  border-radius: 100px;\n  background: rgb(45, 45, 45);\n}\n\n參考資料\n用css美化默認的滾動條樣式，用這個屬性就夠了\nhttps://kknews.cc/zh-tw/code/9z59q2j.html",
    "labelLink": "#修改滾動條樣式 - scrollbar"
  },
  {
    "value": "1.5.3",
    "label": "自適應網頁設計 - @media",
    "image": "1/-.5.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "\n// 瀏覽螢幕小於 900 像素\n@media only screen and (min-width: 900px) {\n  body {\n    background-color: rgb(255, 221, 159);\n  }\n}\n// 瀏覽螢幕在 741 至 899 之間像素\n@media only screen and (min-width: 741px) and (max-width: 899px) {\n  body {\n    background-color: rgb(141, 117, 192);\n  }\n}\n// 瀏覽螢幕大於 740 像素\n@media only screen and (max-width: 740px) {\n  body {\n    background-color: rgb(129, 207, 152);\n  }\n}",
    "labelLink": "#自適應網頁設計 - @media"
  },
  {
    "value": "1.6",
    "label": "Flex 對齊",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "display:flex 的對齊屬性\n\njustify-content: flex-start; 水平向左對齊\njustify-content: center;     水平向中對齊\njustify-content: flex-end;   水平向右對齊\n\nalign-items:start;  垂直向上對齊\nalign-items:center; 垂直中間對齊\nalign-items:end;    垂直向下對齊",
    "labelLink": "#Flex 對齊"
  },
  {
    "value": "2",
    "label": "動畫",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "一連串的影像變化\n\n*Css\nhover\n\n*Vue\ntransition\n\n",
    "labelLink": "#動畫"
  },
  {
    "value": "2.1",
    "label": "Css Hover",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "使用滑鼠標觸發事件",
    "labelLink": "#Css Hover"
  },
  {
    "value": "2.1.1",
    "label": "圖片上顯示文字-css",
    "image": "2/-.1.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "滑鼠標移動到圖片上，同時顯示文字\n\nopacity  隱藏與顯示區塊\n.box 主要區塊\nimg 要對齊 mouseStatus 的位置\n.mouseStatus 隱藏狀態\n\n*文字的顯示與隱藏\n.mouseStatus {\n  opacity: 0;\n  color: #fff;\n  background-color: rgb(39, 39, 39);\n  position: relative;\n  top: -191px;\n  left: 0px;\n  width: 100%;\n  display: inline-block;\n  height: 186px;\n  margin-bottom: -262px;\n  text-align: left;\n}\n.box:hover .mouseStatus {\n  animation-delay: 1s;\n  animation: block 0.6s forwards;\n  transition: all 1.6s;\n}\n\n*box 的處理\n.box {\n  text-align: center;\n  width: 100%;\n  max-width: 300px;\n  box-shadow: 1px 1px 1px 1px rgb(177, 177, 177);\n  margin-bottom: 1rem;\n  transition: all 0.3s;\n}\n.box:hover {\n  box-shadow: 1px 1px 8px 1px rgb(177, 177, 177);\n}\n\n@keyframes block {\n from {\n   opacity: 0;\n }\n to {\n   opacity: 0.8;\n }\n}",
    "labelLink": "#圖片上顯示文字-css"
  },
  {
    "value": "2.2",
    "label": "Vue Transition",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "1.增加顯示與隱藏的判斷式\ndata(){\n return{\n  isShow:false\n }\n}\n\n2.增加 transition 標籤及 v-if 進場與隱藏控制\ntransition(\n  enter-active-class=\"messageBox-enter-active\"\n  leave-active-class=\"messageBox-leave-active\"\n)\n div(v-if=\"isShow\") show thing..\n\n3.撰寫 css 進場與隱藏的時間\n.messageBox-enter-active {\n  animation: goMessageBox 1s;\n}\n.messageBox-leave-active {\n  animation: backMessageBox 1s;\n}\n\n4.撰寫進場與隱藏的動畫\n@keyframes backFeatures {\n  from {\n    opacity: 1;\n    margin-bottom: 0;\n  }\n  to {\n    opacity: 0;\n    margin-bottom: -12%;\n  }\n}\n@keyframes goMessageBox {\n  from {\n    margin-left: -10%;\n    opacity: 0;\n  }\n  to {\n    margin-left: 0;\n    opacity: 1;\n  }\n}",
    "labelLink": "#Vue Transition"
  },
  {
    "value": "3",
    "label": "基礎 JavaScript & JQuery",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "最基礎的 JavaScript\n最基礎的 JQuery",
    "labelLink": "#基礎 JavaScript & JQuery"
  },
  {
    "value": "3.1",
    "label": "事前準備 - JS&JQ",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "撰寫於文件最前頭\n\n// JavaScript\n\"use strict\";\nwindow.onload = function(event) {\n  // coding..\n};\n\n// JQuery\n$(document).ready(function() {\n  // coding..\n});",
    "labelLink": "#事前準備 - JS&JQ"
  },
  {
    "value": "3.2",
    "label": "觸發事件",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "DOM 觸發事件",
    "labelLink": "#觸發事件"
  },
  {
    "value": "3.2.1",
    "label": "Click 事件",
    "image": "3/-.2.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "button(id=\"btn\") JavaScript 觸發事件\nbutton(id=\"btnTwo\") JQuery 觸發事件\n\n// JavaScript\n\"use strict\";\nwindow.onload = function(event) {\n  let eId = document.getElementById(\"btn\");\n  function add() {\n    console.log(\"JavaScript 觸發事件\");\n  }\n  eId.addEventListener(\"click\", add);\n};\n// JQuery\n$(document).ready(function() {\n  let eId = $(\"#btnTwo\");\n  function addFunction() {\n    console.log(\"JQuery 觸發事件\");\n  }\n  eId.click(addFunction);\n});",
    "labelLink": "#Click 事件"
  },
  {
    "value": "3.2.2",
    "label": "onkeydown、onkeypress、onkeyup 事件",
    "image": "3/-.2.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "div JavaScript 觸發事件輸入: \n input(type=\"text\" id=\"input\")\ndiv 以 JQuery 觸發事件輸入: \n input(type=\"text\" id=\"inputTwo\")\n\n// JavaScript 觸發事件\nlet eId = document.getElementById(\"input\");\neId.onkeypress = function() {\n  console.log(\"keypress\");\n};\neId.onkeyup = function() {\n  console.log(\"keyup\");\n};\neId.onkeydown = function() {\n  console.log(\"keydown\");\n};\n// JQuery 觸發事件\nlet eIdTwo = $(\"#inputTwo\");\neIdTwo.keypress(e => {\n  console.log(\"keypress\");\n});\neIdTwo.keyup(e => {\n  console.log(\"keyup\");\n});\neIdTwo.keydown(e => {\n  console.log(\"keydown\");\n});",
    "labelLink": "#onkeydown、onkeypress、onkeyup 事件"
  },
  {
    "value": "3.2.3",
    "label": "Hover 事件",
    "image": "3/-.2.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "div(id=\"divOne\") Hover區塊\ndiv(id=\"divTwo\") 閃爍區域\n\n// JQuery 觸發事件\nlet eId = $(\"#divOne\");\nlet eIdTwo = $(\"#divTwo\");\n\neId.hover(\n  function() {\n    $(this).append($(\"<span>***</span>\"));\n  },\n  function() {\n    $(this)\n      .find(\"span:last\")\n      .remove();\n  }\n);\neIdTwo.hover(function() {\n  $(this).fadeOut(100);\n  $(this).fadeIn(500);\n});",
    "labelLink": "#Hover 事件"
  },
  {
    "value": "3.3",
    "label": "陣列處理函數",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "專門處理陣列的函數",
    "labelLink": "#陣列處理函數"
  },
  {
    "value": "3.3.1",
    "label": "移除重複值 -  new Set()",
    "image": "3/-.3.1.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "... 拷貝數據\nnew Set() 儲存任何類型的唯一值\n\n\np 原始資料: {{arr}}\np 移除重複數值: {{arrTwo}}\n\ndata() {\n  return {\n    arr: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, \"a\", \"c\", \n\"a\"]\n  };\n},\ncomputed: {\n  arrTwo: function() {\n    return [...new Set(this.arr)];\n  }\n}",
    "labelLink": "#移除重複值 -  new Set()"
  },
  {
    "value": "3.3.2",
    "label": "指定淺拷貝 - slice()",
    "image": "3/-.3.2.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": ".slice(begin, end) 淺拷貝資料\n\np 原始陣列{{list}}\np 指定陣列 2 到 3 {{sliceList}}\n\ndata() {\n  return {\n    list: [\"ant\", \"bison\", \"camel\", \"duck\", \n\"elephant\"]\n  };\n},\ncomputed: {\n  sliceList: function() {\n    return this.list.slice(2, 4);\n    //實際淺拷貝出 index 2 到 3\n  }\n}",
    "labelLink": "#指定淺拷貝 - slice()"
  },
  {
    "value": "3.4",
    "label": "物件屬性函數",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "專門處理物件函數",
    "labelLink": "#物件屬性函數"
  },
  {
    "value": "3.4.1",
    "label": "是否有屬性名 - hasOwnProperty()",
    "image": "3/-.4.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": ".hasOwnProperty() 判別物件內是否有其屬性名稱\n\ndiv 當前物件 let obj = { name: \"tips\" }\ndiv 確認物件中是否有\n input(type=\"text\" v-model=\"inputData\") 屬性\ndiv {{check}}\n\ndata() {\n  return {\n    ms: \"123\",\n    inputData: \"\"\n  };\n},\ncomputed: {\n  check: function() {\n    let obj = {\n      name: \"tips\"\n    };\n    return obj.hasOwnProperty(this.inputData);\n  }\n}\n\n參考資料\n檢查屬性是否存在物件內\nhttps://www.jstips.co/zh_tw/javascript/check-if-a-property-is-in-a-object/",
    "labelLink": "#是否有屬性名 - hasOwnProperty()"
  },
  {
    "value": "3.5",
    "label": "Classes 類別",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "ES6 引用 class 作為 JavaScript 現有原型程式繼承的語法糖\n\n參考資料\nJavaScript | ES6 中最容易誤會的語法糖 Class - 基本用法\nhttps://medium.com/enjoy-life-enjoy-coding/javascript-es6-%E4%B8%AD%E6%9C%80%E5%AE%B9%E6%98%93%E8%AA%A4%E6%9C%83%E7%9A%84%E8%AA%9E%E6%B3%95%E7%B3%96-class-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-23e4a4a5e8ed",
    "labelLink": "#Classes 類別"
  },
  {
    "value": "3.5.1",
    "label": "建構子 - Constructor",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "此 function 為建構子\n\nfunction Person(name) {\n  // public properties\n  this.name = name;\n\n  // private value\n  const state = \"Taiwan\";\n\n  // privileged methods\n  this.getFrom = () => `${this.name} from ${state}\n`;\n}\n\nconst letName = new Person(\"Ben\");\nthis.messageOne = letName; //{ \"name\": \"Ben\" }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.getFrom(); //Ben from Taiwan\n",
    "labelLink": "#建構子 - Constructor"
  },
  {
    "value": "3.5.2",
    "label": "建構子 ES6 - Constructor",
    "image": "3/-.5.2.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "此 class 為建構子( Constructor )、letName 為實例( Instance )\n\n透過 new 呼叫時傳入的參數會由 Class 內的 constructor 給接收，\n並在同一區塊建立 Public Properties ，\n而 Method 的部分則是在 constructor 外做描述或存取資料，\nPrivate Value 就存放在 Method 中，依然無法從 Instance 中取得。\n\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n\nconst letName = new Person(\"Ben\");\nthis.messageOne = letName; //{ \"name\": \"Ben\" }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.getFrom(); //Ben from \nTaiwan",
    "labelLink": "#建構子 ES6 - Constructor"
  },
  {
    "value": "3.5.3",
    "label": "繼承 - Inheritance",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "此 function Person 為原始函數\n此 function Age 為 繼承函數\n\nfunction Person(name) {\n  // public properties\n  this.name = name;\n\n  // private value\n  const state = \"Taiwan\";\n\n  // privileged methods\n  this.getFrom = () => `${this.name} from ${state}`;\n}\n\nfunction Age(name, age) {\n  // 將 this 送給 Person 建立 properties\n  Person.call(this, name);\n  this.age = age;\n\n  // public properties\n  this.Age = () => `${this.name} is ${this.age} yearold`;\n}\n\nconst letName = new Age(\"Ben\", 23);\nthis.messageOne = letName; //{ \"name\": \"Ben\", \"age\": 23 }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.Age(); //Ben is 23 yearold",
    "labelLink": "#繼承 - Inheritance"
  },
  {
    "value": "3.5.4",
    "label": "繼承 ES6 - Inheritance",
    "image": "3/-.5.4.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "使用 extends 指定 parent class\n使用 super 呼叫 extends 指定的 class\n\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n// 使用 extends 指定 parent class\nclass Age extends Person {\n  constructor(name, age) {\n    // 用 super 呼叫 extends 指定的 class\n    super(name);\n    this.age = age;\n  }\n  getAge() {\n    return `${this.name} is ${this.age} yearold`;\n  }\n}\nconst showAge = new Age(\"Ben\", 25);\n\nthis.messageOne = showAge; //{ \"name\": \"Ben\" }\nthis.messageTwo = showAge.state; //undefined\nthis.messageThree = showAge.getAge(); //Ben from Taiwan",
    "labelLink": "#繼承 ES6 - Inheritance"
  },
  {
    "value": "3.5.5",
    "label": "靜態的 - static",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "使用 stctic 指定此函數或變數僅由 建構子Constructor 所建立\n無法透過 實例Instance 來建立\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  static getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n\nconst letname = new Person(\"Ben\");\n\n// this.messageOne = letname.getFrom();\n// 此函數無法建立\nthis.messageTwo = Person.getFrom(); //Person from Taiwan",
    "labelLink": "#靜態的 - static"
  },
  {
    "value": "3.5.6",
    "label": "取得與設定 -Getter&Setter",
    "image": "3/-.5.6.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "前綴詞其實不只有 static ，連存取器的 get 及 set 也可以在 Class 中作定義\n\n經常用於不想 Instance 直接存取的狀況，所以利用 Getter 和 Setter \n來假裝操作 Properties ，\n在設定及取值時都先經過一些邏輯判斷再決定怎麼處理。\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  static sayHello(name) {\n    return `Hi!${name}!`;\n  }\n\n  get age() {\n    if (this._age !== undefined) {\n      return `${this.name} age is ${this._age}.`;\n    }\n    return `Don't know ${this.name}'s age.`;\n  }\n\n  set age(age) {\n    this._age = age;\n  }\n\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}.`;\n  }\n}\n\nconst letName = new Person(\"Ben\");\n\nthis.messageOne = letName; //{ \"name\": \"Ben\", \"_age\": 19 }\nthis.messageTwo = letName.age; //Don't know Ben's age.\nletName.age = 19;\nthis.messageThree = letName.age; //Ben age is 19.",
    "labelLink": "#取得與設定 -Getter&Setter"
  },
  {
    "value": "3.6",
    "label": "時間函數",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "設定時間的 JavaScript 函數",
    "labelLink": "#時間函數"
  },
  {
    "value": "3.6.1",
    "label": "設定時間執行 - setTimeout",
    "image": "3/-.6.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "mounted() {\n  $(document).ready(function() {\n    setTimeout(() => {\n      console.log(\"自動 log\");\n    }, 3000);\n    function add() {\n      console.log(\"點擊 log\");\n    }\n    $(\"button\").click(add);\n  });\n}\n",
    "labelLink": "#設定時間執行 - setTimeout"
  },
  {
    "value": "4",
    "label": "資料處理",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "vue 與 function 的資料處理。",
    "labelLink": "#資料處理"
  },
  {
    "value": "4.1",
    "label": "Array & Object & JSON",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Array 處理  \nlet listOne = [\n  { value: \"1\", label: \"標\" },\n  { value: \"1.2\", label: \"標\" },\n  { value: \"1.6\", label: \"標\" }\n];\n\nObject 處理\nlet person = {\n  firsrname: \"PJ\",\n  lastname: \"CHENDer\",\n  adderss: {\n    contry: \"TAIWAN\",\n    city: \"Taipei\",\n    locate: \"101\"\n  }\n};\n\nJSON 處理\nlet JSONData =\n'{\n  \"firsrname\": \"PJ\",\n  \"lastname\": \"CHENDer\",\n  \"adderss\": {\n    \"contryv\": \"TAIWAN\",\n    \"city\": \"Taipei\",\n    \"locate\": \"101\"\n  }\n}';",
    "labelLink": "#Array & Object & JSON"
  },
  {
    "value": "4.1.1",
    "label": "新增自動排序(2階)-Array",
    "image": "4/-.1.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "\n自動排序兩位數(如:1.2)\n\nfAdd() 新增與排序資料\n|- 輸入資料，獲得一個陣列\n|- 計算原始資料(陣列長度)，獲得原始陣列長度\n|- 輸入資料與原始資料對比，獲得即將插入位置的 index\n|- 將一筆輸入資料插入原始資料中\n|- 插入自動排序原始資料\n\n//排序資料 function，放在 script 中，不放在 new Vue 內\nfunction compareValue(a, b) {\n  // a 舊\n  // b 新\n  if (Number(a.value) < Number(b.value)) return -1;\n  return 0;\n}",
    "labelLink": "#新增自動排序(2階)-Array"
  },
  {
    "value": "4.1.2",
    "label": "新增自動排序(3階)-Array",
    "image": "4/-.1.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "// s0 原始資料 [{ value:\"12.1.6\"},{value:\"13.2.5\"}...]\n// s1 瀏覽器新增一筆物件到原始資料末 \n//    this.rows = {value:\"12.1.6\"}\n// s2 新增屬性與分割儲存 \n//    { value:\"12.1.6\",LvOne:\"12\",LvTwo:\"1\",Three:\"6\"} \n// s3 排序 LvOne \n//    if LvOne(a,b) a 與 b 相同時\n// s4 排序 LvTwo [僅限排序 LvOne 相同的物件做排序]\n//    if LvTwo(a,b) a 與 b 相同時\n// s5 排序 LvThree\n// s6 刪除屬性 LvOne、LvTwo、LvThree 只有 value 屬性 {value:\"\"}\n// s7 畫面更新\n\n參考資料\nvue 陣列修改不觸發視圖更新、vue 響應式對象添加或刪除\nhttps://blog.csdn.net/zhouzuoluo/article/details/84633340\nMDN - Array.prototype.sort()\nhttps://developer.mozilla.org/zh-TW/docs/Web/JavaScript/\nReference/Global_Objects/Array/sort",
    "labelLink": "#新增自動排序(3階)-Array"
  },
  {
    "value": "4.1.3",
    "label": "格式間轉換 - Object&JSON",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "*將 Object 轉成 JSON 格式\n\nmounted() {\n  let person = {\n    firsrname: \"PJ\",\n    lastname: \"CHENDer\",\n    adderss: {\n      contry: \"TAIWAN\",\n      city: \"Taipei\",\n      locate: \"101\"\n    }\n  };\n  console.log(JSON.stringify(person));\n}\n\n*將 JSON 格式轉成 Object\n\nmounted() {\nlet JSONData =\n  '{\"firsrname\": \"PJ\",\"lastname\": \"CHENDer\",\"adderss\": {\"contryv\":\"TAIWAN\",\"city\": \"Taipei\",\"locate\": \"101\"}}';\nconsole.log(JSON.parse(JSONData));\n}\n\n參考資料\n[筆記] JavaScript中物件(object)和JSON格式的轉換\nhttps://pjchender.blogspot.com/2016/01/javascriptobjectjson.html",
    "labelLink": "#格式間轉換 - Object&JSON"
  },
  {
    "value": "4.1.4",
    "label": "新增到陣列尾 - Array",
    "image": "4/-.1.4.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "label 新增\ninput(type=\"text\" v-model=\"addText\")\nbutton(@click=\"fAddText\") 送出\ndiv(v-for=\"item in listOne\") {{item.label}}\n\n\ndata: {\n  addText: '',\n  rows: [],\n  listOne: []\n},\nmethods: {\n  fAddText() {\n    let vm = this\n    vm.rows = {\n      label: this.addText\n    }\n    vm.listOne.unshift(vm.rows)\n  }\n}",
    "labelLink": "#新增到陣列尾 - Array"
  },
  {
    "value": "4.2",
    "label": "Index",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Vue 使用 Array 的 index 做操作",
    "labelLink": "#Index"
  },
  {
    "value": "4.2.1",
    "label": "上下排序 - splice()",
    "image": "4/-.2.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "fspliceTop() 目標向上排位順序\nfspliceDown() 目標向下排位順序\n\nul(v-for=\"(item,index) in listOne\" :key=\"item.id\")\n li\n  span {{item.label}}\n  div\n   i(@click=\"fspliceTop(index)\" \n     class=\"el-icon-caret-top\"\n     title=\"Top\")\n   i(@click=\"fspliceDown(index)\"\n     class=\"el-icon-caret-bottom\"\n     title=\"Down\")\n\nlet listOne = [\n  { label: \"你好\" },\n  { label: \"大家好\" },\n  { label: \"昨日安好\" }\n];\n\ndata: {\n  listOne: listOne\n},\nmethods: {\n  fspliceTop(index) {\n    let p = this.listOne;\n    let i = index;\n    if (i > 0) {\n      //限制 i 操作 1\n      p.splice(i - 1, 0, p[i]); //新增一個新的\n      p.splice(i + 1, 1); // 刪除原本的\n    }\n  },\n  fspliceDown(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i + 2, 0, p[i]);\n    p.splice(i, 1);\n  }\n}",
    "labelLink": "#上下排序 - splice()"
  },
  {
    "value": "4.2.2",
    "label": "上下左右刪除 - splice()",
    "image": "4/-.2.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "showIndex() 單一顯示隱藏其他功能區\nfAllFeatures() 全部顯示隱藏功能區\nfModify() 項目修改\nfLeft() 項目向左\nfRight() 項目向右\nfspliceTop() 項目向上\nfspliceDown() 項目向下\n\n\ndata: {\n  listOne: listOne,\n  listLight: [\n    { class: \"el-icon-warning\", check: \"warning\" },\n    { class: \"el-icon-success\", check: \"success\" }\n  ]\n},\nmethods: {\n  showIndex(index) {\n    let p = this.listOne;\n    let i = index;\n    this.index = i;\n    p[i].features = !p[i].features;\n  },\n  fAllFeatures(val) {\n    if (val === 0) {\n      this.listOne.forEach(e => {\n        e.features = false;\n        e.modify = false;\n      });\n    } else {\n      this.listOne.forEach(e => {\n        e.features = true;\n      });\n    }\n  },\n  fModify(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].modify = !p[i].modify;\n  },\n  fLeft(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].style = \"font-weight:bold;margin-left:0\";\n  },\n  fRight(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].style = \"margin-left:2rem\";\n  },\n  fspliceTop(index) {\n    let p = this.listOne;\n    let i = index;\n    if (i > 0) {\n      //限制 i 操作 1\n      p.splice(i - 1, 0, p[i]); //新增一個新的\n      p.splice(i + 1, 1); // 刪除原本的\n    }\n  },\n  fspliceDown(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i + 2, 0, p[i]);\n    p.splice(i, 1);\n  },\n  fDelete(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i, 1);\n  }\n}\n",
    "labelLink": "#上下左右刪除 - splice()"
  },
  {
    "value": "4.3",
    "label": "GET & POST",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Ajax、Axios、Promise\n\n測試用網址:\nhttps://api.jsonbin.io/b/5df85634bda54254c5edebc8\n\n使用 JsonBin:\n*Headers\nsecret-key:\"\",\nContent-Type:\"application/json\"\nversioning:\"false\"\n\n*API\n{\n \"data\": {\n   \"listOne\": [\n    {\n     \"value\": \"1.1\",\n     \"label\": \"Tone\"\n    },\n    {\n     \"value\": \"1.1\",\n     \"label\": \"Tone\"\n    }\n   ]\n }\n}\n\n*儲存空間:JSONBin、GitHub\n*伺服器:Wampserver\n*目錄伺服器:http-server",
    "labelLink": "#GET & POST"
  },
  {
    "value": "4.3.1",
    "label": "GET&POST (JQuery) - Ajax",
    "image": "4/-.3.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "url 網址\nmethod 方式\nheaders 表頭\n\ndiv\n button(id=\"getButton\") 取得\n ul\n  li \n  li \n\n$(\"#getButton\").click(fGet);\n\nfunction fGet() {\n $.ajax({\n  url: \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n  method: \"GET\",\n  headers: {\n    \"secret-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    versioning: false\n  },\n  success: function(e) {\n    console.log(\"成功\");\n    $(\"li:nth-of-type(1)\").append(function() {\n      `<li>${$(this).text(e.label)}</li>`;\n    });\n    $(\"li:nth-of-type(2)\").append(function() {\n      `<li>${$(this).text(e.value)}</li>`;\n    });\n  },\n  error: function() {\n    console.log(\"失敗\");\n  }\n });\n}\n\n// POST，尚未完整測試\n$.ajax({\n    url: \"turnpage.php\",\n    method: \"POST\",\n    data: {\n        \"name\": name,\n        \"phone\": phone\n    },\n    error:function(){\n        alert(\"失敗\");\n    },\n    success:function(){\n        alert(\"成功\");\n    } \n});",
    "labelLink": "#GET&POST (JQuery) - Ajax"
  },
  {
    "value": "4.3.2",
    "label": "GET&POST (Vue) - Ajax",
    "image": "4/-.3.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "button(@click=\"fGet()) 取得\ndiv(v-for=\"item in listOne\" :key=\"item.id\")\n {{item.label}} / {{item.value}}\n\ndata() {\n  return {\n    listOne: []\n  };\n},\nmethods: {\n  fGet() {}\n},\nmounted() {\n  this.fGet = function fGet() {\n    var settings = {\n      async: true, //非同步\n      crossDomain: true, //跨網域\n      url: \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n      method: \"GET\",\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/\nfEQFGSdjmIfKOqonOJci\",\n        \"Content-Type\": \"application/json\",\n        versioning: \"false\",\n        Accept: \"*/*\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    };\n    $.ajax(settings).done(res => (this.listOne = res.listOne));\n  };\n}\n\n參考資料\najax 寫回資料庫\nhttps://ithelp.ithome.com.tw/questions/10188277",
    "labelLink": "#GET&POST (Vue) - Ajax"
  },
  {
    "value": "4.3.3",
    "label": "GET&POST - Axios",
    "image": "4/-.3.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "\n//GET\nfGet() {\n  axios\n    .get(\n      \"https://raw.githubusercontent.com/donma/\nTaiwanAddressCityAreaRoadChineseEnglishJSON/\nmaster/AllData.json\"\n    )\n    .then(response => (this.listOne = \nresponse.data))\n    .catch(function(error) {\n      // 請求處理失敗\n      console.log(error);\n    });\n}\n\n//POST，尚未測試\nmounted () {\n  axios\n  .post('https://www.runoob.com/try/ajax/demo_axios_post.php')\n  .then(response => (this.info = response))\n  .catch(function (error) { // 請求處理失敗\n    console.log(error);\n  });\n}\n\n完整範例參考\nVue.js Ajax(axios)\nhttps://www.runoob.com/vue2/vuejs-ajax-axios.html",
    "labelLink": "#GET&POST - Axios"
  },
  {
    "value": "4.3.4",
    "label": "GET&POST (async) - Axios",
    "image": "4/-.3.4.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "1.原始 axios 撰寫方式\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n  .catch(error => console.log(error))\n\n2.Vue 的 methods 中撰寫 axios 的 GET & POST\n\n// GET\nasync fetchList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci6\" //最後減少六\n      }\n    });\n    const get = await instance.get(\n      \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\"\n    );\n    const { data } = get; //資料在 data 屬性\n    this.listOne = data.listOne; //將GET的資料放到Vue上的groupList陣列中\n  } catch (error) {\n    throw new Error(error);\n  }\n},\n\n// PUT\nasync putList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci6\", //最後減少六\n        \"Content-Type\": \"application/json\",\n        versioning: false\n      }\n    });\n    let data = this.listOne;\n    const put = await instance.put(\n      \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n      { listOne: data }\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n},\nfAddData() {\n  let vm = this;\n  vm.rows = {\n    value: this.inputOne,\n    label: this.inputTwo\n  };\n  vm.listOne.push(this.rows);\n}\n\n參考資料\n使用 axios 訪問 API\nhttps://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html",
    "labelLink": "#GET&POST (async) - Axios"
  },
  {
    "value": "4.3.5",
    "label": "GET&POST (API) - Promise",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "button(@click=\"fetchList()\") GET\ndiv v-for=\"item in listOne\" :key=\"item.id\">{{item}}\n\n\ndata: {\n  listOne: []\n},\nmethods: {\n  fetchList() {},\n  putLsit() {}\n},\nmounted() {\n  this.fetchList = async function fetchList() {\n    try {\n      const setUrl =\n        \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\";\n      const setKey = \"\";\n      const setTimeOut = 6000;\n      const instance = axios.create({\n        timeout: setTimeOut,\n        headers: {\n          // \"secret-key\": setKey\n        }\n        // 要注意 API 是否需要 headers 內的屬性\n      });\n      // Base Set\n      const get = await instance.get(setUrl);\n      // Get Data\n      const { data } = get;\n      this.listOne = data.listOne;\n      // Out Put Data\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n  this.putList = async function putList() {\n    try {\n      const setUrl = \"\";\n      const setKey = \"\";\n      const setTimeOut = 6000;\n      const instance = axios.create({\n        timeout: setTimeOut,\n        headers: {\n          \"Content-Type\": \"application/json\"\n          // \"secret-key\": setKey,\n          // versioning: false\n        }\n        // 要注意 API 是否需要 headers 內的屬性\n      });\n      let data = this.listOne;\n      const put = await instance.put(setUrl, { listOne: data });\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n}",
    "labelLink": "#GET&POST (API) - Promise"
  },
  {
    "value": "4.3.6",
    "label": "GET&POST (APIs) - Promise",
    "image": "4/-.3.6.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "同時接收兩個 API\n\n<button @click=\"getData()\">同時抓取兩個來源資料</button>\n<button @click=\"feachAll()\">feachAll</button>\n<pre>\n  {{html}}\n</pre>\n<div v-for=\"item in listTwo\" :key=\"item.id\">\n  {{item}}\n</div>\n<div v-for=\"item in listThree\" :key=\"item.id\">\n  {{item.CityName}} {{item.CityEngName}}\n</div>\n\ndata: {\n  html: \"資料下載中...\",\n  listOne: [],\n  listTwo: [],\n  listThree: []\n},\nmethods: {\n  getData() {},\n  async feachAll() {\n    try {\n      const instance = axios.create({\n        timeout: 6000\n      });\n      const getOne = await instance.get(\n        \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\");\n      const getTwo = await instance.get(\n        \"https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\");\n      // let { data } = getOne; //資料在 data 屬性\n      this.listTwo = getOne.data.listOne; //將GET的資料放到Vue上的groupList陣列中\n      this.listThree = getTwo.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n},\nmounted() {\n  this.getData = async function getData() {\n    const dataListOne = await axios.get(\n      \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\");\n    const dataListTwo = axios.get(\n      \"https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\");\n    const [dataOne, dataTwo] = await Promise.all([\n      dataListOne,\n      dataListTwo\n    ]);\n    this.html = `\n          API 來源一: ${dataOne.data.listOne[0].label}\n          API 來源二 ${dataTwo.data[0].CityName}\n          兩個 API 都下載完成時才顯示\n         `;\n  };\n}",
    "labelLink": "#GET&POST (APIs) - Promise"
  },
  {
    "value": "4.3.7",
    "label": "GET - JSONP",
    "image": "4/-.3.7.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "利用 script src=\"\" 取得資料\n<script src=\"https://api.twitch.tv/kraken/games/top?client_id=xxx&callback=receiveData&limit=1\"></script>\n<script>\n  function receiveData (response) {\n    console.log(response);\n  }\n</script>\n\n利用 JSPNP，可以存取來源的資料。但 JSONP 的缺點就是你要帶的那些參數永遠都只能附加在網址上的方式(GET)帶過去，沒辦法用 POST。\n如果能用 CORS 的話，還是優先考慮 CORS。\n\n\n\n//此範例以 JavaScript 撰寫\n//引用的 JavaScript 必須在文件最後面\n\n//dataCode.js\ngetData({\n  meals: [\n    {\n      main: \"漢堡\",\n      beverage: \"可樂\",\n      price: \"51100\",\n      pic: \"https://api.fnkr.net/testimg/50x50/a00/FFF/?text=A\"\n    },\n    {\n      main: \"炸雞\",\n      beverage: \"雪碧\",\n      price: \"400\",\n      pic: \"https://api.fnkr.net/testimg/50x50/0a0/FFF/?text=B\"\n    },\n    {\n      main: \"吐司\",\n      beverage: \"紅茶\",\n      price: \"300\",\n      pic: \"https://api.fnkr.net/testimg/50x50/00a/FFF/?text=C\"\n    }\n  ]\n});\n",
    "labelLink": "#GET - JSONP"
  },
  {
    "value": "4.4",
    "label": "本地測試",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "本地端做 JSON GET & POST 測試",
    "labelLink": "#本地測試"
  },
  {
    "value": "4.4.1",
    "label": "http-server 目錄伺服器",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "*安裝\n$ npm install http-server -g\n$ http-server\n\n//Hit CTRL-C to stop the server\n// 在當前目錄下的 cmd 中輸入 http-server，此時此目錄即成為伺服器目錄\n\n在 webpack 的環境中安裝，用來解決打包後無法正常連結到本地端 static 文件下的 JSON 文件。\n\n那麼 http-server 是甚麼? 對於前端來說，需要使用伺服器如 tomcat 或是 Apache http server，這時一個簡單輕量的 http-server 就可以搞定。\n\n當前端開發完成後，打包部署，此時生成一個 dist 文件夾，裡面存放的是一些靜態文件，當我們在編輯器裡直接運行這些靜態文件時，很可能會發生錯誤，此時可以使用 http-server 來搞定。\n\n可以使靜態資料文件的任一目錄成為服務器的目錄，完全拋開後台沉重工作，直接運行你要的代碼。\n\n解決 axios 請求本地的 json 文件在打包後路徑出錯的問題。\n\n參考資料\n解決axios請求本地的json文件在打包後路徑出錯問題\nhttps://www.itread01.com/content/1531126941.html\n\n",
    "labelLink": "#http-server 目錄伺服器"
  },
  {
    "value": "4.5",
    "label": "非同步處理",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "同步執行後執行所有非同步處理",
    "labelLink": "#非同步處理"
  },
  {
    "value": "4.5.1",
    "label": "同步與等待 - async & await",
    "image": "4/-.5.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "async 非同步\nawait 等待\n\n使用變數承接 await 所接收的資料\n\ndiv\n button(@click=\"go()\") Go\n span {{respose}}\n\ndata: {\n  respose: \"\"\n},\nmethods: {\n  go() {}\n},\nmounted() {\n  function sleep(val) {\n    return `funstion in sleep ${val}`; //假設 \ncallback 回來的資料\n  }\n  this.go = async function go() {\n    await sleep(1000); //僅僅等待 (wait)\n    const respose = await sleep(750); //獲得返回值\n    this.respose = respose; //使用變量的資料\n  };\n}",
    "labelLink": "#同步與等待 - async & await"
  },
  {
    "value": "4.5.2",
    "label": "變數儲存錯誤 - Catch",
    "image": "4/-.5.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "data: {\n  dealWithErrors: \"當有錯誤時...\"\n},\nmounted() {\n  async function loadData() {\n    const get = await axios.get(\"URL\");\n  }\n  loadData().catch(function(e) {\n    let dealWithErrors = e;\n    console.log(`當前錯誤: ${dealWithErrors}`);\n  });\n}",
    "labelLink": "#變數儲存錯誤 - Catch"
  },
  {
    "value": "4.6",
    "label": "API 資源",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "自己撰寫或網路蒐集的 API 資源。",
    "labelLink": "#API 資源"
  },
  {
    "value": "4.6.1",
    "label": "自訂 GitHub API",
    "image": "4/-.6.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "API:https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\n\n將 JSON 資料儲存在 GitHun 上",
    "labelLink": "#自訂 GitHub API"
  },
  {
    "value": "4.6.2",
    "label": "狗狗 API",
    "image": "4/-.6.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "API cors-anywhere:https://cors-anywhere.herokuapp.com/\nAPI dog:https://dog.ceo/api/breeds/image/random\n\n透過跨網域取得狗狗 API，每取得一次都會有不一樣的照片。",
    "labelLink": "#狗狗 API"
  },
  {
    "value": "4.6.3",
    "label": "台灣縣市、鄉鎮、地址、中英文 API",
    "image": "4/-.6.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "API:https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\n\n{\n  \"CityName\": \"臺北市\",\n  \"CityEngName\": \"Taipei City\",\n  \"AreaList\":[\n    {\n      \"ZipCode\": \"100\",\n      \"AreaName: \"中正區\",\n      \"AreaEngName\": \"Zhongzheng Dist.\",\n      \"RoadList: [\n        \"RoadName\": \"八德路１段\",\n        \"RoadEngName\": \"Sec. 1, Bade Rd.\"\n      ]\n    }\n  ]\n}\n\n參考資料\n台灣 縣市，鄉鎮，地址 中英文 JSON\nhttps://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/blob/master/README.md",
    "labelLink": "#台灣縣市、鄉鎮、地址、中英文 API"
  },
  {
    "value": "4.6.4",
    "label": "解決跨網域存取的 API",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "只要將 cors-anywhere 所提供的API網址放前面，\n/ 後面加上你要訪問的 API 內容網址。\n\nconst cors = 'https://cors-anywhere.herokuapp.com/'; \n// use cors-anywhere to fetch api data\n\nconst url = 'https://tw.rter.info/capi.php?=1568944322585'; \n// origin api url\n\nlet URL = `${cors}${url}`\n\n/** fetch api url by cors-anywhere */\naxios.get(URL)\n  .then((response) => {\n    const msg = response.data;\n    document.body.innerHTML = JSON.stringify(msg)\n  },\n    (error) => {\n    }\n  );\n\n如何解決跨網域存取被拒絕問題?\nhttps://andy6804tw.github.io/2019/09/21/fix-cors-problem/#%E4%BD%BF%E7%94%A8-cors-anywhere\n",
    "labelLink": "#解決跨網域存取的 API"
  },
  {
    "value": "5",
    "label": "JS&JQ 實例",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "JavsScript 與 JQuery 的實例展示",
    "labelLink": "#JS&JQ 實例"
  },
  {
    "value": "5.1",
    "label": "資料操作",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "以 DOM 的方式操作資料",
    "labelLink": "#資料操作"
  },
  {
    "value": "5.1.1",
    "label": "To Do List",
    "image": "5/-.1.1/-.1.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "代辦清單，使用 JQuery 撰寫",
    "labelLink": "#To Do List"
  },
  {
    "value": "6",
    "label": "基礎 Vue",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "簡易的完成前端事務",
    "labelLink": "#基礎 Vue"
  },
  {
    "value": "6.1",
    "label": "風格指南",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "參考 Vue 風格指南",
    "labelLink": "#風格指南"
  },
  {
    "value": "6.1.1",
    "label": "事前準備 - Vue",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "事前準備掛載資料\n\nbody\n div(id=\"#app\")\n  span {{ms}}\n \nscript\n new Vue({\n   data(){\n     return{\n       ms: \"123\"\n     }\n   },\n   methods:{\n     // 各種要用的 function 寫在這\n     methodsFunction(){\n       //..\n     }\n   },\n   mounted(){\n      // 接 API 通常放這\n\n   }\n })",
    "labelLink": "#事前準備 - Vue"
  },
  {
    "value": "6.1.2",
    "label": "自訂撰寫風格 - 組件、文件",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "1.組件樣板 - 短橫風格\n<v-item :v-item=\"codeItem\">\n\n2.組件- 短橫風格\nVue.component('v-item'){\n  //..\n}\n\n3.導出組件 - 大小寫風格\nexport default{\n name:\"VItem\"\n}\n\n4.組件檔案名稱 - 大小寫風格\n同 導出組件 name\n\nVitem.js\nVitem.vue\n\n4.1 The 前綴 - 前綴風格\n如果組件在其他組件中只出現一次，使用 The 前綴\n如 TheHeader、TheMain、TheFooter\n\nTheHeader.vue\nTheMain.vue\nTheFooter.vue\n\n4.2 V 前綴 - 前綴風格\n如果組件在其他組件出現多次，使用 V 前綴\n如 VInput、VBbtton\n\nVInput.vue\nVBbtton.vue\n\n5.父子組件命名 - 點聚集風格\n在一個搜尋 (search) 的組件，有按鈕 (button)、\n輸入框 (input)、文字框 (textBox)..等等。\n可以有效的方式命名組件。\n\nVSerch.vue\nVSerchButton.vue\nVSerchInput.vue\nVSerchTextBox.vue\n\n6. prop 詳細撰寫\nprops: {\n  status: {\n    type: String, //類型\n    required: true, //是否一定有傳值\n    validator: function (value) { //預設顯示的資料\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].indexOf(value) !== -1\n    }\n  }\n}\n\n7.使用 v-for要注意\n一定要為它加上 :key 屬性，以便維護元素上的狀態\nul\n li(v-for=\"item in listOne\" :key=\"item.id\")\n\n8.組件的樣式盡量在裡面完成 - scoped\n<template>\n  <button class=\"button button-close\">X</button>\n</template>\n\n<!-- 使用 `scoped` 特性 -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>\n\n9.私有屬性名\n類似 JavaScript 的私有域一樣，將 function 另外撰寫，\n保持模塊作用域不被外部訪問的函數，保持私有性。\n\nmethods:{\n  publicmethods(){\n    myPrivateFunction()\n  }\n},\nmoutend:{\n function myPrivateFunction(){\n   //..\n }\n}\n\n10.組件統一順序表\n\n1.副作用 (觸發組件外的影響)\n  el\n2.全局感知 (要求組件以外的知識)\n  name\n  parent\n3.組件類型 (更改組件的類型)\n  functional\n4.模板修改器 (改變模板的編譯方式)\n  delimiters\n  comments\n5.模板依賴 (模板內使用的資源)\n  components\n  directives\n  filters\n6.組合 (向選項里合並屬性)\n  extends\n  mixins\n7.接口 (組件的接口)\n  inheritAttrs\n  model\n  props/propsData\n8.本地狀態 (本地的響應式屬性)\n  data\n  computed\n9.事件 (通過響應式事件觸發的回調)\n  watch\n  9-1生命週期鉤子(按照它們被調用的順序)\n     beforeCreate\n     created\n     beforeMount\n     mounted\n     beforeUpdate\n     updated\n     activated\n     deactivated\n     beforeDestroy\n     destroyed\n10.非響應式的屬性 (不依賴響應系統的實例屬性)\n  methods\n11.渲染 (組件輸出的聲明式描述)\n  template/render\n  renderError\n\n11.文素特性順序\n\n1.定義 (提供組件的選項)\n  is\n2.列表渲染 (創建多個變化的相同元素)\n  v-for\n3.條件渲染 (元素是否渲染/顯示)\n  v-if\n  v-else-if\n  v-else\n  v-show\n  v-cloak\n4.渲染方式 (改變元素的渲染方式)\n  v-pre\n  v-once\n5.全局感知 (需要超越組件的知識)\n  id\n6.唯一的特性 (需要唯一值的特性)\n  ref\n  key\n  slot\n7.雙向綁定 (把綁定和事件結合起來)\n  v-model\n8.其它特性 (所有普通的綁定或未綁定的特性)\n9.事件 (組件事件監聽器)\n  v-on\n10.內容 (覆寫元素的內容)\n  v-html\n  v-text\n\n\n參考資料\n風格指南 - vue.js\nhttps://cn.vuejs.org/v2/style-guide/#%E4%BC%98%E5%85%88%E7%BA%A7-C-%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%9A%E6%8E%A8%E8%8D%90-%E5%B0%86%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%A4%E7%9F%A5%E6%88%90%E6%9C%AC%E6%9C%80%E5%B0%8F%E5%8C%96",
    "labelLink": "#自訂撰寫風格 - 組件、文件"
  },
  {
    "value": "6.1.3",
    "label": "自定義名稱 - Methods",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "methods、computed、mounted\n\n*常用 methods function 名稱\nfetch 取\nfetchData 取資料\nfetchAll 取全部\nget 得到\ngetData 得到資料\nadd 加\naddValue 加數值\naddLabel 加標籤\ndelete 刪除\nimput 輸入\n\n*常用 computed function 名稱\nanchor 錨點",
    "labelLink": "#自定義名稱 - Methods"
  },
  {
    "value": "6.2",
    "label": "v-bind",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "綁定 Class、 Style、true/false",
    "labelLink": "#v-bind"
  },
  {
    "value": "6.2.1",
    "label": ":class - 物件",
    "image": "6/-.2.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "-將 Class 以 data 物件方式儲存\n-點擊按鈕，判別當前顯示的樣式\n\nstyle\n .styleOne {\n   margin-top: 0;\n   margin-left: 0;\n   background-color: burlywood;\n }\n .styleTwo {\n   margin-top: 2rem;\n   margin-left: 2rem;\n   background-color: rgb(184, 184, 184);\n }\n\nbutton(@click=\"moveTo()\") 按鈕\ndiv(:class=\"classList\") I am Data\n\ndata: {\n  classList: {\n    styleOne: true, // 物件名稱為 .styleOne 樣式名稱\n    styleTwo: true // 物件名稱為 .styleTwo 樣式名稱\n  }\n},\nmethods: {\n  moveTo() {\n    this.classList.styleTwo = !this.classList.styleTwo;\n  }\n}",
    "labelLink": "#:class - 物件"
  },
  {
    "value": "6.2.2",
    "label": ":style - 物件",
    "image": "6/-.2.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "-將 Style 以 data 物件方式儲存\n-點擊按鈕，判別是否使用樣式\n\nbutton(@click=\"moveTo()\") 按鈕\ndiv(:style=\"styleList\") I am Data\n\ndata: {\n  styleList: {\n    check: true, // 是否顯示這個樣式\n    marginTop: 0,\n    marginLeft: 0,\n    backgroundColor: \"burlywood\"\n  }\n},\nmethods: {\n  moveTo() {\n    let style = this.styleList;\n    style.check == true\n      ? ((style.backgroundColor = \"#696\"),\n        (style.marginTop = \"2rem\"),\n        (style.marginLeft = \"2rem\"))\n      : ((style.backgroundColor = \"burlywood\"),\n        (style.marginTop = \"0\"),\n        (style.marginLeft = \"0\"));\n    style.check = !style.check;\n  }\n}",
    "labelLink": "#:style - 物件"
  },
  {
    "value": "6.2.3",
    "label": ":style 動態修改樣式 - 物件",
    "image": "6/-.2.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "button(@click=\"moveTo(MarginLeft,MarginTop)\") 按鈕\ndiv\n label MarginLeft:\n input(type=\"text\" v-model.number=\"MarginLeft\")\n br\n label MarginTop:\n input(type=\"text\" v-model.number=\"MarginTop\") \ndiv(:style=\"styleList\") I am Data",
    "labelLink": "#:style 動態修改樣式 - 物件"
  },
  {
    "value": "6.3",
    "label": "Vue.Component",
    "image": "6/-.3.png",
    "styleValue": 2,
    "style": "margin-left:1rem",
    "status": "warning",
    "modify": false,
    "text": "父組件: parent.vue\n子組件: child.vue\n孫組件: grandson.vue",
    "labelLink": "#Vue.Component"
  },
  {
    "value": "6.3.1",
    "label": "局部與全局的組件 - const",
    "image": "6/-.3.1.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "全局組件:\n只要以 Vue.component 為開頭就算是註冊組件，能立即使用。\n<v-item></v-item>\nVue.component(\"v-item\",{\n  template:``\n})\n\n局部組件:\n使用變量儲存 Vue.component 並在 Vue 實例中註冊使用它。\n使用變量儲存 Vue.component，HTML 就無法找到這個組件。\n\nlet v_item = Vue.component(\"v-item\",{\n               template:``\n             })\ncomponent:{\n  \"v-item\": v_item\n}\n\n// 實際操作\nv-button-one\nv-button-two\n\n// 全局組件\nVue.component(\"v-button-one\", {\n  template: `<div><button>全局組件按鈕</button></div>`\n});\n//局部組件\nlet v_button_two = Vue.component(\"v-button-two\", {\n  template: `<div><button>局部組件按鈕</button></div>`\n});\nnew Vue({\n  data() {\n    return {\n      ms: \"123\"\n    };\n  },\n  component: {\n    \"v-button-two\": v_button_two\n  }\n}).$mount(\"#app\");",
    "labelLink": "#局部與全局的組件 - const"
  },
  {
    "value": "6.3.2",
    "label": "使用 Child 內部資料 - data",
    "image": "6/-.3.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "建立的新組建，其內部的 data 都是獨立的\n\ndiv(id=\"app\")\n v-button\n v-button\n v-button\n\nVue.component(\"v-button\", {\n  data() {\n    return {\n      count: 0\n    };\n  },\n  template: `<button v-on:click=\"count++\">\n  You clicked me {{ count }} times.</button>`\n});\n",
    "labelLink": "#使用 Child 內部資料 - data"
  },
  {
    "value": "6.3.3",
    "label": "使用  Child 內部資料 -  v-for",
    "image": "6/-.3.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "data 內使用陣列資料，於 template 使用 v-for 顯示資料\n\ndata() {\n  return {\n    listOne: [\n      { label: \"壹頁\", value: \"1\" },\n      { label: \"貳頁\", value: \"2\" },\n      { label: \"叁頁\", value: \"3\" }\n    ]\n  };\n},\ntemplate: `\n<ul class=\"vNavbar\">\n <li \n    v-for=\"item in listOne\" \n   :key=\"item.id\">\n     {{item.value}} {{item.label}}\n </li>\n</ul>`",
    "labelLink": "#使用  Child 內部資料 -  v-for"
  },
  {
    "value": "6.3.4",
    "label": "使用 Child 套用 Child - data",
    "image": "6/-.3.4.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "想要子組件套用另一個子組件，可以使用變數儲存其中一個組件，另一個子組件再來套用\n\nchild-two Parent\n\nlet childOne = Vue.component(\"child-one\", {\n  template: `<div> Child One</div>`\n});\n\nlet childTwo = Vue.component(\"child-two\", {\n  template: `<div> Child Two <child-one></child-one></div>`,\n  components: {\n    \"child-one\": childOne\n  }\n});\n\ncomponents: {\n  \"child-two\": childTwo\n}",
    "labelLink": "#使用 Child 套用 Child - data"
  },
  {
    "value": "6.4",
    "label": "父傳子 (Props)",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "prop 是父組件用來傳遞數據的一個自定義屬性\n\n父傳多筆給子\n\nprops:{\n propA:{\n \n }\n}",
    "labelLink": "#父傳子 (Props)"
  },
  {
    "value": "6.4.1",
    "label": "Prop 傳遞的屬性",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "props:{\n  put_text: String,\n  put_num: Number,\n  put_array: Array,\n  put_object: Object,\n  put_function: Function,\n  put_boolean: Boolean,\n  put_Data : Date,\n  put_symbol: Symbol\n}",
    "labelLink": "#Prop 傳遞的屬性"
  },
  {
    "value": "6.4.2",
    "label": "Parent 傳值給 Child - prop",
    "image": "6/-.4.2.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "v-base(put_text=\"dataText\" :put_num=\"num\") \n\nVue.component(\"v-base\", {\n  props: {\n    put_text: String,\n    put_num: Number\n  },\n  template: `<div>{{put_text}} {{put_num}}</\ndiv>`\n});\n\nnew Vue({\n  data() {\n    return {\n      dataText: \"根實例輸入\",\n      num: 123\n    };\n  }\n}).$mount(\"#app\");",
    "labelLink": "#Parent 傳值給 Child - prop"
  },
  {
    "value": "6.4.3",
    "label": "Parent 傳值給 Child(動態) - v-bind",
    "image": "6/-.4.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "<v-base :put_num=\"dnum\"></v-base>\n<v-base title=\"行內輸入\"></v-base>\n<v-base :title=\"ms\"></v-base>\n<v-base :title=\"listOne[0].label\"></v-base>\n<v-base :put_object=\"listOne[0]\"></v-base>\n<v-base :put_array=\"listOne\"></v-base>\n\nVue.component(\"v-base\", {\n  props: {\n    title: String,\n    put_num: Number,\n    put_array: Array,\n    put_object: Object\n  },\n  template: `<div> Base Test... {{title}}{{put_object}}{{put_array}}\n {{put_num}} </div>`\n});\n\ndata: {\n  ms: \"根實例輸入\",\n  dnum: 212,\n  listOne: [\n    { label: \"根實例 物件輸入\" },\n    { label: \"看到這段表示，根實例 陣列輸入\" }\n  ]\n}",
    "labelLink": "#Parent 傳值給 Child(動態) - v-bind"
  },
  {
    "value": "6.4.4",
    "label": "Parent 傳值給 Child(再使用) - data",
    "image": "6/-.4.4.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "div\n input(type=\"text\" v-model=\"ms\")\n v-base(:title=\"ms\")\n       \nVue.component(\"v-base\", {\n  props: {\n    put_text: String\n  },\n  data() {\n    return {\n      num: this.put_text\n    };\n  },\n  template: `\n  <div class=\"child\">\n    <h2>子層</h2>\n    <p>父資料 {{put_text}}</p>\n    <div>\n     <input type=\"text\" v-model=\"num\"/>\n     <p>子資料 {{num}}</p>\n    </div>\n  </div>`\n});\n\nnew Vue({\n  data: {\n    ms: \"123\"\n  }\n}).$mount(\"#app\");",
    "labelLink": "#Parent 傳值給 Child(再使用) - data"
  },
  {
    "value": "6.4.5",
    "label": "Prop 必填字符串 - required",
    "image": "6/-.4.5.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "必填的字符串\n\nv-base(put_text=\"123\")\nv-base   <!-- 沒有 put_text 屬性 會報錯 -->\n\nVue.component(\"v-base\", {\n  props: {\n    put_text: {\n      type: String,\n      required: true //自訂組件上必須有這個屬性\n    }\n  },\n\n  template: `\n  <div>{{put_text}}</div>`\n}); ",
    "labelLink": "#Prop 必填字符串 - required"
  },
  {
    "value": "6.4.6",
    "label": "Prop 預設值 - default",
    "image": "6/-.4.6.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "<v-base></v-base>  <!-- 沒有輸入屬性，會自動顯示預設值-->\n\nVue.component(\"v-base\", {\n  props: {\n    put_num: {\n      type: Number,\n      default: 100\n    }\n  },\n\n  template: `\n  <div>{{put_num}}</div>`\n});\n\nnew Vue({\n  data: {\n    dnum: \"\"\n  }\n}).$mount(\"\"#app)",
    "labelLink": "#Prop 預設值 - default"
  },
  {
    "value": "6.4.7",
    "label": "Parent多筆值給Child - prop:{}",
    "image": "6/-.4.7.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "<v-base></v-base>\n\nVue.component(\"v-base\", {\n  props: {\n    put_text: {\n      type: String,\n      default: \"測試文字\"\n    },\n\n    put_num: {\n      type: Number,\n      default: 100\n    }\n  },\n  template: `<div>{{put_text}} {{put_num}}</div>`\n});\n",
    "labelLink": "#Parent多筆值給Child - prop:{}"
  },
  {
    "value": "6.4.8",
    "label": "Parent 傳值給 Grandson - $attrs",
    "image": "6/-.4.8.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "如果有 A-B-C 組件，A 為父組件、C 為孫組件\n\n從 A 傳遞到 C 的過程中，B 尚未定義的 Prop 值，\n使用 $attrs 就不需要再重複撰寫 prop ，\n並可完成父組件傳值給孫組件\n\n一旦有使用過的 prop 值，就無法繼續讓子孫曾使用，\n如 da、db、dc、dd\nA 層prop使用 da，<B v-bind=\"$attrs\"></B> //往下傳遞 db、dc、dd\nB 層prop使用 db、dc，<C v-bind=\"$attrs\"></C> //往下傳遞 dd\nC 層 //只有接收 dd 這個資料，其他 da、db、dc 都沒有接收到\n\nlet vc = {\n  props:[\"text\"] //使用 text，尚未使用 age\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-c\": vc\n  },\n  created() {\n    console.log(this.$attrs); // A 組件資料\n  }\n}\n\nlet vB = {\n  props:[\"msg\"] //使用 msg，尚未使用 text\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-c\": vc\n  },\n  created() {\n    console.log(this.$attrs); // A 組件資料\n  }\n}\n\nlet vA = {\n  data(){\n    return{\n      text: \"A 組件資料\",\n      msg: 100\n    }\n  },\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-b\": vb\n  }\n}",
    "labelLink": "#Parent 傳值給 Grandson - $attrs"
  },
  {
    "value": "6.5",
    "label": "子傳父 ($emit v-on)",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem",
    "status": "warning",
    "modify": false,
    "text": "如果父組件使用 props 傳遞數據給子組件，但如果子組件要把數據傳遞回去，就需要使用自定義事件\n\n你可以使用 v-on 綁定自定義事件，每個 vue 實例都實現事件接口，即:\n1.使用 $on(eventName) 監聽事件\n2.使用 $emit(eventName) 觸發事件\n\n父組件可以使用子組件的地方直接使用 v-on 監聽子組件觸發的事件。\n\n\n參考資料\n菜鳥教程 - Vue 組件\nhttps://www.runoob.com/vue2/vue-component.html",
    "labelLink": "#子傳父 ($emit v-on)"
  },
  {
    "value": "6.5.1",
    "label": "Child 觸發 Parent - $emit、v-on",
    "image": "6/-.5.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "**快速子組件修改父組件資料的方法\n可以不在子組件內，設定 data，於父組件設定 data，透過 prop 傳遞進父組件的資料，再用子組件去觸發原本父組件的事件調正這個 prop 的值。\n\nv-emit 為自訂觸發名稱\n要特別注意自訂觸發名稱，不可有大寫，否則會錯誤\n\n分別於 Child template button 內，\n      寫上 @click=\"childHandler\" //註冊函數(子)\n分別於 Child methods childHandler(){} 內，\n      寫上 this.$emit('v-emit') //註冊觸發名稱\n\n分別於 Parent 的 Child 組件上，\n      使用 @v-emit=\"parentHandler\" //使用自定義名稱與函數\n分別於 Parent methods parentHandler(){} 內， //註冊函數(父)\n      寫上函數執行內容\n\n//Parent\ndiv\n p total\n v-base(@v-emit=\"parentHandler\")\n\n//Child\nlet vBase = Vue.component(\"v-base\", {\n  data() {\n    return {\n      counter: 0\n    };\n  },\n  template: `\n  <div class=\"vBase\">\n      VBase {{counter}} \n    <button @click=\"childHandler\">\n      按鈕\n    </button>\n  </div>`,\n  methods: {\n    childHandler() {\n      this.counter += 1;\n      this.$emit(\"v-emit\");\n    }\n  }\n});\n\n//Parent\ndata() {\n  return {\n    total: 0\n  };\n},\nmethods: {\n  parentHandler() {\n    this.total += 1;\n  }\n},\ncomponents: {\n  \"v-base\": vBase\n}",
    "labelLink": "#Child 觸發 Parent - $emit、v-on"
  },
  {
    "value": "6.5.2",
    "label": "Child 觸發 Farent(傳參) - $emit、v-on",
    "image": "6/-.5.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "透過傳遞參數的方式，才傳遞子組件 data 到 父組件 data\n\n分別於 Child template button 內，\n      寫上 @click=\"childHandler(12)\" //傳遞參數\n分別於 Child methods childHandler(val){} 內，\n      寫上 this.$emit('v-emit',val) //註冊觸發名稱，並傳送參數\n\n分別於 Parent 的 Child 組件上，\n      使用 @v-emit=\"parentHandler\" //此處就不需要再傳入參數\n分別於 Parent methods parentHandler(val){} 內， //接收參數，並使用\n      寫上函數執行內容",
    "labelLink": "#Child 觸發 Farent(傳參) - $emit、v-on"
  },
  {
    "value": "6.5.3",
    "label": "Child 觸發 Farent - .native、$emit",
    "image": "6/-.5.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "使用 .native 就可以直接使用這個元素上的屬性與資料\n簡單來說就是使用父層上的 methods,不用再透過 @emit 事件監聽子組件內的觸發後，再回來觸發。\n適用於最底層基礎的組件，自訂 button\n\n//自定義組件 v-button 組件\ntemplate\n button(type=\"button\" @click=\"clickHandler\")\n\nmethods:{\n  clickHandler(){\n    this.$emit('vclick')\n  }\n}\n\n//引用 v-button 組件\nv-button(@click=\"clickHandler @vclick=\"vClickHandler\")\n\nmethods:{\n  clickHandler () {\n    alert('onclick') // 此處不會執行，因為組件中未定義 click 事件\n  },\n  vClickHandler () {\n      alert('onvclick') // 觸發 vclick 自定義事件\n  }\n}\n\n// 則如果將下面修改成\nv-button(@click.native=\"clickHandler @vclick=\"vClickHandler\")\n那麼兩個事件都會執行\n\n\n參考資料\nVue 中自定義按鈕組件為什麼要加 .native\nhttps://segmentfault.com/q/1010000011186651/a-1020000011187890",
    "labelLink": "#Child 觸發 Farent - .native、$emit"
  },
  {
    "value": "6.5.4",
    "label": "Farent 間接使用 Child data - .native",
    "image": "6/-.5.4.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "v-item(\n  v-for=\"item in listOne\"\n  :list=\"item\"\n  :key=\"item.id\"\n  @click.native=\"add(item)\"\n  )\n\nlet vItem = Vue.component(\"v-item\", {\n  props: {\n    list: Object\n  },\n  template: `\n  <div class=\"vItem\">\n    <ul>\n     <li>{{list.label}} -- {{list.value}}</li>\n    </ul>\n  </div>`\n});\n\ndata() {\n  return {\n    listOne: [\n      { label: \"A\", value: 001 },\n      { label: \"B\", value: 002 },\n      { label: \"C\", value: 003 }\n    ]\n  };\n},\nmethods: {\n  add(val) {\n    alert(val.label);\n  }\n},\ncomponents: {\n  \"v-item\": vItem\n}",
    "labelLink": "#Farent 間接使用 Child data - .native"
  },
  {
    "value": "6.6",
    "label": "兄傳弟 (EventBus)",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem",
    "status": "warning",
    "modify": false,
    "text": "-EventBus 會用到的相關鉤子函數與指令\n-使用 EventBus 註冊事件後，事件會占用記憶體，\n註冊完後記得要註銷掉。\n\n鉤子\nbeforeCreate() 註冊事件\nbeforeDestroy() 註銷事件\n\n函數\n$destroy() 清除它與其他實例的連結，解綁它全部指令及事件監聽器\n$off() 移除所有事件的監聽",
    "labelLink": "#兄傳弟 (EventBus)"
  },
  {
    "value": "6.6.1",
    "label": "本地監聽事件 - this.$on",
    "image": "6/-.6.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "beforeCreate() 與 beforeDestroy() el 建立前與 el 註銷\n\ndiv\n p {{ms}}\n input(type=\"text\" @click=\"aler()\")\ndata() {\n  return {\n    ms: \"123\"\n  };\n},\nbeforeCreate() {\n  // 監聽觸發\n  this.$on(\"start\", (arg) => {\n    alert(arg)\n  })\n},\nbeforeDestroy(){\n  this.$off(\"start\",arg)\n},\nmethods: {\n  aler() {\n    // 觸發點\n    this.$emit(\"start\", \"監聽器聽到 start 函數被觸發\")\n    this.ms = \"methods 觸發\"\n  }\n}",
    "labelLink": "#本地監聽事件 - this.$on"
  },
  {
    "value": "6.6.2",
    "label": "兄弟間監聽事件 - EventBus.$on",
    "image": "6/-.6.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "let EventBus = new Vue(); //建立資料傳遞的橋樑\nEventBus.$destroy();  $destroy 清除它與其他實例的連結，解綁它全部指令及事件監聽器\nEventBus.$off();  $off() 移除所有事件的監聽",
    "labelLink": "#兄弟間監聽事件 - EventBus.$on"
  },
  {
    "value": "6.6.3",
    "label": "EventBus 方法 - methods",
    "image": "6/-.6.3.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "let EventBus = new Vue({\n  methods:{\n    changeAge(age){ //1\n      this.$emit('changeAge', `${age} 歲`) //2\n    }\n  }\n});\n組件間可以透過 EventBus 來觸發 methods，\n將 EventBus 內的 methods 名稱(1)與，\nmethods 內的觸發事件名稱(2)設定一樣，減少查詢名稱上的問題。\n\nBig Brother\ndiv(id=\"app\")\n p 兄: {{userAge}}</p> <button @click=\"editAge()\">按鈕\n v-base\n\nlet EventBus = new Vue({\n  methods:{\n    changeAge(age){ //1\n      this.$emit('changeAge', `${age} 歲`) //2\n    }\n  }\n});\nnew Vue({\n  data(){\n    return{\n      userAge:\"\"\n    }\n  },\n  methods:{\n    editAge(){\n      this.userAge = 30;\n      EventBus.changeAge(this.userAge)\n    }\n  },\n  components:{\n    \"v-base\": VBase\n  }\n\nLitter Brother\nlet VBase = Vue.component('v-base',{\n  data(){\n    return{\n      data: \"\"\n    }\n  },\n  template:`<div>HaHa 弟: {{data}}</div>`,\n  beforeCreate(){\n    EventBus.$on(\"changeAge\",(age)=>{\n      this.data = age\n    })\n  },\n  beforeDestroy(){\n     EventBus.$off(\"changeAge\",age);\n  },\n})",
    "labelLink": "#EventBus 方法 - methods"
  },
  {
    "value": "6.7",
    "label": "Component",
    "image": "6/-.7.png",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "使用 computed 計算時，盡量以兩個單位之間做計算。\n\n實體範例:商品計算\n-會員有三個級別，分別為 Lv:1、Lv:2 與 Lv:3\n-會員的三個級別，分別折扣為 0.95%、0.9%、0.8%\n-一般商品買超過一千則回饋一百，條件為會員折扣後仍需滿\n一千元以上才符合回饋",
    "labelLink": "#Component"
  },
  {
    "value": "6.7.1",
    "label": "回傳 - get ()",
    "image": "6/-.7.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "computed 計算屬性，使用 data 屬性內的值，透過 return \n回傳一個新的變動資料到 HTML 上。\n有兩種方式撰寫\n// 第一種，Object 方式\nchangeOne:{\n get(){\n  return this.message + \" change One\";\n }\n}\n// 第二種， Function 方式\nchangeTwo:function(){\n  return this.message + \" change Two\";\n}\n\ndiv\n input(type=\"text\" v-model=\"message\")\n div {{changeOne}}\n div {{changeTwo}}\ndata() {\n  return {\n    message: \"hello\"\n  };\n},\ncomputed: {\n  changeOne: {\n    // 計算屬性:依賴 message 變化而變化， \n    // 依賴沒變化就不會重新渲染\n    get() {\n      return this.message + \" change One\";\n    }\n  },\n  changeTwo: function() {\n    return this.message + \" change Two\";\n  }\n}\n",
    "labelLink": "#回傳 - get ()"
  },
  {
    "value": "6.7.2",
    "label": "設定 - set ()",
    "image": "6/-.7.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "使用 get() 與 set() 回傳賦予的值\n\ndiv\n button(@click=\"clickComputed()\") Setting Computed\n div 原始資料: {{didi}} {{family}}\n div Computed: {{didiFamily}}\n div Set Computed: {{set}}\n\ndata() {\n  return {\n    didi: \"didi\",\n    family: \"family\"\n  };\n},\ncomputed: {\n  didiFamily: {\n    //getter\n    get() {\n      return this.didi + \" \" + this.family;\n    },\n    set(newValue) {\n      // setter\n      console.log(newValue);\n      this.didi = 123;\n      this.family = 456;\n    }\n  }\n},\nmethods: {\n  //賦值，調用 setter\n  clickComputed() {\n    this.didiFamily = \"John Don\";\n  }\n}",
    "labelLink": "#設定 - set ()"
  },
  {
    "value": "6.8",
    "label": "與 HTML 元素操作",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Vue 與 HTML 元素\nVue 與 JS、JQuery 操作",
    "labelLink": "#與 HTML 元素操作"
  },
  {
    "value": "6.8.1",
    "label": "Select",
    "image": "6/-.8.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "撰寫 Select 時，\n要特別注意 value 要使用 v-bind 去動態綁定。\noption 屬性加上 selected 為預設顯示的文字與數值\n\n\ndiv\n select(v-model=\"selected\")\n  option(selected value=\"900\") -請選擇-\n   option(v-for=\"option in options\" :value=\"option.value\")\n p Selected: {{selected}}\n\ndata() {\n  return {\n    selected: 900,\n    options: [\n      { value: 12, text: 12 },\n      { value: 24, text: 24 },\n      { value: 36, text: 36 }\n    ]\n  };\n}",
    "labelLink": "#Select"
  },
  {
    "value": "6.9",
    "label": "生命週期鉤子",
    "image": "6/-.9.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "生命週期鉤子表示元素的創立與毀滅。\n\nbeforeCreate: function() {\n  console.log(`beforeCreate:My name is ${this.name}`);\n}, //1\ncreated: function() {\n  console.log(`created:My name is ${this.name}`);\n  // 已可存取 this.$data\n}, //2\nbeforeMount: function() {\n  console.log(`beforeMount:My name is ${this.name}`);\n}, //3\nmounted: function() {\n  console.log(`mounted:My name is ${this.name}`);\n  // 已可存取 this.$el\n}, //4\nbeforeUpdate: function() {\n  console.log(`beforeUpdate:My name is ${this.name}`);\n}, //5\nupdated: function() {\n  console.log(`updated:My name is ${this.name}`);\n  // 狀態已更新\n}, //6\nbeforeDestroy: function() {\n  console.log(\"beforeDestroy\");\n  // 可以用來清除事件綁定\n}, //7\ndestroyed: function() {\n  console.log(\"destroyed\");\n  // 實例被銷毀\n}",
    "labelLink": "#生命週期鉤子"
  },
  {
    "value": "6.9.1",
    "label": "關於 beforeCreate & beforeDestroy",
    "image": " 6/-.10.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "使用 EevnBus 時，需要在這兩個階段中撰寫程式碼\n\nbeforeCreate(){\n  // 註冊事件名\n  EventBus.$on(\"fMessageBox\",(val)=>{\n    this.fMessageBox(val,\"\")\n  })\n},\nbeforeDestroy(){\n  // 銷毀事件名\n  EventBus.$off(\"fMessageBox\",val,text)\n // 或是註銷事件與移除實例 (兩者功能些許相同)\n  EventBus.$destroy()\n}",
    "labelLink": "#關於 beforeCreate & beforeDestroy"
  },
  {
    "value": "6.10",
    "label": "Created",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem",
    "status": "warning",
    "modify": false,
    "text": "mouted 與 created 的區別，\ncreated: 在模板渲染成 Html 前調用，即通常初始化\n某些屬性值，然後再渲染成視圖。\nmouted: 在模板渲染成 Html 後調用，通常是初始化\n頁面完成後，再對 html 的 DOM 的節點進行一些操作。\n\n參考資料\nVue生命周期中mounted和created的區別\nhttps://blog.csdn.net/xdnloveme/article/details/78035065",
    "labelLink": "#Created"
  },
  {
    "value": "6.10.1",
    "label": "全局監聽鍵盤帶入 data - 原型",
    "image": "6/-.10.1.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "document.onkeydown 監聽全局事件\n\ndata() {\n  return {\n    message: \"\"\n  };\n},\ncreated() {\n  // 全局監聽鍵盤事件\n  let vm = this;\n  document.onkeydown = function(e) {\n    let key = window.event.keyCode;\n    vm.message = key;\n  };\n}",
    "labelLink": "#全局監聽鍵盤帶入 data - 原型"
  },
  {
    "value": "6.10.2",
    "label": "全局監聽鍵盤帶入 function",
    "image": "6/-.10.2.gif",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "created()鉤子，使用 methods 內的事件\n\nmethods: {\n  up(val) {\n    this.message = `${val} 上`;\n  },\n  down(val) {\n    this.message = `${val} 下`;\n  },\n  left(val) {\n    this.message = `${val} 左`;\n  },\n  right(val) {\n    this.message = `${val} 右`;\n  }\n},\ncreated() {\n  // 全局監聽鍵盤事件\n  let vm = this;\n  document.onkeydown = function(e) {\n    let key = window.event.keyCode;\n    switch (key) {\n      case 38:\n        vm.up(key);\n        break;\n      case 40:\n        vm.down(key);\n        break;\n      case 37:\n        vm.left(key);\n        break;\n      case 39:\n        vm.right(key);\n        break;\n      default:\n        break;\n    }\n  };\n}",
    "labelLink": "#全局監聽鍵盤帶入 function"
  },
  {
    "value": "7",
    "label": "Vue 組件庫",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "自訂的 vue 組件庫",
    "labelLink": "#Vue 組件庫"
  },
  {
    "value": "7.1",
    "label": "v-button",
    "image": "7/-.7.1.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "說明\n<v-button 屬性 @click.native=\"add()\">\n\n//@click.native=\"function()\"，.native 使用父層的事件\n\n屬性:\nname，v-button name\n\n樣式:\n#Vbutton\n\n範例:\ntemplate\n{{ms}}\n<v-button \n  name=\"你好\" \n  @click.native=\"add()\">\n</v-button>\n\nscript\nVue.component(\"v-button\", {\n  props: {\n    name:{\n      type: String,\n      default: \"button\"\n    }\n  },\n  template: `\n   <div id=\"VButton\">\n    <button>{{name}}</button>\n   </div>`\n});\nnew Vue({\n  data: {\n    ms: \"123\"\n  },\n  methods:{\n    add(){\n      this.ms = \"456\"\n    }\n  }\n}).$mount(\"#app\");\n ",
    "labelLink": "#v-button"
  },
  {
    "value": "8",
    "label": "Cli Vue 3.0",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "\n\nA 組件匯入另一個組件\nhttps://blog.csdn.net/lzzattack03x/article/details/79244687",
    "labelLink": "#Cli Vue 3.0"
  },
  {
    "value": "9",
    "label": "Web & Server",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "伺服器與瀏覽器、客戶端的溝通。",
    "labelLink": "#Web & Server"
  },
  {
    "value": "9.1",
    "label": "運作原理",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "運作、流程、設計的原理\n\nAPI 程式介面\nAjax 非同步 JavaScript 與 XML\nSame Origin Policy 同源政策\nCORS 跨來源資源共享\nPreflight Request 預檢請求\nJSONP JSON with Padding",
    "labelLink": "#運作原理"
  },
  {
    "value": "9.1.1",
    "label": "HTTP 運作原理",
    "image": "9/-.1.1.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "完整的 HTTP 流程，通常有下面七個步驟:\n1.建立 TCP 連結\n2.瀏覽器: 向「Web 伺服器」發送請求命令\n3.瀏覽器: 發送請求表頭 (headers)\n4.Web 伺服器: 回應 (response)\n5.Web 伺服器: 發送回應 (response) 資訊\n6.Web 伺服器: 向「瀏覽器」發送資訊 \n7.Web 伺服器: 關閉 TCP 連結\n\n參考資料\nAJAX JavaScript 與 jQuery 教學範例 for PHP\nhttps://www.footmark.info/programming-language/php/ajax-javascript-jquery-example-php/",
    "labelLink": "#HTTP 運作原理"
  },
  {
    "value": "9.1.2",
    "label": "XMLHttpRequest 運作原理",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "瀏覽器將它們的 HTTP API 定義一個 XMLHttpRequest 物件上。\n此物件的每個實體皆代表一組 requset/response 的配對，\n而這個物件的屬性與方法讓你能夠\n\n-做出 POST、HEAD、及 GET 請求的能力\n-同步 (sync) 或非同步 (async) 擷取 Web 伺服器的回應 (response)，並\n且能夠以「文字」或一個「DOM」檔案的形式返回內容\n\n//XMLHttpRequest 它並不限於只能用在 XML 檔案，它可以接收\n任何形式的文字檔案",
    "labelLink": "#XMLHttpRequest 運作原理"
  },
  {
    "value": "9.1.3",
    "label": "Ajax 運作原理",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "Ajax 應用可以僅向伺服器傳送並取回指定資料，接著客戶使用\n JavaScript 處理伺服器回應的資料，因只取需要的資料，\n所以伺服器回應更快且負荷也減少。\n\n1.使用者在「瀏覽器」觸發一個事件，例如點擊按鈕。\n2.將上述獲的事件的同時，使用 JavaScript 的 XMLHttpRequest 物件，在背景對「Web 伺服器」發送一個 HTTP 請求，達到與「Web 伺服器」\n進行資料的非同步交換\n3.將從「Web 伺服器」取得的資料，使用 JavaScript 操作 DOM，\n來實現動態局部更新「瀏覽器」的網頁內容\n\n參考資料\n輕鬆理解 Ajax 與跨來源請求\nhttps://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/",
    "labelLink": "#Ajax 運作原理"
  },
  {
    "value": "9.1.4",
    "label": "API 運作原理",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "*什麼是 API\n想像一下電腦上不是有一個 USB 插槽嗎?然後你就會想拿買來的\nUSB 隨身碟插上並使用。而明明是不同廠牌做的東西，都可以讀的到、\n都可以差到 USB 插槽裡面。\n\n因為有一項標準叫做 USB 介面，當這套標準訂出來以後。\n所有廠家只要按照這一套標準開發，就可以保證能夠連接電腦跟 USB 隨身碟。\n\nAPI 也是，只是變成程式跟程式之間的串接。今天我寫的程式需要讀取檔案，那麼我就要去串接一個「讀取檔案的 API」。\n\n例如說今天我想要讓我的網頁能夠用 Facebook 登入，那要怎麼辦？\n我就要去串接「Facebook 提供的 API」，\n就等於說是 Facebook 向外提供給大家的一套介面、一套標準，\n任何想要接入 Facebook 服務的開發者們，\n都可以遵循著那套規範拿到自己想要的資料，這個東西就叫做 API。\n\n*API 串接 (Documentation)\nAPI 的串接，一定要有文件才知道怎麼串，不然根本串不起來，因為你連要傳什麼參數都不知道\n\n例如 Node.js 的讀取檔案\nfs.readdir(path[,options],callback)\n\npath <string>|<buffer>\noptions <string>|<Object>\n encoding <string> defalut='utf8'\ncallback <Function>",
    "labelLink": "#API 運作原理"
  },
  {
    "value": "9.2",
    "label": "HTTP request - 請求",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "一個 HTTP 請求由四個\n1.HTTP 請求方法 (method) 或「動詞」(verb)，比如 GET 或 POST 請求\n2.要請求的 URL，就是請求的網址\n3.一組選擇性的請求表頭 (headers)，包含一些「客戶端環境」與「身分驗證」資訊..\n4.一個選擇性的請求主體 (body)，也就是請求正文，包含客戶提交的「查詢字串」或「表單」資訊..",
    "labelLink": "#HTTP request - 請求"
  },
  {
    "value": "9.2.1",
    "label": "HTTP 請求內容",
    "image": "9/-.2.1.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "請求方法：GET\n請求地址：/service.php?number=1020501\nHTTP 版本：HTTP/1.1\n請求表頭：紅色部分\n請求主體：綠色部分\n\n//請求「表頭」與「主體」之間有一個空行，\n用來表示請求「表頭」已經結束了，接下來是請求「主體」\n\n//紅色部分，GET /service.php?number=1020501 HTTP/1.1\nHost: localhost\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36\nq=0.01\nAccept: */*\nReferer: http://localhost/javascript-demo.html\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4\n\n//綠色部分\nnumber=1020501",
    "labelLink": "#HTTP 請求內容"
  },
  {
    "value": "9.2.2",
    "label": "CORS 跨來源資源共用",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "如果你想開啟來源 HTTP 請求的話，Server 必須在 Response 的 Header 裡面加上 Access-Control-Allow-Origin。\n\n當瀏覽起收到 Response 之後，會先檢查 Access-Control-Allow-Origin裡面的內容，如果裡面有包含現在這個發起 Request 的 Origin 的話，就會允許通過，讓程式順利接收到 Response。\n\n重點是這一行：Access-Control-Allow-Origin: *，星號就代表萬用字元，意思是任何一個 Origin 都接受。所以當瀏覽器接收到這個 Response 之後，比對目前的 Origin 符合*這個規則，檢驗通過，允許我們接受跨來源請求的回應。\n\n總結一下，如果你想要發起跨來源 HTTP 請求並且順利收到回應的話，需要確保 Server 端有加上Access-Control-Allow-Origin，不然 Response 會被瀏覽器給擋下來並且顯示出錯誤訊息。",
    "labelLink": "#CORS 跨來源資源共用"
  },
  {
    "value": "9.3",
    "label": "HTTP response - 回應",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "伺服器的 HTTP 回應 (response) 有三個部分\n1.由數值文字所組成的狀態碼 (status code)，指示請求成功或失敗\n2.一組回應表頭 (headers) 包含許多有用的資訊，例如伺服器類型、日期時間、內容類型和長度\n3.回應主體 (body) 也就是回應正文，例如「文字字串」或「HTML 代碼」",
    "labelLink": "#HTTP response - 回應"
  },
  {
    "value": "9.3.1",
    "label": "HTTP 回應內容",
    "image": "9/-.3.1.png",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "HTTP 版本：HTTP/1.1\n回應狀態碼：200 OK，代表請求成功\n回應資料類型：application/json; charset=UTF-8，代表資料類型 JSON；編碼格式 UTF-8\n回應表頭：紅色部分\n回應主體：綠色部分（這裡回應的資料格式為 JSON）\n\n//回應「表頭」與「主體」之間有一個空行，用來表示回應「表頭」已經結束了，接下來是回應「主體」\n\n//紅色部分，HTTP/1.1 200 OK\nDate: Sat, 26 Sep 2015 06:12:28 GMT\nServer: Apache/2.4.12 (Win32) OpenSSL/1.0.1l PHP/5.6.8\nX-Powered-By: PHP/5.6.8\nContent-Length: 111\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: application/json; charset=UTF-8\n\n//綠色部分\n{\"number\":\"1020501\",\"name\":\"\\u738b\\u4e00\\u5091\",\"sex\":\"\\u7537\"}",
    "labelLink": "#HTTP 回應內容"
  },
  {
    "value": "9.4",
    "label": "HTTP status code - 狀態碼",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-1xx:指示訊息。表示收到 Web 瀏覽器請求，正在進一步的處理。\n-2xx:成功訊息。表示請求已經正確接收，並已經被理解和接受。例: 200 OK\n-3xx:重新導向。表示請求沒有成功，必須採取進一步的動作以完成請求。\n-4xx:客戶端錯誤。表示客戶端提交的請求有錯誤或者不能被完成。例: 404 Not Found，代表請求中引用的檔案不存在\n-5xx:伺服器錯誤。表示伺服器不能完成請求的處理，儘管請求正確。例: 500 Internal Server Error，代表伺服器遇到了一個未曾預料的狀況，通常是伺服器的程式碼錯誤。",
    "labelLink": "#HTTP status code - 狀態碼"
  },
  {
    "value": "21",
    "label": "Drawer 抽屜",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "-隱藏與開啟左側導覽列的 Drawer 抽屜",
    "labelLink": "#Drawer 抽屜"
  },
  {
    "value": "21.1",
    "label": "Menu Drawer 導覽列抽屜-原型",
    "image": "21/-.1.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "\n-Menu Drawer 分兩個部分，單獨得 Menu 導覽列以及 Menu & Main 網站組要內容的組合。\n-對於要隱藏的區塊，記得在父層多加入 height 來避免隱藏時變動畫面的排版。\n\n1.Menu (Vue 與 Css)\n v-if 控制顯示與隱藏\n moveMenu 判斷顯示與隱藏\n clickMenu 控制 moveMenu 判斷\n tranisition 呈現進場與出場的效果\n .move-enter-active 進場效果\n .move-leave-active 出場效果\n margin-left 去調整位置\n opacity 去調整漸進與漸出\n position: relative;top:0;\n\n2.Menu & Main  (Vue 與 Css)\nmenu 的撰寫(同上css略為不同)\n v-if 控制顯示與隱藏\n moveMenu 判斷顯示與隱藏\n closeMenu() this.moveMenu = false\n .menu 導覽樣式\n .el-icon-close X 樣式\n .delectButton 刪除按鈕樣式\n .move-enter-active 進場效果\n .move-leave-active 出場效果\n\n.menu {\n   margin-top: 5rem;\n   max-width: 150px;\n   width: 13%;\n   height: 100%;\n   text-align: center;\n   position: fixed;\n   top: 0;\n   left: 0;\n   background-color: #fff;\n   z-index: 10;\n}\n\n3.html\nmain\n div(:class=\"{leftMain:moveMenu,rightMain:!moveMenu}\") //移動 main 區塊\n  transition(enter-active-class=\"move-enter-active\" leave-active-class=\"move-leave-active\")\n   section(class=\"delectButton v-if=\"!moveMenu\")\n    i(@click=\"clickMenu() class=\"el-icon-d-arrow-right\")",
    "labelLink": "#Menu Drawer 導覽列抽屜-原型"
  },
  {
    "value": "21.2",
    "label": "Menu Drawer 導覽列抽屜-排版",
    "image": "21/-.2.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-分別是左側導覽列與主要內容\n-左側導覽列:可隱藏與開啟，並固定於畫面上\n-主要內容:可用滾輪延伸內容，不與左側導覽列衝突\n\n1.Css\n#app {\n  display: flex;\n}\nsection {\n  background-color: rgb(241, 117, 80);\n  border: 1px solid black;\n}\nsection:nth-child(1) {\n  width: 30%;\n  overflow-y: scroll;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100vh;\n}\nsection:nth-child(2) {\n  margin-left: 30%;\n  width: 70%;\n  height: 120vh;\n}\n\n2.Html\ndiv(#app)\n section 導覽列\n section 主要內容",
    "labelLink": "#Menu Drawer 導覽列抽屜-排版"
  },
  {
    "value": "22",
    "label": "Select 選擇器-下拉選單",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "當選項過多時，使用下拉選單展示並選擇內容",
    "labelLink": "#Select 選擇器-下拉選單"
  },
  {
    "value": "22.1",
    "label": "el-option-group + Icon",
    "image": "22/-.1.gif",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "el-secect(v-model=\"selectValue\") //建立下拉選單\n el-option-group(v-for=\"group in listOne\"\n               :key=\"group.label\"\n               :label=\"group.label\") //群組資料\n  el-option(v-for=\"item in group.options\"\n                 :key=\"item.value\"\n                 :label=\"item.label\"\n                 :value=\"item.value\") //要放的 label 區塊\n   span(style=\"float:left\") {{item.label}} //顯示 label\n   span(style=\"float:right\") .. 顯示其他內容   ",
    "labelLink": "#el-option-group + Icon"
  },
  {
    "value": "31",
    "label": "疑問與解題?",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "疑問與解題",
    "labelLink": "#疑問與解題?"
  },
  {
    "value": "31.1",
    "label": "什麼是 TCP?",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "-傳輸控制協定 (Transmission Control Protocol)，是一種連接導向\n、基於位元組流的傳輸層通訊協定。\n-TCP協定的執行可劃分為三個階段：\n連接建立(connection establishment)、\n資料傳送（data transfer）和\n連接終止（connection termination）。",
    "labelLink": "#什麼是 TCP?"
  },
  {
    "value": "41",
    "label": "語法與快捷鍵",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "常用語法及快捷鍵的紀錄",
    "labelLink": "#語法與快捷鍵"
  },
  {
    "value": "41.1",
    "label": "sublime",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "輕便、快速的編輯器",
    "labelLink": "#sublime"
  },
  {
    "value": "41.1.1",
    "label": "sublime - LiveServer",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "進入要 livereload 的目錄，\n點擊右鍵 Git Base Here > 輸入 live-server ，\n即可進入 local http://127.0.0.1:8080/ 的端口，",
    "labelLink": "#sublime - LiveServer"
  },
  {
    "value": "41.1.2",
    "label": "sublime - 快捷鍵",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "Sublime\nctrl+shift+p 安裝套件(輸入 install Package)\nshif+alt+up 向上增加光標\nshif+alt+down 向下增加光標\nctrl+d 複製一行至下方\nctrl+k 刪除一行\nctrl+`  叫出 console.log\nctrl+/  註解程式碼\nctrl+J 選取多行並合併成一行\nalt+up 目前光標程式碼向上移動\nalt+down 目前光標程式碼向下移動\n\nSublime-HTMLPrettify-master\nshift+alt+f 自動整理程式碼\n\n.jsbeautifyrc.defaults.json\n\"indent_size\": 2 //修改分隔行數\n\nColorPick\nshift+alt+d 開啟調色盤\n\n自訂快捷鍵文件:\nPerference → Key Bindings 加上下方文字\n\n當前自訂:\n[\n { \"keys\": [\"shift+alt+f\"], \"command\": \"reindent\" },\n { \"keys\": [\"ctrl+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Line.sublime-macro\"} },\n { \"keys\": [\"ctrl+d\"], \"command\": \"duplicate_line\" },\n { \"keys\": [\"shift+alt+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} },\n { \"keys\": [\"shift+alt+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} },\n { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },\n { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },\n]\n",
    "labelLink": "#sublime - 快捷鍵"
  },
  {
    "value": "41.1.3",
    "label": "sublime - 插件軟體",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "All Autocomplete 自動完成頁面中寫過的 id/class/標籤名稱\nColorPicker 調色盤\n使用方式: shift+alt+d 開啟調色盤\nCompass 可以使用 SASS 的輔助背景執行\nColor highlighter 顯示色碼色彩，直接在色碼上顯示顏色\nConventToUTF8 Sublime 配置檔案\nJavaScript Completions 是 JS 代碼快速編輯和提示工具\nJsonchema 用於驗證 JSON 模式\nLivereload 存檔時自動重新整理瀏覽器內的網頁內容\n使用方式 - 進入端口方式 :\nsublime 安裝完成 livereload  後，\n進入要 livereload 的目錄，\n點擊右鍵 Git Base Here > 輸入 live-server ，\n即可進入 local http://127.0.0.1:8080/ 的端口，\nPyV8  是一個 Python 封裝 V8 引擎的殼，提供簡單可用的 API，能夠利用 python 來建構 JavaScript 的運行時環境。\nSublime-HTMLPrettify-master 程式碼快速格式化\nUser 使用者自訂設定\nsublime_marge_build 更好的 Git 操作\n\n參考資料\nSublime Text 網頁勞工常用擴充套件\nhttps://blog.user.today/sublime-text/\n安裝與使用 live server\nhttps://www.youtube.com/watch?v=K-i5jgvmIlo",
    "labelLink": "#sublime - 插件軟體"
  },
  {
    "value": "41.1.4",
    "label": "sublime - 新增片段",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "1.建立程式碼片段\nPreferences>Browse PackAges>User 之下，\n新增一個自訂名稱資料夾 amos 方便管理，\n並且要建立的程式碼片段以 .sublime-snippet 為副檔名\n2.新增一個檔案 base.sublime-snippet \n<snippet>\n  <content><![CDATA[ ....完整原始碼內容.. ]]></content>\n  <tabTrigger>短碼</tabTrigger>\n  <description>註解</description>\n</snippet>\n\n<snippet>\n  <content><![CDATA[<div v-for=\"item in \" :key=\"item.id\">\n\t{{item}}\n</div>]]></content>\n  <tabTrigger>am_vue_vfor</tabTrigger>\n  <description>Vue v-for 的片段</description>\n</snippet>\n3.游標順序的表示法\n使用 $0 表示游標最後的位置，\n$0 $1 $2，表示 tab 順序「$1->$2->$0」\n\n4.輸入特殊字元\n<content><![CDATA[this.\\$emit(\"$1\"$0)]]></content>\n輸入 \"\\\" 屏除掉無法顯示特殊字元\n\n5.編碼規則 : 識別字+分類+名稱\n如以下\namos_cdn_JQ\namos_cdn_cssReset\namos_html_導覽列\namos_css_導覽列\namos_html_分面\n\n參考資料\nsublime text 急速應用教學\nhttps://www.slideshare.net/banPrint/sublime-text-51689543\nSublime Text教學 - 自訂常用的程式片段，只需輸入短碼立即產生完整原始碼\nhttps://www.minwt.com/webdesign-dev/html/17946.html\nSublime Text - 教你如何自訂習慣用的片段，加速程式碼的編寫\nhttp://jsnwork.kiiuo.com/archives/2023/sublime-text-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82%E7%BF%92%E6%85%A3%E7%94%A8%E7%9A%84%E7%89%87%E6%AE%B5%EF%BC%8C%E5%8A%A0%E9%80%9F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84/\n",
    "labelLink": "#sublime - 新增片段"
  },
  {
    "value": "41.1.5",
    "label": "sublime - 自訂片段",
    "image": " ",
    "styleValue": 3,
    "style": "margin-left:2rem;font-style:italic",
    "status": "warning",
    "modify": false,
    "text": "自訂程式碼片段\nFunction\nlog\t              console.log 片段\n\nVue\nam_vue_vfor\t      v-for 片段\nam_vue_Vue.component  Vue.component 片段\nam_vue_emit           $emit 片段",
    "labelLink": "#sublime - 自訂片段"
  },
  {
    "value": "99",
    "label": "目標",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "下一個要學習的項目存放處",
    "labelLink": "#目標"
  },
  {
    "value": "99.1",
    "label": "Vue 3 的新功能 - API",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Vue 3 中那些激動人心的新功能\nhttps://www.infoq.cn/article/VzxPwxX2GpERAJymrN3U",
    "labelLink": "#Vue 3 的新功能 - API"
  },
  {
    "value": "99.2",
    "label": "Vue SSR 指南-Vue SEO",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Vue SSR 指南\nhttps://ssr.vuejs.org/zh/guide/caching.html#%E7%BB%84%E4%BB%B6%E7%BA%A7%E5%88%AB%E7%BC%93%E5%AD%98-component-level-caching\n\n為什麼使用服務器端渲染(SSR)？\n更好的SEO，由於搜索引擎爬蟲抓取工具可以直接查看完全渲染的頁面。",
    "labelLink": "#Vue SSR 指南-Vue SEO"
  },
  {
    "value": "99.3",
    "label": "好看到不行的撥放器 - Vue",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "Mini Music Player - VueJS\nhttps://codepen.io/JavaScriptJunkie/pen/qBWrRyg?editors=1010\n\ntransition-group :name\nsvg",
    "labelLink": "#好看到不行的撥放器 - Vue"
  },
  {
    "value": "99.4",
    "label": "第三方登入 - Google",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "第三方登入 - Google\n使用Google OAuth 2.0 存取Google API\nhttp://blog.kenyang.net/2012/09/15/google-oauth-20-google-ap",
    "labelLink": "#第三方登入 - Google"
  },
  {
    "value": "➤5",
    "label": "循序漸進理解 HTTP Cache 機制 - HTTP",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "循序漸進理解 HTTP Cache 機制 - HTTP\nhttps://blog.techbridge.cc/2017/06/17/cache-introduction/\n\n加入抓取資料的效率",
    "labelLink": "#循序漸進理解 HTTP Cache 機制 - HTTP"
  },
  {
    "value": "99.5",
    "label": "前端卻退師 - alert ",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "前端卻退師 - alert \nhttps://juejin.im/user/57bd1bdfd342d3006bf76a52/posts\n經典文章",
    "labelLink": "#前端卻退師 - alert "
  },
  {
    "value": "99.6",
    "label": "三位數的自動排序 - Array",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "在檔案的 991.html\n\n目標是輸入 12.1.19 三位數，進入自動排序到相對應的位置。",
    "labelLink": "#三位數的自動排序 - Array"
  },
  {
    "value": "100",
    "label": "待處理",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "現在無法理解的項目放在待處理",
    "labelLink": "#待處理"
  },
  {
    "value": "100.1",
    "label": "vuecli 基礎搭建項目",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/660422/#outline__10\n\n1 vue-cli 腳手架生成vue項目\n2 安裝pug\n3 sass 安裝\n4 axios使用\n5 移動端rem適配\n6 全局引入_function.scss\n7 路由懶加載\n8 全局引入reset.css\n9 全局引入toast等ui組件\n10 解決跨域問題\n",
    "labelLink": "#vuecli 基礎搭建項目"
  },
  {
    "value": "100.2",
    "label": "長列表優化 - Vue",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "前端面試題-長列表怎麼優化\nhttps://juejin.im/post/5de31df76fb9a071bb7cab7b",
    "labelLink": "#長列表優化 - Vue"
  },
  {
    "value": "100.3",
    "label": "webpack 自動化導入 Vue 全局組件 - Component",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "webpack 自動化導入 Vue 全局組件\nhttps://juejin.im/post/5dbff37bf265da4cfa7bb756",
    "labelLink": "#webpack 自動化導入 Vue 全局組件 - Component"
  },
  {
    "value": "101",
    "label": "補齊項目  12月底前補齊",
    "image": " ",
    "styleValue": 1,
    "style": "font-weight:bold;margin-left:0",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#補齊項目  12月底前補齊"
  },
  {
    "value": "101.1",
    "label": "HTTP Request RESTful API",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#HTTP Request RESTful API"
  },
  {
    "value": "101.2",
    "label": "Vue 開發 SPA 網頁經驗",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#Vue 開發 SPA 網頁經驗"
  },
  {
    "value": "101.3",
    "label": "串接 Google Login 經驗",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#串接 Google Login 經驗"
  },
  {
    "value": "101.4",
    "label": "串接 FB Login 經驗",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#串接 FB Login 經驗"
  },
  {
    "value": "101.5",
    "label": "使用 Chrome Dev Tools 除錯",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#使用 Chrome Dev Tools 除錯"
  },
  {
    "value": "101.6",
    "label": "使用 Visual Studio Code Debug 功能",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#使用 Visual Studio Code Debug 功能"
  },
  {
    "value": "101.7",
    "label": "使用 Nuxt.js",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#使用 Nuxt.js"
  },
  {
    "value": "101.8",
    "label": "一個 vue.js 的實作項目",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#一個 vue.js 的實作項目"
  },
  {
    "value": "101.9",
    "label": "ES6 觀念",
    "image": " ",
    "styleValue": 2,
    "style": "margin-left:1rem;",
    "status": "warning",
    "modify": false,
    "text": "",
    "labelLink": "#ES6 觀念"
  }]
}