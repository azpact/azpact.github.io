{
  "listOne": [
        {
            "value": "0",
            "label": "總編輯",
            "image": "assets/750x464.jpg",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "本網站為 0 的網站資料。\n\n1 基礎 Html & Css/Scss\n2 Materializ css/js\n3 基礎 JavaScript & jQuery\n4 資料處理\n*5 Vue & JS & JQ 實例\n6 基礎 Vue\n7 Vue 組件庫\n8 Vue Cli 4\n9 Web & Server\n11 D3\n12 UI 介面\n13 Git\n14 Muse-UI\n15 Vuex\n16 Vue Router\n21 Drawer 抽屜\n22 Select 選擇器-下拉選單\n31 疑難與解題?\n41 語法與快捷鍵\n51 專案\n99 分門別類\n101 補齊項目2月底前補齊",
            "labelLink": "#總編輯"
        },
        {
            "value": "0.1",
            "label": "初始樣板-文件版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-style 與 scrip 皆以相對路徑方式連結。\n-相關套件有 normaize.css、element-ui.css、element.js、vue、axios、jquery。",
            "labelLink": "#初始樣板-文件版"
        },
        {
            "value": "0.2",
            "label": "初始樣板-CDN版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-style 與 scrip 皆以 CDN 網路方式連結。\n-相關套件有 normaize.css、element-ui.css、element.js、vue、axios、jquery。\n<link rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\" />\n<link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"\n/>\n<script\n  src=\"https://code.jquery.com/jquery-3.4.1.min.js\"\n  integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.js\"></script>\n<script src=\"https://unpkg.com/element-ui/lib/index.js\"></script>\n\nnormaize.css，現代化 css 樣式初始化\nelement-ui.css，Element UI 的樣式\n\n參考資料\nnormalize\nhttps://github.com/necolas/normalize.css/",
            "labelLink": "#初始樣板-CDN版"
        },
        {
            "value": "0.3",
            "label": "初始樣板-D3版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用 D3 CDN\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.12.0/d3.min.js\"></script>",
            "labelLink": "#初始樣板-D3版"
        },
        {
            "value": "0.4",
            "label": "初始樣板-Prop 版",
            "image": "0.4.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "父子組件傳遞 prop\n\nv-base(:title=\"ms\")\n\nVue.component(\"v-base\", {\n  props: {\n    title: String\n  },\n  data() {\n    return {\n      //\n    };\n  },\n  template: `<div> Base Test... {{title}} </div>`\n});\n\nnew Vue({\n  data: {\n    ms: \"123\"\n  }\n}).$mount(\"#app\");",
            "labelLink": "#初始樣板-Prop 版"
        },
        {
            "value": "0.5",
            "label": "初始樣板-Vue Router版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用 Vue Router CDN\n\n <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n\ndiv\n router-link(to=\"/use/foo\")\n router-link(to=\"/use/bar\")\nrouter-view\n\n// 組件\nconst Foo = { template: \"<div>foo</div>\" };\nconst Bar = { template: \"<div>bar</div>\" };\n// router.js\nconst routes = [\n  { path: \"/use/foo\", component: Foo },\n  { path: \"/use/bar\", component: Bar }\n];\n// main.js\nconst router = new VueRouter({\n  routes\n});\nnew Vue({\n  router,\n  data() {\n    return {\n      ms: \"123\"\n    };\n  }\n}).$mount(\"#app\");",
            "labelLink": "#初始樣板-Vue Router版"
        },
        {
            "value": "0.6",
            "label": "初始化樣板-webpack 版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "透過  babel 來正常使用 import 模組\n<script src=\"https://cdn.jsdelivr.net/npm/gulp-babel@8.0.0/index.js\"></script>",
            "labelLink": "#初始化樣板-webpack 版"
        },
        {
            "value": "0.7",
            "label": "初始化樣板-Materialize 版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-相關套件有 normalize.css、materialize.css、\nmaterialize.js、vue.js、jquery.js\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\" />\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"\n></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n\nnew Vue({\n  data() {\n    return {\n      ms: \"123\",\n    };\n  },\n  mounted() {\n    $(document).ready(function() {\n      // 開始初始化\n    })\n  }\n}).$mount(\"#app\");",
            "labelLink": "#初始化樣板-Materialize 版"
        },
        {
            "value": "0.8",
            "label": "網站建立器",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "修改時間:2020/01/30\n\n初步規劃網站所要的資源\n\n*環境建立\n1-Git 版本管理\n2-專案需要使用那些套件? package.json 套件撰寫\n3-需要使用那些 Webpack Loader? webpack.config.js 撰寫\n\n*構想畫面\n1-專案需要那些功能?\n2-外接的資料是哪種類型?\n3-網站的流程圖?\n\n*繪製樣板\n1-尋找可用的 UI\n2-繪製客製化 UI\n3-編寫 UI 與假資料的互動\n\n*組合樣板/實驗測試\n1-組合 SPA 使用文件\n2-進行組合網頁樣板\n3-進行小規模實驗測試\n\n*線上測試\n1-線上測試流程?",
            "labelLink": "#網站建立器"
        },
        {
            "value": "0.8.1",
            "label": "環境建立",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1-Git 版本管理\n開始使用 git init 進行版本管理\n\n2-專案需要使用那些套件? package.json 套件撰寫\n{\n  \"name\": \"azpactio\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.19.2\",\n    \"core-js\": \"^3.4.4\",\n    \"jquery\": \"^3.4.1\",\n    \"vue\": \"^2.6.10\",\n    \"vue-router\": \"^3.1.3\",\n    \"vuex\": \"^3.1.2\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"^4.1.2\",\n    \"@vue/cli-plugin-eslint\": \"^4.1.0\",\n    \"@vue/cli-plugin-router\": \"^4.1.2\",\n    \"@vue/cli-plugin-vuex\": \"^4.1.0\",\n    \"@vue/cli-service\": \"^4.1.0\",\n    \"@vue/eslint-config-prettier\": \"^5.0.0\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-plugin-prettier\": \"^3.1.1\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"node-sass\": \"^4.12.0\",\n    \"prettier\": \"^1.19.1\",\n    \"sass-loader\": \"^8.0.0\",\n    \"vue-template-compiler\": \"^2.6.10\"\n  }\n}\n3-需要使用那些 Webpack Loader? webpack.config.js 撰寫\nstyle-loader\ncss-loader \nsass-loader\nnode-sass\nfile-loader\nvue-loader \nvue-template-compiler ",
            "labelLink": "#環境建立"
        },
        {
            "value": "0.8.2",
            "label": "構想畫面",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1-專案需要那些功能?\n介面，登入/登出\n資料，GET\n資料，POST\n\n2-外接的資料是哪種類型?\nJSON\nPHP\n\n3-網站的流程圖?\n線上小白板 \nhttps://witeboard.com/c4de75b0-923b-11e9-95a3-730771dfacb3",
            "labelLink": "#構想畫面"
        },
        {
            "value": "0.8.3",
            "label": "繪製樣板",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1-尋找可用的 UI\n2-繪製客製化 UI\n3-編寫 UI 與假資料的互動\n",
            "labelLink": "#繪製樣板"
        },
        {
            "value": "0.8.4",
            "label": "組合樣板/實驗測試",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1-組合 SPA 使用文件\nApp.vue 撰寫\nrouter.js 撰寫\nCSS 撰寫\nSCSS 撰寫\nVuex.Store 撰寫\n\n2-進行組合網頁樣板\n組合與建置每個單頁之間的連結\n\n3-進行小規模實驗測試\n當需要組合技術\n當尚未使用過的技術",
            "labelLink": "#組合樣板/實驗測試"
        },
        {
            "value": "0.8.5",
            "label": "線上測試",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1-線上測試流程?\n串接各網頁需要的API\nwebpack打包文件\n上傳打包文件",
            "labelLink": "#線上測試"
        },
        {
            "value": "0.9",
            "label": "社群",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "網路上社群資源",
            "labelLink": "#社群"
        },
        {
            "value": "0.9.1",
            "label": "Vue 社群網站",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "forum.vuejs\n在上面看別人提出問題與解決問題\nhttps://forum.vuejs.org/c/chinese\n",
            "labelLink": "#Vue 社群網站"
        },
        {
            "value": "0.10",
            "label": "學習資源",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "持續學習與回頭複習",
            "labelLink": "#學習資源"
        },
        {
            "value": "0.10.1",
            "label": "Vue.js",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n[vue 基礎]\n*一下子就搞懂Vue.js在做什麼的範例程式碼\nhttps://dotblogs.com.tw/shadow/2019/01/16/082531\n完整地詳細解說 vue 的相關細節、實際使用範例與vue 使用時機",
            "labelLink": "#Vue.js"
        },
        {
            "value": "0.11",
            "label": "經常使用資源",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "*色碼\nmaterialize Color Palette\nhttps://materializecss.com/color.html\n\n\n*標誌\nmaterialize Icons\nhttps://materializecss.com/icons.html\n\n*線上小白板\nhttps://witeboard.com/c4de75b0-923b-11e9-95a3-730771dfacb3\n\n*線上流程圖\nhttps://www.draw.io/\n你可以很容易的畫出UML、心智圖(Mind Map)、架構圖\ndraw.io 有什麼過人之處嗎？\n1.免費\n2.可以直接儲存在google drive, dropbox...等雲端空間，也可以本地儲存\n3.可以匯入匯出，轉存圖檔、PDF，也支援SVG\n4.支援鍵盤的複製貼上或拖拉，圖片也可以\n5.共同編輯\n6.可輸入中文、客製化風格\n7.元件可群組、快速排版、多選元件設定屬性\n8.多頁籤\n9.內件大量元件、也可以自製元件",
            "labelLink": "#經常使用資源"
        },
        {
            "value": "0.11.1",
            "label": "npm&CDN 資源",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.日期、日曆\nJavascript cllender\nhttps://fullcalendar.io/\n專門處理日期、日曆面板的 外掛，可以用 CDN、npm 安裝\n\n2.input\nVue-multiselect\nhttps://vue-multiselect.js.org/#sub-single-select\n專門處理 input",
            "labelLink": "#npm&CDN 資源"
        },
        {
            "value": "0.11.2",
            "label": "雲端環境",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "JSONBin\n關於 JSONBin?\n透過精心設計的 API，\n讓使用者在處理 Reat、Angular、Vue 等前端框架時，適合模擬請求。\n\n禁用版本控制?\n默認情況下，啟用版本控制。請注意，您無法在沒有密鑰創建的公共記錄上禁用版本控制。\n使用 PUT 去修改JSONBin的資料，因為它會有版本控制，不使用POST去更新\n\n實際操作說明\nhttps://jsonbin.io/api-reference/bins/delete",
            "labelLink": "#雲端環境"
        },
        {
            "value": "0.12",
            "label": "網頁製作流程",
            "image": "0/-.12.png",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "企劃 > 藍圖、示意圖 > 結構規劃、設計            > 製作開發\n                 > 運作方式、動線前後關係的經驗\n                 > 實機測試\n",
            "labelLink": "#網頁製作流程"
        },
        {
            "value": "1",
            "label": "基礎 Html & Css/Scss",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "單純的 Html 語言撰寫",
            "labelLink": "#基礎 Html & Css/Scss"
        },
        {
            "value": "1.1",
            "label": "錨點連結-原型",
            "image": "1/-.1.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-點擊超連結，直接移動到其位置上\n\na(href=\"#link\") //連結\ndiv(id=\"link\") //目的",
            "labelLink": "#錨點連結-原型"
        },
        {
            "value": "1.2",
            "label": "Image 圖片",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "圖片使用 max-width 去讓圖片去融入父層的寬度\n\nimg{\n max-width: 100%;\n height: auto;\n}",
            "labelLink": "#Image 圖片"
        },
        {
            "value": "1.2.1",
            "label": "圖片切版",
            "image": "1/-.2.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "一欄位圖片\n兩欄位圖片\n\nimg {\n  max-width: 100%;\n  height: auto;\n  border: 1px solid #ddd;\n}\n.imgOne,\n.imgTwo {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  box-shadow: 1px 1px 1px 1px rgb(177, 177, 177);\n  margin-bottom: 1rem;\n  transition: all 0.3s;\n}\n.imgTwo img {\n  width: 50%;\n}\n.imgOne:hover,\n.imgTwo:hover {\n  box-shadow: 1px 1px 8px 1px rgb(177, 177, 177);\n}\n\nElRow(type=\"flex\" justify=\"center\")\n ElCol\n  div(class=\"imgOne\")\n   img(src=\"../assets/750x464.jpg\" alt=\"Image One\" title=\"Image One\")\nElRow(type=\"flex\" justify=\"center\")\n ElCol\n  div(class=\"imgTwo\")\n   img(src=\"../assets/750x464.jpg\" alt=\"Image Two\" title=\"Image Two\")",
            "labelLink": "#圖片切版"
        },
        {
            "value": "1.2.2",
            "label": "線上背景去背",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n線上學習操作\nhttp://blog.pulipuli.info/2016/06/pixlr-editor-removing-images-background.html\n\n線上操作去背\nhttps://pixlr.com/editor/",
            "labelLink": "#線上背景去背"
        },
        {
            "value": "1.3",
            "label": "常用 Icon",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用套件或網路資源的網路字型",
            "labelLink": "#常用 Icon"
        },
        {
            "value": "1.3.1",
            "label": "Icon 查詢網站",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "https://materialdesignicons.com/\n\n可以搜尋到各大知名網站所使用的 ICone",
            "labelLink": "#Icon 查詢網站"
        },
        {
            "value": "1.3.2",
            "label": "Element Icon",
            "image": "1/-.3.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Icon 由 Element 提供\n第一行\n<i class=\"el-icon-caret-left\" title=\"Left\"></i>\n<i class=\"el-icon-caret-right\" title=\"Right\"></i>\n<i class=\"el-icon-caret-top\" title=\"Top\"></i>\n<i class=\"el-icon-caret-bottom\" title=\"Down\"></i>\n\n第二行\n<i class=\"el-icon-edit\" title=\"Modify\"></i>\n<i class=\"el-icon-delete\" title=\"Delete\"></i>\n<i class=\"el-icon-setting\" title=\"Setting\"></i>\n\n第三行\n<i class=\"el-icon-user\" title=\"User\"></i>\n<i class=\"el-icon-star-off\" title=\"Star off\"></i>\n<i class=\"el-icon-star-on\" title=\"Star on\"></i>\n\n第四行\n<i class=\"el-icon-phone-outline\" title=\"Phone outline\"></i>\n<i class=\"el-icon-goods\" title=\"Goods\"></i>",
            "labelLink": "#Element Icon"
        },
        {
            "value": "1.3.3",
            "label": "網站加入 icon ",
            "image": "1/-.1.3.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "於網站 head 裡放入以下程式碼，為網站加入 icon\n建議使用 .ico 檔案，ico 在瀏覽器的支援度更廣。\n\n<head>\n<link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" / >\n</head>\n\n參考資料\n線上轉檔\nPNG 轉 ICO 檔案\nhttps://www.aconvert.com/tw/icon/png-to-ico/\nJPG  轉 ICO 檔案\nhttps://www.aconvert.com/tw/icon/jpg-to-ico/",
            "labelLink": "#網站加入 icon "
        },
        {
            "value": "1.3.4 ",
            "label": "線上製作字型 icon",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "線上自己選擇字型字體、顏色、陰影等樣式，並製作成圖片(jpg)下載下來使用。\n\n\n參考資料\ncooltext\nhttps://cooltext.com/",
            "labelLink": "#線上製作字型 icon"
        },
        {
            "value": "1.4",
            "label": "Input 輸入",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "讓使用者從 input 元素輸入資料",
            "labelLink": "#Input 輸入"
        },
        {
            "value": "1.4.1",
            "label": "常用的屬性",
            "image": "1/-.4.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "p 預設字樣: placeholder\ninput(type=\"text\" placeholder=\"12\")\n\np 限制輸入長度: maxlength\ninput(type=\"text\" maxlength=\"2\")\n\np 遮蔽輸入框: disabled=\"disabled\"\ninput(type=\"text\" disabled=\"disabled\")\n\n參考資料\ninput禁止輸入的方法\nhttps://blog.csdn.net/diwuyanting/article/details/78589766",
            "labelLink": "#常用的屬性"
        },
        {
            "value": "1.5",
            "label": "Css 常用樣式",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "常用的樣式\n\n*a \n去除底線: text-decoration: none\n",
            "labelLink": "#Css 常用樣式"
        },
        {
            "value": "1.5.1",
            "label": "網站初始樣式",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "@charset \"UTF-8\";\n\nbody {\n  overflow-x: hidden;\n}\na{\n  text-decoration: none;\n  color:black\n}\nli {\n  display: flex;\n  height: 1rem;\n  height: 1rem;\n}",
            "labelLink": "#網站初始樣式"
        },
        {
            "value": "1.5.2",
            "label": "修改滾動條樣式 - scrollbar",
            "image": "1/-.5.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "/* 修改滾動條寬高級背景 */\n::-webkit-scrollbar {\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #e5ebe7;\n}\n/* 修改滾動條裡面的小方塊樣式 */\n::-webkit-scrollbar-thumb {\n  border-radius: 100px;\n  background: rgb(45, 45, 45);\n}\n\n參考資料\n用css美化默認的滾動條樣式，用這個屬性就夠了\nhttps://kknews.cc/zh-tw/code/9z59q2j.html",
            "labelLink": "#修改滾動條樣式 - scrollbar"
        },
        {
            "value": "1.5.3",
            "label": "自適應網頁設計 - @media",
            "image": "1/-.5.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n// 瀏覽螢幕小於 900 像素\n@media only screen and (min-width: 900px) {\n  body {\n    background-color: rgb(255, 221, 159);\n  }\n}\n// 瀏覽螢幕在 741 至 899 之間像素\n@media only screen and (min-width: 741px) and (max-width: 899px) {\n  body {\n    background-color: rgb(141, 117, 192);\n  }\n}\n// 瀏覽螢幕大於 740 像素\n@media only screen and (max-width: 740px) {\n  body {\n    background-color: rgb(129, 207, 152);\n  }\n}",
            "labelLink": "#自適應網頁設計 - @media"
        },
        {
            "value": "1.5.4",
            "label": "search bar",
            "image": "1/-.5.4.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "搜尋 bar\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\" />\n  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js\"></script>\n\n  [v-cloak] {\n  display: none;\n}\n* {\n  margin: 0;\n  padding: 0;\n}\n.bar{\n  display: flex;\n  font: 15px/1.3 'Open Sans', sans-serif;\n  box-shadow: 0 2px 8px #c4c4c4 inset;\n  border-radius: 20px;\n}\n.bar i{\n  height: 1rem;\n  line-height: 3.4rem;\n  text-indent: 1rem;\n}\ninput[type=\"text\"]:not(.browser-default){\n  padding-top: 0.2rem;\n  width: 90%;\n} /* 設定點擊時的樣式 */\n.bar input {\n  color: #738289;\n  font-size: 14px;\n  font-weight: bold;\n  outline: none;\n  border: none;\n  border-bottom: none !important;\n  text-indent: 0.5rem;\n  font-family: inherit;\n}\n\n<div class=\"bar\">\n  <i class=\"material-icons\">search</i>\n  <input type=\"text\" placeholder=\"輸入搜尋內容\" />\n</div>",
            "labelLink": "#search bar"
        },
        {
            "value": "1.6",
            "label": "排版",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "CSS 針對排版的相關資料",
            "labelLink": "#排版"
        },
        {
            "value": "1.6.1",
            "label": "快速排版",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".flex {\n  display: flex;\n}\n.flex-warp {\n  display: flex;\n  flex-wrap: wrap;\n}\n.ju-end {\n  justify-content: flex-end;\n}\n.ju-center {\n  justify-content: center;\n}\n.width-full {\n  width: 100%;\n}",
            "labelLink": "#快速排版"
        },
        {
            "value": "1.6.2",
            "label": "Flex 對齊",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "display:flex 的對齊屬性\n\njustify-content: flex-start; 水平向左對齊\njustify-content: center;     水平向中對齊\njustify-content: flex-end;   水平向右對齊\n\nalign-items:start;  垂直向上對齊\nalign-items:center; 垂直中間對齊\nalign-items:end;    垂直向下對齊",
            "labelLink": "#Flex 對齊"
        },
        {
            "value": "1.7",
            "label": "邊框",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "邊框設定\n\na {\n  color:$color3;\n  text-decoration: none;\n}\na:hover {\n  padding-bottom:0.25rem; //空白距離\n  border-bottom-style:dotted; //底部虛線\n  border-bottom-color:$color3; //底部顏色\n  /*\n  border-top-style:solid; //頂部實線\n  */\n}\n\n參考資料\nCSS Border 邊框\nhttps://www.1keydata.com/css-tutorial/tw/border.php",
            "labelLink": "#邊框"
        },
        {
            "value": "1.8",
            "label": "動畫",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用滑鼠標觸發事件",
            "labelLink": "#動畫"
        },
        {
            "value": "1.8.1",
            "label": "圖片上顯示文字-Hover",
            "image": "1/-.8.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "滑鼠標移動到圖片上，同時顯示文字\n\nopacity  隱藏與顯示區塊\n.box 主要區塊\nimg 要對齊 mouseStatus 的位置\n.mouseStatus 隱藏狀態\n\n*文字的顯示與隱藏\n.mouseStatus {\n  opacity: 0;\n  color: #fff;\n  background-color: rgb(39, 39, 39);\n  position: relative;\n  top: -191px;\n  left: 0px;\n  width: 100%;\n  display: inline-block;\n  height: 186px;\n  margin-bottom: -262px;\n  text-align: left;\n}\n.box:hover .mouseStatus {\n  animation-delay: 1s;\n  animation: block 0.6s forwards;\n  transition: all 1.6s;\n}\n\n*box 的處理\n.box {\n  text-align: center;\n  width: 100%;\n  max-width: 300px;\n  box-shadow: 1px 1px 1px 1px rgb(177, 177, 177);\n  margin-bottom: 1rem;\n  transition: all 0.3s;\n}\n.box:hover {\n  box-shadow: 1px 1px 8px 1px rgb(177, 177, 177);\n}\n\n@keyframes block {\n from {\n   opacity: 0;\n }\n to {\n   opacity: 0.8;\n }\n}",
            "labelLink": "#圖片上顯示文字-Hover"
        },
        {
            "value": "1.8.2",
            "label": "transform 旋轉",
            "image": "1/-.8.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "transform: rotate(360deg) 原地旋轉 360 度\ntransform: scaleX(2) 水平縮放\ntransform: scaleY(2) 垂直縮放\ntransform: scale(2,2) 水平垂直縮放\ntransform: translateX(20px) 水平移動\ntransform: translateY(10px) 垂直移動\ntransform: translate(20px,10px) 水平垂直移動\ntransform-origin:top left 60px; \n左上角為旋轉圓點並傾斜60px",
            "labelLink": "#transform 旋轉"
        },
        {
            "value": "1.8.3",
            "label": "cursor 屬性",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n.Style{\n cursor: pointer;  //滑鼠移動到上面鼠標變成手指\n}",
            "labelLink": "#cursor 屬性"
        },
        {
            "value": "1.9",
            "label": "Vuetify",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Vuetify 相關使用",
            "labelLink": "#Vuetify"
        },
        {
            "value": "1.9.1",
            "label": "toolbar",
            "image": "1/-.1.9.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 toolbar 製作 top 導覽列\n\n參考資料\nVuetify-toolbar\nhttps://codepen.io/azpact/pen/zVNRBp",
            "labelLink": "#toolbar"
        },
        {
            "value": "1.10",
            "label": "SCSS",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "use scss",
            "labelLink": "#SCSS"
        },
        {
            "value": "1.10.1",
            "label": "使用變數",
            "image": "1/-.10.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "$red:#891; //定義變數\ndiv{\n  color:$red; //使用變數\n}\n\n<div>codeing<div>\n\n\n",
            "labelLink": "#使用變數"
        },
        {
            "value": "1.10.2",
            "label": "使用巢狀",
            "image": "1/-.10.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".markdown-body{\n  p{\n    color:blue;\n    &:hover{     //& 代表自己這個元素\n      color:red;\n    }\n  }\n  &>div:nth-of-type(1){\n    color:orange;\n  }\n}\n\n<div class=\"markdown-body\">\n  <p>codeing</p>\n  <div>write one</div>\n  <div>write two</div>\n</div>\n\n",
            "labelLink": "#使用巢狀"
        },
        {
            "value": "1.10.3",
            "label": "Mixins/Include 混合與使用",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div>\n  <h1>codeing</h1>\n</div>\n\n@mixin heading-font {\n font-family: sans-serif;\n font-weight: bold;\n}\n\nh1 {\n @include heading-font;\n}",
            "labelLink": "#Mixins/Include 混合與使用"
        },
        {
            "value": "1.10.4",
            "label": "Extend 套用樣式",
            "image": "1/-.10.4.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".button{\n  border:none;\n  padding:1rem 2rem;\n}\n\n.aStyle{\n  @extend .button;\n  background-color:yellow;\n}\n\n<button class=\"button\">按鈕樣式</button>\n<div class=\"aStyle\">\n  coding...\n</div>\n\n\n\n參考資料\nSCSS-extend\nhttps://codepen.io/azpact/pen/RzNmRe",
            "labelLink": "#Extend 套用樣式"
        },
        {
            "value": "1.10.5",
            "label": "@include-font-size",
            "image": "1/-.10.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "帶入字型大小參數。\n\n@mixin font-size-rem($n){\n  font-size:$n * 1rem;\n}\n\n.aStyle{\n  @include font-size-rem(2);\n}\n.bStyle{\n  @include font-size-rem(3);\n}\n\n<div class=\"aStyle\">\n  codeing1\n</div>\n<div class=\"bStyle\">\n  codeing2\n</div>\n\n參考資料\nSCSS-mixins font-size\nhttps://codepen.io/azpact/pen/xobevd",
            "labelLink": "#@include-font-size"
        },
        {
            "value": "1.10.6",
            "label": "@include-flex",
            "image": "1/-.10.6.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "@mixin flex-left{\n  display:flex;\n  justify-content:flex-start;\n  flex-wrap: wrap;\n}\n@mixin flex-center{\n  display:flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n@mixin flex-right{\n  display:flex;\n  justify-content:flex-end;\n  flex-wrap: wrap;\n}\n\nsection{\n  margin:1rem;\n}\n.aStyle{\n  @include flex-left;\n  background-color:yellow;\n}\n.bStyle{\n  @include flex-center;\n  background-color:rgb(139, 139, 216); \n}\n.cStyle{\n  @include flex-right;\n  background-color: aquamarine;\n}\n\n參考資料\nSCSS-mixins flex\nhttps://codepen.io/azpact/pen/dBPraG",
            "labelLink": "#@include-flex"
        },
        {
            "value": "1.11",
            "label": "ul & li",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "ul 與 li 的設定。",
            "labelLink": "#ul & li"
        },
        {
            "value": "1.11.1",
            "label": "li 樣式設定",
            "image": "1/-.11.1.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "設定 li 樣式\n\nli{\n list-style-type: disc; //圓實心\n list-style-type: circle; //圓空心\n list-style-type: square; //正方形\n}",
            "labelLink": "#li 樣式設定"
        },
        {
            "value": "1.12",
            "label": "box-sizing",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "box-sizing",
            "labelLink": "#box-sizing"
        },
        {
            "value": "1.12.1",
            "label": "邊框向內縮",
            "image": "1/-.12.1.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".example {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n參考資料\nbox-sizing\nhttps://developer.mozilla.org/zh-TW/docs/Web/CSS/box-sizing\n\n導覽列設計\n* html #menu ul {\n    /* 解決IE6不理overflow問題，直接指定高度 */\n    height: 30px;\n  }\n  /* 解決IE6條列式餘白問題*/\n  * html #menu ul li {\n    display: inline;\n  }\n  /* 修正IE7絕對定位差異 */\n  *:first-child+html #menu ul li ul {\n    margin-top: 0;\n  }\n  /* 修正IE6絕對定位差異 */\n  * html #menu ul li ul {\n    margin-top: 0;\n  }\n  /* 修正IE7絕對定位差異 */\n  *:first-child+html #menu ul li ul li ul {\n    margin-top: -30px;\n  }\n  /* 以上基礎設定 */\n\n#menu a {\n    height: 1rem;\n    line-height: 1.8rem;\n    color: #FFF;\n    text-decoration: none;\n    transition: 0.3s background-color,color;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n\n  #menu a:hover {\n    border: 2px solid #693;\n    color: #693;\n    background-color: #FFF;\n    ;\n  }\n\n  #menu ul li {\n    /* 利用float讓第一層li水平排列 */\n    float: left;\n  }\n\n  #menu ul li a {\n    /* 將a改為區塊元件，以便指定寬高 */\n    display: block;\n    /* 這邊也要設float，否則IE6會以100%寬度顯示 */\n    float: left;\n    /* 固定高度 */\n    height: 30px;\n    width: 100px;\n    text-align: center;\n  }\n\n  #menu ul li ul {\n    /* 讓第二層ul跳脫文件流以利定位 */\n    position: absolute;\n    /* 固定寬度 */\n    width: 100px;\n    /* 避免出現捲軸 */\n    overflow: visible;\n    /* 讓ul與母階層li相同位置 */\n    clear: left;\n    margin-top: 30px;\n    margin-right: 0;\n    margin-bottom: 0;\n    margin-left: 0;\n  }\n\n  #menu ul li ul li {\n    /* 覆寫繼承自第一層的浮動設定 */\n    float: none;\n    text-align: center;\n  }\n\n  #menu ul li ul li a {\n    /* 覆寫繼承自第一層的浮動設定 */\n    float: none;\n    width: 100%;\n    /* 註：display、height、padding繼承第一層的設定 */\n  }\n\n  #menu ul li ul li ul {\n    margin-top: -30px;\n    margin-right: 0;\n    margin-bottom: 0;\n    margin-left: 100px;\n    width: 100%;\n  }\n\n  /* ---------- 隱藏與顯示階層 ---------- */\n  #menu ul li ul {\n    /* 預先隱藏第二層 */\n    visibility: hidden;\n  }\n\n  #menu ul li:hover ul {\n    /* 觸動第一層時，顯示第二層 */\n    visibility: visible;\n  }\n\n  #menu ul li:hover ul li ul {\n    /* 顯示第二層時，隱藏第三層，避免同時彈出 */\n    visibility: hidden;\n  }\n\n  #menu ul li ul li:hover ul {\n    /* 觸動第二層時，顯示第三層 */\n    visibility: visible;\n  }\n\n  #menu ul li ul li:hover ul li ul {\n    /* 顯示第三層時，隱藏第四層，避免同時彈出 */\n    visibility: hidden;\n  }\n\n  #menu ul li ul li ul li:hover ul {\n    /* 觸動第三層時，顯示第四層 */\n    visibility: visible;\n  }",
            "labelLink": "#邊框向內縮"
        },
        {
            "value": "1.13",
            "label": "colors",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "蒐集好看的色塊",
            "labelLink": "#colors"
        },
        {
            "value": "1.13.1",
            "label": "彩虹色",
            "image": "1/-.13.1.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "彩色色塊\ncolro: rgb(211, 66, 66);\ncolro: rgb(211, 95, 66);\ncolro: rgb(211, 148, 66);\ncolro: rgb(143, 211, 66);\ncolro: rgb(66, 211, 167);\ncolro: rgb(66, 134, 211);\ncolro: rgb(117, 66, 211);\ncolro: rgb(211, 66, 114);",
            "labelLink": "#彩虹色"
        },
        {
            "value": "2",
            "label": "Materialize css/js",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "官方網站\n\nhttps://materializecss.com/color.html",
            "labelLink": "#Materialize css/js"
        },
        {
            "value": "2.1",
            "label": "CSS",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "css 樣式",
            "labelLink": "#CSS"
        },
        {
            "value": "2.1.1",
            "label": "文字及背景顏色",
            "image": "2/-.1.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*標籤與樣式\n<h4 class=\"blue-text\">color</h4>\n<!-- 字體顏色 -->\n<h4 class=\"blue-text text-lighten-5\">color</h4>\n<!-- 字體調整亮度 -->\n\n<h4 class=\"blue white-text\">color</h4>\n<!--背景顏色-->\n<h4 class=\"blue lighten-3\">color</h4>\n<!--背景調整亮度-->\n\n*SCSS\n\n.ilike-blue-container {\n @extend .blue, .lighten-4; /*背景顏色*/\n}\n\n .ilike-blue-container {\n  @extend .blue-text, .text-lighten-4; /*字體顏色*/\n}",
            "labelLink": "#文字及背景顏色"
        },
        {
            "value": "2.1.2",
            "label": "Icon 標誌",
            "image": "2/-.1.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "material-icons 增加標誌樣式\n\n<i class=\"material-icons\"> add_circle",
            "labelLink": "#Icon 標誌"
        },
        {
            "value": "2.1.3",
            "label": "Icon 大小",
            "image": "2/-.1.3.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "tiny 特小\nsmall 小\nmedium 中\nlarge 大\n\ni(class=\"tiny material-icons\") add\n\n",
            "labelLink": "#Icon 大小"
        },
        {
            "value": "2.2",
            "label": "Grid 網格",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "共分為12個網格\n\n響應式網格的樣式前綴\nclass-prefix (s = small, m = medium, l = large) \ndiv(class=\"col s6\")\ndiv(class=\"col m6\")\ndiv(class=\"col l6\")",
            "labelLink": "#Grid 網格"
        },
        {
            "value": "2.2.1",
            "label": "Container 容器",
            "image": "2/-.2.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "container 頁面置中並保留 70% 的寬度\n\n<div class=\"container\">內容</div>\n<!-- 頁面置中並保留 70% 的寬度 -->",
            "labelLink": "#Container 容器"
        },
        {
            "value": "2.2.2",
            "label": "Columns 列",
            "image": "2/-.2.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "水平共分12列\n\n<div class=\"row\">\n  <div class=\"col s12\">12</div> <!-- 水平12格 -->\n  <div class=\"col s6\">6</div> <!-- 水平6格 -->\n  <div class=\"col s6\">6</div>  <!-- 水平6格 -->\n</div>",
            "labelLink": "#Columns 列"
        },
        {
            "value": "2.2.3",
            "label": "Offsets 偏移值",
            "image": "2/-.2.3.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "偏移植是使用 margin\noffset-s6 水平6格並偏移6格\n\n\n<div class=\"row\">\n  <div class=\"col s12\">12</div> \n  <!-- 水平12格 -->\n\n  <div class=\"col s6 offset-s6\">6</div> \n  <!-- 水平6格並偏移6格 -->\n</div>",
            "labelLink": "#Offsets 偏移值"
        },
        {
            "value": "2.2.4",
            "label": "Push & Pull 調整元素順序",
            "image": "2/-.2.4.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "push-s5 內容向後推5格\npull-s7 內容向前推7格\n\n<div class=\"row\">\n  <div class=\"col s7\">s7</div>\n  <div class=\"col s5\">s5</div>\n</div>\n<div class=\"row\">\n  <div class=\"col s7 push-s5\">s7 的內容向後推5格</div>\n  <div class=\"col s5 pull-s7\">s5 的內容向前推7格</div>\n</div>",
            "labelLink": "#Push & Pull 調整元素順序"
        },
        {
            "value": "2.2.5",
            "label": "Screen Sizes 螢幕的大小",
            "image": "2/-.2.5.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "            手機螢幕    筆電螢幕 桌電螢幕   大螢幕\n             <=600px  >600px  >992px   >1200px\nclass       .s        .m      .l       .xl\nprefix\n\ncontainer   90%       85%     70%      70%\nwidth \n\n<div class=\"row\">\n  <div class=\"col s12\">12</div>\n  <div class=\"col s12 m6\">s12 / m6</div>\n</div>",
            "labelLink": "#Screen Sizes 螢幕的大小"
        },
        {
            "value": "2.3",
            "label": "Helpers 幫手",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "幫助樣式上面的設定",
            "labelLink": "#Helpers 幫手"
        },
        {
            "value": "2.3.1",
            "label": "元素內容垂直置中",
            "image": "2/-.3.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "valign-wrapper 垂直置中內容\n\n<div class=\"valign-wrapper\">\n  <div>被重垂直置中的內容</div>\n</div>",
            "labelLink": "#元素內容垂直置中"
        },
        {
            "value": "2.3.2",
            "label": "文字置中",
            "image": "2/-.3.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "left-align   文字靠左\nright-align  文字靠右\ncenter-align 文字靠中\n\n<div class=\"row\">\n  <div class=\"col s12 left-align\">12</div>\n  <!-- 文字靠左 -->\n  <div class=\"col s12 right-align\">12</div>\n  <!-- 文字靠右 -->\n  <div class=\"col s12 center-align\">12</div>\n  <!-- 文字靠中 -->\n</div>",
            "labelLink": "#文字置中"
        },
        {
            "value": "2.3.3",
            "label": "元素浮動對齊",
            "image": "2/-.3.3.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "left  左浮動\nright 右浮動\n\n<div class=\"left\">...左浮動對齊</div>\n<div class=\"right\">...右浮動對齊</div>",
            "labelLink": "#元素浮動對齊"
        },
        {
            "value": "2.3.4",
            "label": "特定螢幕尺寸隱藏",
            "image": "2/-.3.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "class                    screen range\n.hide                    對所有設備隱藏\n.hide-on-small-only      針對手機隱藏\n.hide-on-med-only        針對筆電隱藏\n.hide-on-med-and-down    筆電及以下版本隱藏(常用)\n.hide-on-med-and-up      筆電及以上版本隱藏(常用)\n.hide-on-large-only      針對桌電設備隱藏\n\n\n.show-on-small           針對手機設備顯示\n.show-on-medium          針對筆電設備顯示\n.show-on-large           針對桌電設備顯示\n.show-on-medium-and-up   顯示筆電及以上版本\n.show-on-medium-and-down 顯示筆電及以下版本\n\n<style>\n#app div {\n  background-color: rgb(255, 221, 159);\n}\n@media only screen and (max-width: 600px) {\n  #app div {\n    background-color: #ff80ab\n  }\n}\n</style>\n\n<div class=\"hide-on-med-and-up\">\n手機顯示</div>\n<div class=\"hide-on-med-and-down show-on-medium\">\n筆電、桌電顯示</div>\n",
            "labelLink": "#特定螢幕尺寸隱藏"
        },
        {
            "value": "2.3.5",
            "label": "文字內容截斷",
            "image": "2/-.3.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "truncate 截斷文字\n\n<div>This is an extremely long title</div>\n\n<div class=\"truncate\">\nThis is an extremely long title\n</div>\n<!-- 將超出固定寬度元素的文字內容截斷-->",
            "labelLink": "#文字內容截斷"
        },
        {
            "value": "2.4",
            "label": "Image-圖片",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "針對圖片設定樣式",
            "labelLink": "#Image-圖片"
        },
        {
            "value": "2.4.1",
            "label": "響應式圖片",
            "image": "2/-.4.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "圖片樣式為 max-width:100% height:auto\n\nresponsive-img 響應式圖片\n\n<img class=\"responsive-img\" src=\"../image/photo.jpg\" alt=\"\">",
            "labelLink": "#響應式圖片"
        },
        {
            "value": "2.4.2",
            "label": "圓形圖片",
            "image": "2/-.4.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "circle 圓形圖片\n\n<img class=\"circle responsive-img\" src=\"../image/photo.jpg\" alt=\"\">",
            "labelLink": "#圓形圖片"
        },
        {
            "value": "2.5",
            "label": "Pulse 脈衝",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "針對按鈕所做的特效",
            "labelLink": "#Pulse 脈衝"
        },
        {
            "value": "2.5.1",
            "label": "按鈕脈衝",
            "image": "2/-.5.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "限制於浮動的按鈕上\n\npulse 脈衝\nbtn-floating 浮動按鈕\nmaterial-icons 使用 icon\n\n<a class=\"btn-floating pulse\">\n  <i class=\"material-icons\">menu</i>\n</a>\n<a class=\"btn-floating btn-large pulse\">\n  <i class=\"material-icons\">cloud</i>\n</a>\n<a class=\"btn-floating btn-large cyan pulse\">\n  <i class=\"material-icons\">edit</i>\n</a>",
            "labelLink": "#按鈕脈衝"
        },
        {
            "value": "2.6",
            "label": "Shadow 陰影",
            "image": "2/-.6.png",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "透過 class=\"z-depth-2\" 增加陰影\n或透過擴增 @extend .z-depth-2\n陰影從0到5\n\nz-depth-2 增加陰影 2\n\n<div class=\"z-depth-2\">\n  shadow 2\n</div>\n<div class=\"z-depth-5\">\n  shadow 5\n</div>",
            "labelLink": "#Shadow 陰影"
        },
        {
            "value": "2.7",
            "label": "Transition 過渡動畫",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "scale-transition 增加過度動畫，預設 scale-in \nscale-out 出場動畫\nscale-in 進場動畫\n\na(class=\"btn-floating scale-transition\")\n 進場動畫\n i(class=\"material-icons\") add  \n\na(class=\"btn-floating scale-transition scale-out\")\n 過度動畫\n i(class=\"material-icons\") add\n\n參考資料\nhttps://materializecss.com/css-transitions.html",
            "labelLink": "#Transition 過渡動畫"
        },
        {
            "value": "2.8",
            "label": "Typography 樣板",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "針對文字所做的樣板",
            "labelLink": "#Typography 樣板"
        },
        {
            "value": "2.8.1",
            "label": "調整浮動文字",
            "image": "2/-.8.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "讓文字內容隨著元素大小變動\nflow-text 浮動文字\n\n<p class=\"flow-text\">One common flaw we've seen in many frameworks is a lack of support for truly responsive text. While elements on the page resize fluidly, text still resizes on a fixed basis. To ameliorate this problem, for text heavy pages, we've created a class that fluidly scales text size and line-height to optimize readability for the user. Line length stays between 45-80 characters and line height scales to be larger on smaller screens.</p>",
            "labelLink": "#調整浮動文字"
        },
        {
            "value": "2.9",
            "label": "Bages 徽章",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "徽章可以通知您有新的或未讀的消息或通知。將新類添加到徽章以為其提供背景。",
            "labelLink": "#Bages 徽章"
        },
        {
            "value": "2.9.1",
            "label": "一組相似資料加上徽章",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "類似一整組的東西加上徽章\n\ncollection 增加館藏\ncollection-item 館藏東西\nnew 增加 new 文字在徽章內\nbadge 增加徽章\n\n<div class=\"collection\">\n  <a href=\"#!\" class=\"collection-item\">alen\n   <span class=\"badge\">1</span>\n </a>\n  <a href=\"#!\" class=\"collection-item\">alen\n   <span class=\"new badge\">4</span>\n </a>\n</div>",
            "labelLink": "#一組相似資料加上徽章"
        },
        {
            "value": "3",
            "label": "基礎 JavaScript & JQuery",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "最基礎的 JavaScript\n最基礎的 JQuery",
            "labelLink": "#基礎 JavaScript & JQuery"
        },
        {
            "value": "3.1",
            "label": "事前準備 - JS&JQ",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "撰寫於文件最前頭\n\n// JavaScript\n\"use strict\";\nwindow.onload = function(event) {\n  // coding..\n};\n\n// JQuery\n$(document).ready(function() {\n  // coding..\n});",
            "labelLink": "#事前準備 - JS&JQ"
        },
        {
            "value": "3.2",
            "label": "觸發事件",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "DOM 觸發事件\n\n\nVue\n@mouseover\n@mouseleave",
            "labelLink": "#觸發事件"
        },
        {
            "value": "3.2.1",
            "label": "Click 事件",
            "image": "3/-.2.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "button(id=\"btn\") JavaScript 觸發事件\nbutton(id=\"btnTwo\") JQuery 觸發事件\n\n// JavaScript\n\"use strict\";\nwindow.onload = function(event) {\n  let eId = document.getElementById(\"btn\");\n  function add() {\n    console.log(\"JavaScript 觸發事件\");\n  }\n  eId.addEventListener(\"click\", add);\n};\n// JQuery\n$(document).ready(function() {\n  let eId = $(\"#btnTwo\");\n  function addFunction() {\n    console.log(\"JQuery 觸發事件\");\n  }\n  eId.click(addFunction);\n});",
            "labelLink": "#Click 事件"
        },
        {
            "value": "3.2.2",
            "label": "onkeydown、onkeypress、onkeyup 事件",
            "image": "3/-.2.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "div JavaScript 觸發事件輸入: \n input(type=\"text\" id=\"input\")\ndiv 以 JQuery 觸發事件輸入: \n input(type=\"text\" id=\"inputTwo\")\n\n// JavaScript 觸發事件\nlet eId = document.getElementById(\"input\");\neId.onkeypress = function() {\n  console.log(\"keypress\");\n};\neId.onkeyup = function() {\n  console.log(\"keyup\");\n};\neId.onkeydown = function() {\n  console.log(\"keydown\");\n};\n// JQuery 觸發事件\nlet eIdTwo = $(\"#inputTwo\");\neIdTwo.keypress(e => {\n  console.log(\"keypress\");\n});\neIdTwo.keyup(e => {\n  console.log(\"keyup\");\n});\neIdTwo.keydown(e => {\n  console.log(\"keydown\");\n});",
            "labelLink": "#onkeydown、onkeypress、onkeyup 事件"
        },
        {
            "value": "3.2.3",
            "label": "Hover 事件",
            "image": "3/-.2.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "div(id=\"divOne\") Hover區塊\ndiv(id=\"divTwo\") 閃爍區域\n\n// JQuery 觸發事件\nlet eId = $(\"#divOne\");\nlet eIdTwo = $(\"#divTwo\");\n\neId.hover(\n  function() {\n    $(this).append($(\"<span>***</span>\"));\n  },\n  function() {\n    $(this)\n      .find(\"span:last\")\n      .remove();\n  }\n);\neIdTwo.hover(function() {\n  $(this).fadeOut(100);\n  $(this).fadeIn(500);\n});",
            "labelLink": "#Hover 事件"
        },
        {
            "value": "3.2.4",
            "label": "jQuery-事件處理-all",
            "image": "3/-.2.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "所有的事件處理\n\n<div>\n  <h2>鍵盤事件</h2>\n  <h3>以JavaScript 撰寫</h3>\n  <input type=\"text\" id=\"text\" />\n  <h3>以 JQuery 撰寫</h3>\n  <input type=\"text\" id=\"t1\" />\n</div>\n<div>\n  <h2>點擊事件</h2>\n  <input type=\"button\" id=\"t2\" value=\"\n按鈕\" />\n  <span id=\"t3\"></span>\n</div>\n<div>\n  <h2>鼠標事件</h2>\n</div>\n<div>\n  <h2>Hover事件</h2>\n  <ul>\n    <li class=\"fade\">11</li>\n    <li class=\"fade\">22</li>\n  </ul>\n</div>\n\n//鍵盤事件\ndocument.getElementById('text')\n.onkeypress = function() {\n  console.log('keypress')\n}\ndocument.getElementById('text')\n.onkeyup = function() {\n  console.log('keyup')\n}\ndocument.getElementById('text')\n.onkeydown = function() {\n  console.log('keydown')\n}\nconst t1 = $('#t1')\nconst t2 = $('#t2')\nconst t3 = $('#t3')\nt1.keypress(e => {\n  console.log('keypress')\n})\nt1.keyup(e => {\n  console.log('keyup')\n})\nt1.keydown(e => {\n  console.log('keydown')\n})\n//點擊事件\nt2.click(function() {\n  t3.text('觸發 click 事件')\n})\n//Hover事件\n$('li').hover(\n  function() {\n    $(this).append($('<span> ***</span>'))\n  },\n  function() {\n    $(this)\n      .find('span:last')\n      .remove()\n  }\n)\n$('li.fade').hover(function() {\n  $(this).fadeOut(100)\n  $(this).fadeIn(500)\n})\n\n參考資料\njQuery-事件處理\nhttps://codepen.io/azpact/pen/GLMOMg",
            "labelLink": "#jQuery-事件處理-all"
        },
        {
            "value": "3.3",
            "label": "陣列處理函數",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "專門處理陣列的函數",
            "labelLink": "#陣列處理函數"
        },
        {
            "value": "3.3.1",
            "label": "移除重複值 -  new Set()",
            "image": "3/-.3.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "... 拷貝數據\nnew Set() 儲存任何類型的唯一值\n\n\np 原始資料: {{arr}}\np 移除重複數值: {{arrTwo}}\n\ndata() {\n  return {\n    arr: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, \"a\", \"c\", \n\"a\"]\n  };\n},\ncomputed: {\n  arrTwo: function() {\n    return [...new Set(this.arr)];\n  }\n}",
            "labelLink": "#移除重複值 -  new Set()"
        },
        {
            "value": "3.3.2",
            "label": "指定淺拷貝 - slice()",
            "image": "3/-.3.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".slice(begin, end) 淺拷貝資料\n\np 原始陣列{{list}}\np 指定陣列 2 到 3 {{sliceList}}\n\ndata() {\n  return {\n    list: [\"ant\", \"bison\", \"camel\", \"duck\", \n\"elephant\"]\n  };\n},\ncomputed: {\n  sliceList: function() {\n    return this.list.slice(2, 4);\n    //實際淺拷貝出 index 2 到 3\n  }\n}",
            "labelLink": "#指定淺拷貝 - slice()"
        },
        {
            "value": "3.3.3",
            "label": "陣列處理函數 - all",
            "image": "3/-.3.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "針對陣列處理的所有函數\n\n.push()\n.pop()\n.shift()\n.unshift()\n.splice()\n.reverse()\n.sort()\n\n參考資料\nJS-陣列處理\nhttps://codepen.io/azpact/pen/OYBGbr",
            "labelLink": "#陣列處理函數 - all"
        },
        {
            "value": "3.4",
            "label": "物件屬性函數",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "專門處理物件函數",
            "labelLink": "#物件屬性函數"
        },
        {
            "value": "3.4.1",
            "label": "是否有屬性名 - hasOwnProperty()",
            "image": "3/-.4.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".hasOwnProperty() 判別物件內是否有其屬性名稱\n\ndiv 當前物件 let obj = { name: \"tips\" }\ndiv 確認物件中是否有\n input(type=\"text\" v-model=\"inputData\") 屬性\ndiv {{check}}\n\ndata() {\n  return {\n    ms: \"123\",\n    inputData: \"\"\n  };\n},\ncomputed: {\n  check: function() {\n    let obj = {\n      name: \"tips\"\n    };\n    return obj.hasOwnProperty(this.inputData);\n  }\n}\n\n參考資料\n檢查屬性是否存在物件內\nhttps://www.jstips.co/zh_tw/javascript/check-if-a-property-is-in-a-object/",
            "labelLink": "#是否有屬性名 - hasOwnProperty()"
        },
        {
            "value": "3.5",
            "label": "Classes 類別",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "ES6 引用 class 作為 JavaScript 現有原型程式繼承的語法糖\n\n參考資料\nJavaScript | ES6 中最容易誤會的語法糖 Class - 基本用法\nhttps://medium.com/enjoy-life-enjoy-coding/javascript-es6-%E4%B8%AD%E6%9C%80%E5%AE%B9%E6%98%93%E8%AA%A4%E6%9C%83%E7%9A%84%E8%AA%9E%E6%B3%95%E7%B3%96-class-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-23e4a4a5e8ed",
            "labelLink": "#Classes 類別"
        },
        {
            "value": "3.5.1",
            "label": "建構子 - Constructor",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "此 function 為建構子\n\nfunction Person(name) {\n  // public properties\n  this.name = name;\n\n  // private value\n  const state = \"Taiwan\";\n\n  // privileged methods\n  this.getFrom = () => `${this.name} from ${state}\n`;\n}\n\nconst letName = new Person(\"Ben\");\nthis.messageOne = letName; //{ \"name\": \"Ben\" }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.getFrom(); //Ben from Taiwan\n",
            "labelLink": "#建構子 - Constructor"
        },
        {
            "value": "3.5.2",
            "label": "建構子 ES6 - Constructor",
            "image": "3/-.5.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "此 class 為建構子( Constructor )、letName 為實例( Instance )\n\n透過 new 呼叫時傳入的參數會由 Class 內的 constructor 給接收，\n並在同一區塊建立 Public Properties ，\n而 Method 的部分則是在 constructor 外做描述或存取資料，\nPrivate Value 就存放在 Method 中，依然無法從 Instance 中取得。\n\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n\nconst letName = new Person(\"Ben\");\nthis.messageOne = letName; //{ \"name\": \"Ben\" }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.getFrom(); //Ben from \nTaiwan",
            "labelLink": "#建構子 ES6 - Constructor"
        },
        {
            "value": "3.5.3",
            "label": "繼承 - Inheritance",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "此 function Person 為原始函數\n此 function Age 為 繼承函數\n\nfunction Person(name) {\n  // public properties\n  this.name = name;\n\n  // private value\n  const state = \"Taiwan\";\n\n  // privileged methods\n  this.getFrom = () => `${this.name} from ${state}`;\n}\n\nfunction Age(name, age) {\n  // 將 this 送給 Person 建立 properties\n  Person.call(this, name);\n  this.age = age;\n\n  // public properties\n  this.Age = () => `${this.name} is ${this.age} yearold`;\n}\n\nconst letName = new Age(\"Ben\", 23);\nthis.messageOne = letName; //{ \"name\": \"Ben\", \"age\": 23 }\nthis.messageTwo = letName.state; //undefined\nthis.messageThree = letName.Age(); //Ben is 23 yearold",
            "labelLink": "#繼承 - Inheritance"
        },
        {
            "value": "3.5.4",
            "label": "繼承 ES6 - Inheritance",
            "image": "3/-.5.4.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 extends 指定 parent class\n使用 super 呼叫 extends 指定的 class\n\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n// 使用 extends 指定 parent class\nclass Age extends Person {\n  constructor(name, age) {\n    // 用 super 呼叫 extends 指定的 class\n    super(name);\n    this.age = age;\n  }\n  getAge() {\n    return `${this.name} is ${this.age} yearold`;\n  }\n}\nconst showAge = new Age(\"Ben\", 25);\n\nthis.messageOne = showAge; //{ \"name\": \"Ben\" }\nthis.messageTwo = showAge.state; //undefined\nthis.messageThree = showAge.getAge(); //Ben from Taiwan",
            "labelLink": "#繼承 ES6 - Inheritance"
        },
        {
            "value": "3.5.5",
            "label": "靜態的 - static",
            "image": "3/-.5.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 stctic 指定此函數或變數僅由 建構子Constructor 所建立\n無法透過 實例Instance 來建立\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  static getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}`;\n  }\n}\n\nconst letname = new Person(\"Ben\");\n\n// this.messageOne = letname.getFrom();\n// 此函數無法建立\nthis.messageTwo = Person.getFrom(); //Person from Taiwan\n\n\n範例:\n使用制定好的變數與值\n\nclass Human {\n  constructor() {}\n  static ping() {\n    return 'ping';\n  }\n}\n\nclass Computer extends Human {\n  constructor() {}\n  static pingpong() {\n    return super.ping() + ' pong'; //用 super 調用父類的靜態方法\n  }\n}\nlet el = Computer.pingpong(); // 'ping pong'\nconsole.log(el)\n\n參考資料\nJS-class static super\nhttps://codepen.io/azpact/pen/ydNmex\n",
            "labelLink": "#靜態的 - static"
        },
        {
            "value": "3.5.6",
            "label": "靜態的- static function",
            "image": "3/-.5.6.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用制定好的函數\n\nclass Triple {\n  static triple(n) {\n    n = n || 1; //should not be a bitwise operation \n    return n * 3;\n  }\n}\n\nclass BiggerTriple extends Triple {\n  static triple(n) {\n    return super.triple(n) * super.triple(n);\n  }\n}\n\nconsole.log(Triple.triple());        // 3\nconsole.log(Triple.triple(6));       // 18\nconsole.log(BiggerTriple.triple(3)); // 81\nvar tp = new Triple();\nconsole.log(tp.triple());  // 'tp.triple is not a function'.\n\n參考資料\nJS-class static function\nhttps://codepen.io/azpact/pen/QXjLGe",
            "labelLink": "#靜態的- static function"
        },
        {
            "value": "3.5.7",
            "label": "取得與設定 -Getter&Setter",
            "image": "3/-.5.7.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "前綴詞其實不只有 static ，連存取器的 get 及 set 也可以在 Class 中作定義\n\n經常用於不想 Instance 直接存取的狀況，所以利用 Getter 和 Setter \n來假裝操作 Properties ，\n在設定及取值時都先經過一些邏輯判斷再決定怎麼處理。\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  static sayHello(name) {\n    return `Hi!${name}!`;\n  }\n\n  get age() {\n    if (this._age !== undefined) {\n      return `${this.name} age is ${this._age}.`;\n    }\n    return `Don't know ${this.name}'s age.`;\n  }\n\n  set age(age) {\n    this._age = age;\n  }\n\n  getFrom() {\n    const state = \"Taiwan\";\n    return `${this.name} from ${state}.`;\n  }\n}\n\nconst letName = new Person(\"Ben\");\n\nthis.messageOne = letName; //{ \"name\": \"Ben\", \"_age\": 19 }\nthis.messageTwo = letName.age; //Don't know Ben's age.\nletName.age = 19;\nthis.messageThree = letName.age; //Ben age is 19.",
            "labelLink": "#取得與設定 -Getter&Setter"
        },
        {
            "value": "3.6",
            "label": "時間函數",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "設定時間的 JavaScript 函數",
            "labelLink": "#時間函數"
        },
        {
            "value": "3.6.1",
            "label": "設定時間執行 - setTimeout",
            "image": "3/-.6.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "mounted() {\n  $(document).ready(function() {\n    setTimeout(() => {\n      console.log(\"自動 log\");\n    }, 3000);\n    function add() {\n      console.log(\"點擊 log\");\n    }\n    $(\"button\").click(add);\n  });\n}\n\n參考資料\n1.JS-promise & setTimeout\nhttps://codepen.io/azpact/pen/zXQgZK\n\n2.JS-setTimeout\n設定時間，執行 function\nhttps://codepen.io/azpact/pen/eogYzN",
            "labelLink": "#設定時間執行 - setTimeout"
        },
        {
            "value": "3.7",
            "label": "import",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "首先 JavaScript modules 需要一台伺服器，以便能夠導入進行獲取，\n可以安裝並使用 live-server，npm install -g live-server\n\n參考資料\n瀏覽器中加載模塊type=\"module\"使用import、export \nhttps://www.ucamc.com/e-learning/javascript/382-%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8A%A0%E8%BC%89%E6%A8%A1%E5%A1%8Amodules%E4%BD%BF%E7%94%A8import%E3%80%81export\n",
            "labelLink": "#import"
        },
        {
            "value": "3.7.1",
            "label": "引用一個 import",
            "image": "3/-.7.1/-.7.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "一個 js 引用另一個 js 內的程式碼，最後被 html 引用，\n記得 html 使用 script 引用時，要寫上 type=\"module\"\n\n//目錄結構\ntest.js\nindex.js\nindex.html\n\n//test.js\nexport default{\n  name:'test',\n  getAge:function(){\n    return 22;\n   }\n}\n\n//index.js\nimport test from \"./test.js\"\nconsole.log(test.getAge());\n\n//index.html\n<script src=\"./index.js\" type=\"module\"></script>\n<p>123</p>",
            "labelLink": "#引用一個 import"
        },
        {
            "value": "3.7.2",
            "label": "vue 引用一個 import",
            "image": "3/-.7.2/-.7.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "import 進來到 app.js 的資料，使用 vue 呈現到畫面上\n\n//目錄結構\ntest.js\napp.js\nindex.html\n\n//test.js\nexport default{\n  name:'test',\n  getAge:function(){\n    return 22;\n   }\n}\n\n//app.js\nimport test from \"./test.js\"\n\nnew Vue({\n  data() {\n    return {\n      ms: \"123\"\n    };\n  },\n  methods: {\n    async fTrigger(){\n      this.ms = test.getAge()\n    }\n  },\n  mounted() {\n    this.fTrigger()\n  }\n}).$mount(\"#app\");\n\n//index.html\n<script src=\"./app.js\" type=\"module\"></script>\n<div id=\"app\">\n  <p>...{{ms}}</p>\n</div>",
            "labelLink": "#vue 引用一個 import"
        },
        {
            "value": "3.8",
            "label": "ES6 功能",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "ES6 新增的功能",
            "labelLink": "#ES6 功能"
        },
        {
            "value": "3.8.1",
            "label": "repeat()-重複輸出字串",
            "image": "3/-.8.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "repeat() 重複輸出字串\n\nlet text1 = 'hello'.repeat(3)\nconsole.log(text1)\n\n\"hellohellohello\"\n\nJS-repeat()\nhttps://codepen.io/azpact/pen/ZdGzda",
            "labelLink": "#repeat()-重複輸出字串"
        },
        {
            "value": "3.9",
            "label": "Promise",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "執行非同步的資料。",
            "labelLink": "#Promise"
        },
        {
            "value": "3.9.1",
            "label": "建立 promise",
            "image": "3/-.9.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "變數去除存 Promise 回來的資料。\n\nconst myFirstPromise = new Promise((resolve, reject) => {\n  setTimeout(function() {\n    resolve('success..!')\n    reject('failure reason') //1-1-2\n  }, 2500)\n})\n\nmyFirstPromise.then(seccessMessage => {\n  console.log(`Yay! ${seccessMessage}`)\n})\n\n參考資料\nJS-promise\nhttps://codepen.io/azpact/pen/WWPxGV",
            "labelLink": "#建立 promise"
        },
        {
            "value": "3.10",
            "label": "立即執行函數",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "$() =>{ ... }(); //立即執行函數",
            "labelLink": "#立即執行函數"
        },
        {
            "value": "3.10.1",
            "label": "計數器-立即執行",
            "image": "3/-.10.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "$() =>{ ... }(); //立即執行函數\n\n<button id=\"b1\">+1 按鈕</button>\n<div id=\"t1\">..</div>\n<button id=\"b2\">+1 按鈕</button>\n<div id=\"t2\">..</div>\n\nfunction counter() {\n  let counter = 1\n  return function() {\n    return counter++\n  }\n}\n\n$(() => {\n  const ob1 = $('#b1')\n  const ob2 = $('#b2')\n  const ot1 = $('#t1')\n  const ot2 = $('#t2')\n  let counter1 = counter()\n  let counter2 = counter()\n  $('#b1').click(() => {\n    $('#t1').text(`我被點擊了：${counter1()}次`)\n  })\n  $('#b2').click(() => {\n    $('#t2').text(`我被點擊了：${counter2()}次`)\n  })\n})\n\nJS-click 立即執行函數\nhttps://codepen.io/azpact/pen/ROgeeX",
            "labelLink": "#計數器-立即執行"
        },
        {
            "value": "3.11",
            "label": "閉包",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "閉包一種函數的寫法",
            "labelLink": "#閉包"
        },
        {
            "value": "3.11.1",
            "label": "加法器-閉包",
            "image": "3/-.11.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用閉包的方式撰寫，減少重複撰寫加法的程式碼\n\nconst:\nO.將加法值記錄下來 addRule\nO.將計算值記錄下來 add\nO.將加法器記錄下來 addCount\nO.加法器\n    let addCount = adder(addRule)\n    console.log(addRule(add))\n    \nfunction:\nadder()，閉包函式，加法器用\nadd()，執行加法器\n\nfunction adder(x) {\n  return function(y) {\n    return Number(x) + Number(y)\n  }\n}\n\n參考資料\n加法器-閉包\nhttps://codepen.io/azpact/pen/XQgPEd",
            "labelLink": "#加法器-閉包"
        },
        {
            "value": "3.12",
            "label": "時間函數",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "date()",
            "labelLink": "#時間函數"
        },
        {
            "value": "3.12.1",
            "label": "使用 Date() ",
            "image": "3/-.12.1.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "new Date(); //獲得當前系統日期\n\n\n參考資料\nJS 中 Data() 用法及日期計算方式\nhttps://blog.csdn.net/mafan121/article/details/52062675",
            "labelLink": "#使用 Date() "
        },
        {
            "value": "4",
            "label": "資料處理",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "vue 與 function 的資料處理。",
            "labelLink": "#資料處理"
        },
        {
            "value": "4.1",
            "label": "Array & Object & JSON",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Array 處理  \nlet listOne = [\n  { value: \"1\", label: \"標\" },\n  { value: \"1.2\", label: \"標\" },\n  { value: \"1.6\", label: \"標\" }\n];\n\nObject 處理\nlet person = {\n  firsrname: \"PJ\",\n  lastname: \"CHENDer\",\n  adderss: {\n    contry: \"TAIWAN\",\n    city: \"Taipei\",\n    locate: \"101\"\n  }\n};\n\nJSON 處理\nlet JSONData =\n'{\n  \"firsrname\": \"PJ\",\n  \"lastname\": \"CHENDer\",\n  \"adderss\": {\n    \"contryv\": \"TAIWAN\",\n    \"city\": \"Taipei\",\n    \"locate\": \"101\"\n  }\n}';",
            "labelLink": "#Array & Object & JSON"
        },
        {
            "value": "4.1.1",
            "label": "新增自動排序(2階)-Array",
            "image": "4/-.1.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n自動排序兩位數(如:1.2)\n\nfAdd() 新增與排序資料\n|- 輸入資料，獲得一個陣列\n|- 計算原始資料(陣列長度)，獲得原始陣列長度\n|- 輸入資料與原始資料對比，獲得即將插入位置的 index\n|- 將一筆輸入資料插入原始資料中\n|- 插入自動排序原始資料\n\n//排序資料 function，放在 script 中，不放在 new Vue 內\nfunction compareValue(a, b) {\n  // a 舊\n  // b 新\n  if (Number(a.value) < Number(b.value)) return -1;\n  return 0;\n}",
            "labelLink": "#新增自動排序(2階)-Array"
        },
        {
            "value": "4.1.2",
            "label": "新增自動排序(3階)-Array",
            "image": "4/-.1.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "// s0 原始資料 [{ value:\"12.1.6\"},{value:\"13.2.5\"}...]\n// s1 瀏覽器新增一筆物件到原始資料末 \n//    this.rows = {value:\"12.1.6\"}\n// s2 新增屬性與分割儲存 \n//    { value:\"12.1.6\",LvOne:\"12\",LvTwo:\"1\",Three:\"6\"} \n// s3 排序 LvOne \n//    if LvOne(a,b) a 與 b 相同時\n// s4 排序 LvTwo [僅限排序 LvOne 相同的物件做排序]\n//    if LvTwo(a,b) a 與 b 相同時\n// s5 排序 LvThree\n// s6 刪除屬性 LvOne、LvTwo、LvThree 只有 value 屬性 {value:\"\"}\n// s7 畫面更新\n\n參考資料\nvue 陣列修改不觸發視圖更新、vue 響應式對象添加或刪除\nhttps://blog.csdn.net/zhouzuoluo/article/details/84633340\nMDN - Array.prototype.sort()\nhttps://developer.mozilla.org/zh-TW/docs/Web/JavaScript/\nReference/Global_Objects/Array/sort",
            "labelLink": "#新增自動排序(3階)-Array"
        },
        {
            "value": "4.1.3",
            "label": "格式間轉換 - Object&JSON",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*將 Object 轉成 JSON 格式\n\nmounted() {\n  let person = {\n    firsrname: \"PJ\",\n    lastname: \"CHENDer\",\n    adderss: {\n      contry: \"TAIWAN\",\n      city: \"Taipei\",\n      locate: \"101\"\n    }\n  };\n  console.log(JSON.stringify(person));\n}\n\n*將 JSON 格式轉成 Object\n\nmounted() {\nlet JSONData =\n  '{\"firsrname\": \"PJ\",\"lastname\": \"CHENDer\",\"adderss\": {\"contryv\":\"TAIWAN\",\"city\": \"Taipei\",\"locate\": \"101\"}}';\nconsole.log(JSON.parse(JSONData));\n}\n\n參考資料\n[筆記] JavaScript中物件(object)和JSON格式的轉換\nhttps://pjchender.blogspot.com/2016/01/javascriptobjectjson.html",
            "labelLink": "#格式間轉換 - Object&JSON"
        },
        {
            "value": "4.1.4",
            "label": "新增到陣列尾 - Array",
            "image": "4/-.1.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "label 新增\ninput(type=\"text\" v-model=\"addText\")\nbutton(@click=\"fAddText\") 送出\ndiv(v-for=\"item in listOne\") {{item.label}}\n\n\ndata: {\n  addText: '',\n  rows: [],\n  listOne: []\n},\nmethods: {\n  fAddText() {\n    let vm = this\n    vm.rows = {\n      label: this.addText\n    }\n    vm.listOne.unshift(vm.rows)\n  }\n}",
            "labelLink": "#新增到陣列尾 - Array"
        },
        {
            "value": "4.1.5",
            "label": "JSON 轉檔成 CSV 並下載",
            "image": "4/-.1.5.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "conver()，JSON 格式轉 CSV 格式\nconverAndExport()，編輯輸出檔案的格式\nexport()，輸出檔案為 csv 檔案\n\n關鍵字\n*指定某些 JSON 關鍵字轉出為 CSV\nconver(){\n...\nif(heading == 'label' || heading == 'value' || heading == 'text'){\n            convertedjson += \"\\\"\";\n            convertedjson += (entry[heading] || \"\");\n            convertedjson += \"\\\"\";\n            convertedjson += \",\";\n...\n//\n}\n\n*關於 CSV 格式\ncsv 格式可以是: 1997,Ford,E350\n如果欄位包含被嵌入的逗號，必須被包裹: 1997,Ford,E350,\"Super, luxurious truck\"\n\n*JS-Object.keys\n方法會回傳一個指定物件的屬性名稱(key)\n\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\n*JS-for...in\n輸出的是屬性名稱 (key)\nlet iterable = [3, 5, 7];\n\n// 回傳「key」\nfor (let i in iterable) {\n  console.log(i); // \"0\", \"1\", \"2\"\n}\n\nfor(let index in array[i]) \n*JS- for...of\n輸出的是值 (value)\n\nlet iterable = [3, 5, 7];\n\n// 回傳「value」\nfor (let i of iterable) {\n  console.log(i); // 3, 5, 7\n}\n\n參考資料\n這支程式主要參考- javascript converter to CSV\nhttps://mike2014mike.github.io/javascript/2018/07/19/javascript-json-to-csv-and-download/\n逗號分隔值\nhttps://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC\nObject.keys()\nhttps://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nJS-for...in 與 for...of 的差別\nhttps://kanboo.github.io/2018/01/30/JS-for-of-forin/",
            "labelLink": "#JSON 轉檔成 CSV 並下載"
        },
        {
            "value": "4.2",
            "label": "Index",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Vue 使用 Array 的 index 做操作",
            "labelLink": "#Index"
        },
        {
            "value": "4.2.1",
            "label": "上下排序 - splice()",
            "image": "4/-.2.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "fspliceTop() 目標向上排位順序\nfspliceDown() 目標向下排位順序\n\nul(v-for=\"(item,index) in listOne\" :key=\"item.id\")\n li\n  span {{item.label}}\n  div\n   i(@click=\"fspliceTop(index)\" \n     class=\"el-icon-caret-top\"\n     title=\"Top\")\n   i(@click=\"fspliceDown(index)\"\n     class=\"el-icon-caret-bottom\"\n     title=\"Down\")\n\nlet listOne = [\n  { label: \"你好\" },\n  { label: \"大家好\" },\n  { label: \"昨日安好\" }\n];\n\ndata: {\n  listOne: listOne\n},\nmethods: {\n  fspliceTop(index) {\n    let p = this.listOne;\n    let i = index;\n    if (i > 0) {\n      //限制 i 操作 1\n      p.splice(i - 1, 0, p[i]); //新增一個新的\n      p.splice(i + 1, 1); // 刪除原本的\n    }\n  },\n  fspliceDown(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i + 2, 0, p[i]);\n    p.splice(i, 1);\n  }\n}",
            "labelLink": "#上下排序 - splice()"
        },
        {
            "value": "4.2.2",
            "label": "上下左右刪除 - splice()",
            "image": "4/-.2.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "showIndex() 單一顯示隱藏其他功能區\nfAllFeatures() 全部顯示隱藏功能區\nfModify() 項目修改\nfLeft() 項目向左\nfRight() 項目向右\nfspliceTop() 項目向上\nfspliceDown() 項目向下\n\n\ndata: {\n  listOne: listOne,\n  listLight: [\n    { class: \"el-icon-warning\", check: \"warning\" },\n    { class: \"el-icon-success\", check: \"success\" }\n  ]\n},\nmethods: {\n  showIndex(index) {\n    let p = this.listOne;\n    let i = index;\n    this.index = i;\n    p[i].features = !p[i].features;\n  },\n  fAllFeatures(val) {\n    if (val === 0) {\n      this.listOne.forEach(e => {\n        e.features = false;\n        e.modify = false;\n      });\n    } else {\n      this.listOne.forEach(e => {\n        e.features = true;\n      });\n    }\n  },\n  fModify(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].modify = !p[i].modify;\n  },\n  fLeft(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].style = \"font-weight:bold;margin-left:0\";\n  },\n  fRight(index) {\n    let p = this.listOne;\n    let i = index;\n    p[i].style = \"margin-left:2rem\";\n  },\n  fspliceTop(index) {\n    let p = this.listOne;\n    let i = index;\n    if (i > 0) {\n      //限制 i 操作 1\n      p.splice(i - 1, 0, p[i]); //新增一個新的\n      p.splice(i + 1, 1); // 刪除原本的\n    }\n  },\n  fspliceDown(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i + 2, 0, p[i]);\n    p.splice(i, 1);\n  },\n  fDelete(index) {\n    let p = this.listOne;\n    let i = index;\n    p.splice(i, 1);\n  }\n}\n",
            "labelLink": "#上下左右刪除 - splice()"
        },
        {
            "value": "4.3",
            "label": "GET & POST",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Ajax、Axios、Promise\n\n測試用網址:\nhttps://api.jsonbin.io/b/5df85634bda54254c5edebc8\n\n使用 JsonBin:\n*Headers\nsecret-key:\"\",\nContent-Type:\"application/json\"\nversioning:\"false\"\n\n*API\n{\n \"data\": {\n   \"listOne\": [\n    {\n     \"value\": \"1.1\",\n     \"label\": \"Tone\"\n    },\n    {\n     \"value\": \"1.1\",\n     \"label\": \"Tone\"\n    }\n   ]\n }\n}\n\n*儲存空間:JSONBin、GitHub\n*伺服器:Wampserver\n*目錄伺服器:http-server",
            "labelLink": "#GET & POST"
        },
        {
            "value": "4.3.1",
            "label": "GET&POST (JQuery) - Ajax",
            "image": "4/-.3.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "url 網址\nmethod 方式\nheaders 表頭\n\ndiv\n button(id=\"getButton\") 取得\n ul\n  li \n  li \n\n$(\"#getButton\").click(fGet);\n\nfunction fGet() {\n $.ajax({\n  url: \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n  method: \"GET\",\n  headers: {\n    \"secret-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    versioning: false\n  },\n  success: function(e) {\n    console.log(\"成功\");\n    $(\"li:nth-of-type(1)\").append(function() {\n      `<li>${$(this).text(e.label)}</li>`;\n    });\n    $(\"li:nth-of-type(2)\").append(function() {\n      `<li>${$(this).text(e.value)}</li>`;\n    });\n  },\n  error: function() {\n    console.log(\"失敗\");\n  }\n });\n}\n\n// POST，尚未完整測試\n$.ajax({\n    url: \"turnpage.php\",\n    method: \"POST\",\n    data: {\n        \"name\": name,\n        \"phone\": phone\n    },\n    error:function(){\n        alert(\"失敗\");\n    },\n    success:function(){\n        alert(\"成功\");\n    } \n});",
            "labelLink": "#GET&POST (JQuery) - Ajax"
        },
        {
            "value": "4.3.2",
            "label": "GET&POST (Vue) - Ajax",
            "image": "4/-.3.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "button(@click=\"fGet()) 取得\ndiv(v-for=\"item in listOne\" :key=\"item.id\")\n {{item.label}} / {{item.value}}\n\ndata() {\n  return {\n    listOne: []\n  };\n},\nmethods: {\n  fGet() {}\n},\nmounted() {\n  this.fGet = function fGet() {\n    var settings = {\n      async: true, //非同步\n      crossDomain: true, //跨網域\n      url: \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n      method: \"GET\",\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/\nfEQFGSdjmIfKOqonOJci\",\n        \"Content-Type\": \"application/json\",\n        versioning: \"false\",\n        Accept: \"*/*\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    };\n    $.ajax(settings).done(res => (this.listOne = res.listOne));\n  };\n}\n\n參考資料\najax 寫回資料庫\nhttps://ithelp.ithome.com.tw/questions/10188277",
            "labelLink": "#GET&POST (Vue) - Ajax"
        },
        {
            "value": "4.3.3",
            "label": "GET&POST - Axios",
            "image": "4/-.3.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\n//GET\nfGet() {\n  axios\n    .get(\n      \"https://raw.githubusercontent.com/donma/\nTaiwanAddressCityAreaRoadChineseEnglishJSON/\nmaster/AllData.json\"\n    )\n    .then(response => (this.listOne = \nresponse.data))\n    .catch(function(error) {\n      // 請求處理失敗\n      console.log(error);\n    });\n}\n\n//POST，尚未測試\nmounted () {\n  axios\n  .post('https://www.runoob.com/try/ajax/demo_axios_post.php')\n  .then(response => (this.info = response))\n  .catch(function (error) { // 請求處理失敗\n    console.log(error);\n  });\n}\n\n完整範例參考\nVue.js Ajax(axios)\nhttps://www.runoob.com/vue2/vuejs-ajax-axios.html",
            "labelLink": "#GET&POST - Axios"
        },
        {
            "value": "4.3.4",
            "label": "GET&POST (async) - Axios",
            "image": "4/-.3.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.原始 axios 撰寫方式\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n  .catch(error => console.log(error))\n\n2.Vue 的 methods 中撰寫 axios 的 GET & POST\n\n// GET\nasync fetchList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci6\" //最後減少六\n      }\n    });\n    const get = await instance.get(\n      \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\"\n    );\n    const { data } = get; //資料在 data 屬性\n    this.listOne = data.listOne; //將GET的資料放到Vue上的groupList陣列中\n  } catch (error) {\n    throw new Error(error);\n  }\n},\n\n// PUT\nasync putList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\":\n          \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci6\", //最後減少六\n        \"Content-Type\": \"application/json\",\n        versioning: false\n      }\n    });\n    let data = this.listOne;\n    const put = await instance.put(\n      \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\",\n      { listOne: data }\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n},\nfAddData() {\n  let vm = this;\n  vm.rows = {\n    value: this.inputOne,\n    label: this.inputTwo\n  };\n  vm.listOne.push(this.rows);\n}\n\n參考資料\n使用 axios 訪問 API\nhttps://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html",
            "labelLink": "#GET&POST (async) - Axios"
        },
        {
            "value": "4.3.5",
            "label": "GET&POST (API) - Promise",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "button(@click=\"fetchList()\") GET\ndiv v-for=\"item in listOne\" :key=\"item.id\">{{item}}\n\n\ndata: {\n  listOne: []\n},\nmethods: {\n  fetchList() {},\n  putLsit() {}\n},\nmounted() {\n  this.fetchList = async function fetchList() {\n    try {\n      const setUrl =\n        \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\";\n      const setKey = \"\";\n      const setTimeOut = 6000;\n      const instance = axios.create({\n        timeout: setTimeOut,\n        headers: {\n          // \"secret-key\": setKey\n        }\n        // 要注意 API 是否需要 headers 內的屬性\n      });\n      // Base Set\n      const get = await instance.get(setUrl);\n      // Get Data\n      const { data } = get;\n      this.listOne = data.listOne;\n      // Out Put Data\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n  this.putList = async function putList() {\n    try {\n      const setUrl = \"\";\n      const setKey = \"\";\n      const setTimeOut = 6000;\n      const instance = axios.create({\n        timeout: setTimeOut,\n        headers: {\n          \"Content-Type\": \"application/json\"\n          // \"secret-key\": setKey,\n          // versioning: false\n        }\n        // 要注意 API 是否需要 headers 內的屬性\n      });\n      let data = this.listOne;\n      const put = await instance.put(setUrl, { listOne: data });\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n}",
            "labelLink": "#GET&POST (API) - Promise"
        },
        {
            "value": "4.3.6",
            "label": "GET&POST (APIs) - Promise",
            "image": "4/-.3.6.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "同時接收兩個 API\n\n<button @click=\"getData()\">同時抓取兩個來源資料</button>\n<button @click=\"feachAll()\">feachAll</button>\n<pre>\n  {{html}}\n</pre>\n<div v-for=\"item in listTwo\" :key=\"item.id\">\n  {{item}}\n</div>\n<div v-for=\"item in listThree\" :key=\"item.id\">\n  {{item.CityName}} {{item.CityEngName}}\n</div>\n\ndata: {\n  html: \"資料下載中...\",\n  listOne: [],\n  listTwo: [],\n  listThree: []\n},\nmethods: {\n  getData() {},\n  async feachAll() {\n    try {\n      const instance = axios.create({\n        timeout: 6000\n      });\n      const getOne = await instance.get(\n        \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\");\n      const getTwo = await instance.get(\n        \"https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\");\n      // let { data } = getOne; //資料在 data 屬性\n      this.listTwo = getOne.data.listOne; //將GET的資料放到Vue上的groupList陣列中\n      this.listThree = getTwo.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n},\nmounted() {\n  this.getData = async function getData() {\n    const dataListOne = await axios.get(\n      \"https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\");\n    const dataListTwo = axios.get(\n      \"https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\");\n    const [dataOne, dataTwo] = await Promise.all([\n      dataListOne,\n      dataListTwo\n    ]);\n    this.html = `\n          API 來源一: ${dataOne.data.listOne[0].label}\n          API 來源二 ${dataTwo.data[0].CityName}\n          兩個 API 都下載完成時才顯示\n         `;\n  };\n}",
            "labelLink": "#GET&POST (APIs) - Promise"
        },
        {
            "value": "4.3.7",
            "label": "GET - JSONP",
            "image": "4/-.3.7.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "利用 script src=\"\" 取得資料\n<script src=\"https://api.twitch.tv/kraken/games/top?client_id=xxx&callback=receiveData&limit=1\"></script>\n<script>\n  function receiveData (response) {\n    console.log(response);\n  }\n</script>\n\n利用 JSPNP，可以存取來源的資料。但 JSONP 的缺點就是你要帶的那些參數永遠都只能附加在網址上的方式(GET)帶過去，沒辦法用 POST。\n如果能用 CORS 的話，還是優先考慮 CORS。\n\n\n\n//此範例以 JavaScript 撰寫\n//引用的 JavaScript 必須在文件最後面\n\n//dataCode.js\ngetData({\n  meals: [\n    {\n      main: \"漢堡\",\n      beverage: \"可樂\",\n      price: \"51100\",\n      pic: \"https://api.fnkr.net/testimg/50x50/a00/FFF/?text=A\"\n    },\n    {\n      main: \"炸雞\",\n      beverage: \"雪碧\",\n      price: \"400\",\n      pic: \"https://api.fnkr.net/testimg/50x50/0a0/FFF/?text=B\"\n    },\n    {\n      main: \"吐司\",\n      beverage: \"紅茶\",\n      price: \"300\",\n      pic: \"https://api.fnkr.net/testimg/50x50/00a/FFF/?text=C\"\n    }\n  ]\n});\n",
            "labelLink": "#GET - JSONP"
        },
        {
            "value": "4.3.8",
            "label": "GET - JSONP - 引用 js",
            "image": "4/-.3.8/-.3.8.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "美女牆\n\n使用 script 引用 js 檔案。\n\n//index.html\n<script src=\"main.js\"></script>\n\ndata(){\n return{\n    litOne:\"\"\n  }\n},\nmounted(){\n  this.listOne = results\n}\n\n//main.js\nlet list =[\n  {\n      \"value\": \"0\",\n      \"label\": \"總編輯\",\n      \"image\": \"assets/750x464.jpg\",\n      \"styleValue\": 1,\n      \"style\": \"font-weight:bold;margin-left:0\",\n      \"status\": \"warning\",\n      \"modify\": false,\n      \"text\": \"本網站為 0 的網站資料。\\n\\n1 基礎 Html & Css/Scss\\n2 Materializ css/js\\n3 基礎 JavaScript & jQuery\\n4 資料處理\\n*5 Vue & JS & JQ 實例\\n6 基礎 Vue\\n7 Vue 組件庫\\n8 Vue Cli 4\\n9 Web & Server\\n11 D3\\n12 UI 介面\\n13 Git\\n14 Muse-UI\\n15 Vuex\\n21 Drawer 抽屜\\n22 Select 選擇器-下拉選單\\n31 疑難與解題?\\n41 語法與快捷鍵\\n51 專案\\n99 分門別類\\n101 補齊項目2月底前補齊\",\n      \"labelLink\": \"#總編輯\"\n    },\n    {\n      \"value\": \"0.1\",\n      \"label\": \"初始樣板-文件版\",\n      \"image\": \" \",\n      \"styleValue\": 2,\n      \"style\": \"margin-left:1rem;\",\n      \"status\": \"warning\",\n      \"modify\": false,\n      \"text\": \"-style 與 scrip 皆以相對路徑方式連結。\\n-相關套件有 normaize.css、element-ui.css、element.js、vue、axios、jquery。\",\n      \"labelLink\": \"#初始樣板-文件版\"\n    }\n]",
            "labelLink": "#GET - JSONP - 引用 js"
        },
        {
            "value": "4.4",
            "label": "本地測試",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "本地端做 JSON GET & POST 測試",
            "labelLink": "#本地測試"
        },
        {
            "value": "4.4.1",
            "label": "http-server 目錄伺服器",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*安裝\n$ npm install http-server -g\n$ http-server\n\n//Hit CTRL-C to stop the server\n// 在當前目錄下的 cmd 中輸入 http-server，此時此目錄即成為伺服器目錄\n\n在 webpack 的環境中安裝，用來解決打包後無法正常連結到本地端 static 文件下的 JSON 文件。\n\n那麼 http-server 是甚麼? 對於前端來說，需要使用伺服器如 tomcat 或是 Apache http server，這時一個簡單輕量的 http-server 就可以搞定。\n\n當前端開發完成後，打包部署，此時生成一個 dist 文件夾，裡面存放的是一些靜態文件，當我們在編輯器裡直接運行這些靜態文件時，很可能會發生錯誤，此時可以使用 http-server 來搞定。\n\n可以使靜態資料文件的任一目錄成為服務器的目錄，完全拋開後台沉重工作，直接運行你要的代碼。\n\n解決 axios 請求本地的 json 文件在打包後路徑出錯的問題。\n\n參考資料\n解決axios請求本地的json文件在打包後路徑出錯問題\nhttps://www.itread01.com/content/1531126941.html\n\n",
            "labelLink": "#http-server 目錄伺服器"
        },
        {
            "value": "4.5",
            "label": "非同步處理",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "同步執行後執行所有非同步處理",
            "labelLink": "#非同步處理"
        },
        {
            "value": "4.5.1",
            "label": "同步與等待 - async & await",
            "image": "4/-.5.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "async 非同步\nawait 等待\n\n使用變數承接 await 所接收的資料\n\ndiv\n button(@click=\"go()\") Go\n span {{respose}}\n\ndata: {\n  respose: \"\"\n},\nmethods: {\n  go() {}\n},\nmounted() {\n  function sleep(val) {\n    return `funstion in sleep ${val}`; //假設 \ncallback 回來的資料\n  }\n  this.go = async function go() {\n    await sleep(1000); //僅僅等待 (wait)\n    const respose = await sleep(750); //獲得返回值\n    this.respose = respose; //使用變量的資料\n  };\n}",
            "labelLink": "#同步與等待 - async & await"
        },
        {
            "value": "4.5.2",
            "label": "變數儲存錯誤 - Catch",
            "image": "4/-.5.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "data: {\n  dealWithErrors: \"當有錯誤時...\"\n},\nmounted() {\n  async function loadData() {\n    const get = await axios.get(\"URL\");\n  }\n  loadData().catch(function(e) {\n    let dealWithErrors = e;\n    console.log(`當前錯誤: ${dealWithErrors}`);\n  });\n}",
            "labelLink": "#變數儲存錯誤 - Catch"
        },
        {
            "value": "4.6",
            "label": "API 資源",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "自己撰寫或網路蒐集的 API 資源。",
            "labelLink": "#API 資源"
        },
        {
            "value": "4.6.1",
            "label": "自訂 GitHub API",
            "image": "4/-.6.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "API:https://raw.githubusercontent.com/azpact/Json-Library/master/text.json\n\n將 JSON 資料儲存在 GitHun 上",
            "labelLink": "#自訂 GitHub API"
        },
        {
            "value": "4.6.2",
            "label": "狗狗 API",
            "image": "4/-.6.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "API cors-anywhere:https://cors-anywhere.herokuapp.com/\nAPI dog:https://dog.ceo/api/breeds/image/random\n\n透過跨網域取得狗狗 API，每取得一次都會有不一樣的照片。",
            "labelLink": "#狗狗 API"
        },
        {
            "value": "4.6.3",
            "label": "台灣縣市、鄉鎮、地址、中英文 API",
            "image": "4/-.6.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "API:https://raw.githubusercontent.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/master/AllData.json\n\n{\n  \"CityName\": \"臺北市\",\n  \"CityEngName\": \"Taipei City\",\n  \"AreaList\":[\n    {\n      \"ZipCode\": \"100\",\n      \"AreaName: \"中正區\",\n      \"AreaEngName\": \"Zhongzheng Dist.\",\n      \"RoadList: [\n        \"RoadName\": \"八德路１段\",\n        \"RoadEngName\": \"Sec. 1, Bade Rd.\"\n      ]\n    }\n  ]\n}\n\n參考資料\n台灣 縣市，鄉鎮，地址 中英文 JSON\nhttps://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON/blob/master/README.md",
            "labelLink": "#台灣縣市、鄉鎮、地址、中英文 API"
        },
        {
            "value": "4.6.4",
            "label": "解決跨網域存取的 API",
            "image": "4/-.6.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "只要將 cors-anywhere 所提供的API網址放前面，\n/ 後面加上你要訪問的 API 內容網址。\n\nconst cors = 'https://cors-anywhere.herokuapp.com/'; \n// use cors-anywhere to fetch api data\n\nconst url = 'https://tw.rter.info/capi.php?=1568944322585'; \n// origin api url\n\nlet URL = `${cors}${url}`\n\n/** fetch api url by cors-anywhere */\naxios.get(URL)\n  .then((response) => {\n    const msg = response.data;\n    document.body.innerHTML = JSON.stringify(msg)\n  },\n    (error) => {\n    }\n  );\n\n參考資料\n1.JS-&ajax data\n通過跨域網址達成跨域取資料\nhttps://codepen.io/azpact/pen/rbmWrZ\n\n2.如何解決跨網域存取被拒絕問題?\nhttps://andy6804tw.github.io/2019/09/21/fix-cors-problem/#%E4%BD%BF%E7%94%A8-cors-anywhere\n",
            "labelLink": "#解決跨網域存取的 API"
        },
        {
            "value": "4.6.5",
            "label": "IN API",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*IN-線上範例\nhttps://api.jsonbin.io/b/5e1de3925df6407208354bb3\n*IN-編碼\nhttps://api.jsonbin.io/b/5dcd09ab9e3eb3638dc01524\n*IN-股票\n尚未建立\n\n*快速使用範本\nasync feachList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\": \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci\"\n      }\n    });\n    const get = await instance.get(\n      \"https://api.jsonbin.io/b/5e1de3925df6407208354bb3\"\n    );\n    const { data } = get; //資料在 data 屬性\n    this.listOne = data.listOne; //將GET的資料放到Vue上的groupList陣列中\n  } catch (error) {\n    throw new Error(error);\n  }\n},\nasync putList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\": \"$2a$10$XflNqIVbG42ADERhOMsvp.KChlqUCodB/fEQFGSdjmIfKOqonOJci\",\n        \"Content-Type\": \"application/json\",\n        versioning: false\n      }\n    });\n    let data = this.listOne;\n    const put = await instance.put(\n      \"https://api.jsonbin.io/b/5e1de3925df6407208354bb3\", { listOne: data }\n    );\n  } catch (error) {\n    throw new Error(error);\n  }\n},",
            "labelLink": "#IN API"
        },
        {
            "value": "5",
            "label": "Vue & JS & JQ 實例",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "JavsScript 與 JQuery 的實例展示",
            "labelLink": "#Vue & JS & JQ 實例"
        },
        {
            "value": "5.0",
            "label": "測試階段使用",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Test-element ui\n使用 element ui 編寫測試用的網址\nhttps://codepen.io/azpact/pen/BaBXzJb\n\n\nTest-登入系統測試\n陣列中找到相對應的值\n目前針對符合信箱的字串，確認使用者登入。\nhttps://codepen.io/azpact/pen/wVedgG\n\n\n\n當前目錄\n5.1 與 App / Project 相關\n5.2 與 Html / Css 相關\n5.3 與資料操作相關\n5.4 與重複性組件相關",
            "labelLink": "#測試階段使用"
        },
        {
            "value": "5.1",
            "label": "與 App / Project 相關",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "與 App/Project 相關\n\n1.\n可以新增、刪除、修改的記事筆記\n參考資料\nSample-IN Demo\nhttps://codepen.io/azpact/pen/mdyzOJo\n\n2.\n本網站的副本\nSample-網站建立器\nhttps://codepen.io/azpact/pen/ZdRmVM\n\n3.\n信箱註冊、信箱登入、新增、刪除、修改記事筆記\nSample-子彈筆記\nhttps://codepen.io/azpact/pen/ymYNzP",
            "labelLink": "#與 App / Project 相關"
        },
        {
            "value": "5.2",
            "label": "與 Html / Css 相關",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "與 Html 元素相關",
            "labelLink": "#與 Html / Css 相關"
        },
        {
            "value": "5.2.1",
            "label": "Vue-select",
            "image": "5/-.2.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "撰寫 Select 時，\n要特別注意 value 要使用 v-bind 去動態綁定。\noption 屬性加上 selected 為預設顯示的文字與數值\n\n\ndiv\n select(v-model=\"selected\")\n  option(selected value=\"900\") -請選擇-\n   option(v-for=\"option in options\" :value=\"option.value\")\n p Selected: {{selected}}\n\ndata() {\n  return {\n    selected: 900,\n    options: [\n      { value: 12, text: 12 },\n      { value: 24, text: 24 },\n      { value: 36, text: 36 }\n    ]\n  };\n}",
            "labelLink": "#Vue-select"
        },
        {
            "value": "5.2.2",
            "label": "Html-pre textarea json",
            "image": "5/-.2.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 textarea 輸入的資料可以斷行內容並儲存到 json 資料中。\n\n<div id=\"app\">\n  <pre>{{point}}</pre><br>\n  <textarea v-model=\"contant\"></textarea>\n  <br>\n  <pre>{{contant}}</pre>\n  <button @click=\"put\">add</button>\n</div>\n\n\n  data(){\n    return{\n      point:'',\n      contant:'11\\n12',\n      page:'',\n      rows:[]\n    }\n  },\n  methods:{\n    put(){\n      let vm = this\n      vm.rows = vm.contant\n      this.point = vm.rows\n    }\n  }\n\n參考資料\nHtml-pre textarea json\nhttps://codepen.io/azpact/pen/EqeaaP",
            "labelLink": "#Html-pre textarea json"
        },
        {
            "value": "5.2.3",
            "label": "Vuetify-導覽列",
            "image": "5/-.2.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "底部與左側導覽列。\n\n\n參考資料\nvuetify- 導覽列\nhttps://codepen.io/azpact/pen/GbrPRy",
            "labelLink": "#Vuetify-導覽列"
        },
        {
            "value": "5.2.4",
            "label": "JQ-addClass & removeClass",
            "image": "5/-.2.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "addClass()\nremoveClass()\nhide()\nshow()\n\n\n$('#button1')\n  .mouseenter(function() {\n    $activeButton.removeClass('success')\n    $activePabnel.hide()\n    $('#button1').addClass('success')\n    $('#content1').show()\n    $activePabnel = $('#content1')\n    $activeButton = $('#button1')\n  })\n\n參考資料\nJS-導覽列碰觸鼠標立即顯示對應內容\nhttps://codepen.io/azpact/pen/oRbNOp",
            "labelLink": "#JQ-addClass & removeClass"
        },
        {
            "value": "5.2.5",
            "label": "JQ-向下展開的導覽列",
            "image": "5/-.2.5.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ";(function(){\n $('#nav li ul').hide()\n $('#nav li').hover(   \n  function(){\n    $('>ul:not(:animated)',this).slideDown('fast')\n  },\n  function(){\n    $('>ul',this).slideUp('fast')\n  }\n )\n})()\n\n參考資料\nJQ-向下展開的導覽列\nhttps://codepen.io/azpact/pen/YbwzYE",
            "labelLink": "#JQ-向下展開的導覽列"
        },
        {
            "value": "5.2.6",
            "label": "JQ-側邊手風琴導覽列",
            "image": "5/-.2.6.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"wrapper\">\n  <div id=\"nav\">\n    <ul>\n      <li class=\"color-blue\">\n        <div class=\"main\">時尚</div>\n        <ul class=\"subs\">\n          <li><a href=\"#\">外套</a></li>\n          <li><a href=\"#\">褲子</a></li>\n          <li><a href=\"#\">飾品</a></li>\n        </ul>\n      </li>\n      <li class=\"color-red\">\n        <div class=\"main\">家具-室內裝飾</div>\n        <ul class=\"subs\">\n          <li><a href=\"#\">沙發</a></li>\n          <li><a href=\"#\">床</a></li>\n          <li><a href=\"#\">桌子</a></li>\n          <li><a href=\"#\">椅子</a></li>\n        </ul>\n      </li>\n      <li class=\"color-yellow\">\n        <div class=\"main\">文具</div>\n        <ul class=\"subs\">\n          <li><a href=\"#\">鉛筆</a></li>\n          <li><a href=\"#\">筆記本</a></li>\n          <li><a href=\"#\">圓規</a></li>\n          <li><a href=\"#\">資料夾</a></li>\n        </ul>\n      </li>\n      <li class=\"color-green\">\n        <div class=\"main\">生活雜貨</div>\n        <ul class=\"subs\">\n          <li><a href=\"#\">廚房用品</a></li>\n          <li><a href=\"#\">掃除˙洗滌用品</a></li>\n          <li><a href=\"#\">浴室˙廁所用品</a></li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</div>\n\n;(function(){\n $('ul.subs').hide() //立即隱藏\n  $('div.main').click(function(){  //點擊事件\n    $('ul.subs').slideUp() //展開高度\n    $('div.main').removeClass('open') //移除樣式\n    // 判斷式，增加樣式\n    if($('+ul',this).css('display')=='none'){\n      $('+ul',this).slideDown()\n      $(this).addClass('open')\n    }\n  })\n  .mouseover(function(){ //鼠標移入事件，增加樣式\n    $(this).addClass('rollover')\n  })\n  .mouseout(function(){ //鼠標移出事件，移除樣式\n    $(this).removeClass('rollover')\n  })\n})()\n\n參考資料\nJQ-側邊手風琴導覽列\nhttps://codepen.io/azpact/pen/OYMLNb",
            "labelLink": "#JQ-側邊手風琴導覽列"
        },
        {
            "value": "5.2.7",
            "label": "Html-代碼美化",
            "image": "5/-.2.7.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 code-prettify 來美化顯示的程式碼\n\n<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify\n@master/loader/run_prettify.js\"></script>\n\n參考資料\nHtml-代碼美化\nhttps://codepen.io/azpact/pen/gyWKop",
            "labelLink": "#Html-代碼美化"
        },
        {
            "value": "5.2.8",
            "label": "Html-表單初步驗證資料",
            "image": "5/-.2.8.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "進行數值、網址、信箱初步資料驗證\n\nHtml-表單初步驗證資料\nhttps://codepen.io/azpact/pen/JQjWxM",
            "labelLink": "#Html-表單初步驗證資料"
        },
        {
            "value": "5.2.9",
            "label": "Vue-切換不同布局",
            "image": "5/-.2.9.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 v-if 來切換元素的顯示與隱藏\n\n參考資料\nHtml-切換不同布局\nhttps://codepen.io/azpact/pen/KLQdLe",
            "labelLink": "#Vue-切換不同布局"
        },
        {
            "value": "5.2.10",
            "label": "Vue-Form",
            "image": "5/-.2.10.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.應用 input & textarea。\n2.應用 checkbox。\n3.應用 radio。\n4.應用 select 列表\n\n配合 data、methods、watch 操作資料\n\n參考資料\nVue-Form\nhttps://codepen.io/azpact/pen/jompgr",
            "labelLink": "#Vue-Form"
        },
        {
            "value": "5.2.11",
            "label": "Vue-簡單導覽列",
            "image": "5/-.2.11.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "點擊導覽列時其會變換背景色，並顯示其導覽文字\n\n1.v-bind:active，激活導覽的樣式 \n2.v-on:click=makeActive(參數)，使用參數來改變樣式\n\n參考資料\nVue-簡單導覽列\nhttps://codepen.io/azpact/pen/VNXpWg",
            "labelLink": "#Vue-簡單導覽列"
        },
        {
            "value": "5.2.12",
            "label": "Vue-動態調節文字大小",
            "image": "5/-.2.12.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ":style\n\n<div id=\"app\">\n  <button @click=\"fontSize --\">-</button>\n  <button @click=\"fontSize ++\">+</button>\n  <div :style=\"{color:activeColor,fontSize:fontSize + 'rem'}\">調節文字大小</div>\n  <p>當前文字大小：{{fontSize}} rem</p>\n</div> \n\nlet vm = new Vue({\n    el: '#app',\n    data:{\n      activeColor:'blue',\n      fontSize:1\n    }\n  })\n\n參考資料\nVue-動態調節文字大小\nhttps://codepen.io/azpact/pen/ZNLXRW",
            "labelLink": "#Vue-動態調節文字大小"
        },
        {
            "value": "5.2.13",
            "label": "Vue-勾選checkbox顯示二者其一內容",
            "image": "5/-.2.13.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "input\nv-bind:true-value:a\nv-bind:false-value:b\n\n<div id=\"app\">\n  <input\n    type=\"checkbox\"\n    v-model=\"toggle\"\n    v-bind:true-value=\"a\"\n    v-bind:false-value=\"b\"\n  />{{ toggle }}\n</div>\nlet vm = new Vue({\n  data:{\n    toggle:'我是第一段文本',\n    a:'我是第二段文本',\n    b:'我是第一段文本'\n  }\n}).$mount('#app')\n\n參考資料\nVue-勾選checkbox顯示兩個其中一個文本內容\nhttps://codepen.io/azpact/pen/XwQRQN",
            "labelLink": "#Vue-勾選checkbox顯示二者其一內容"
        },
        {
            "value": "5.2.14",
            "label": "Vue-元素上鼠標顯示現在時間",
            "image": "5/-.2.14.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "v-bind:title\n\n  <span :title=\"message\">\n    Hover your mouse over me for a few seconds to see my \ndynamically bound\n    title!\n  </span>\n\nlet vm = new Vue({\n  data: {\n    message: 'You loaded this page on ' + new Date()\n.toLocaleString()\n  }\n}).$mount('#app')\n\n\n參考資料\nVue-元素上鼠標顯示現在時間\nhttps://codepen.io/azpact/pen/RmOgMm",
            "labelLink": "#Vue-元素上鼠標顯示現在時間"
        },
        {
            "value": "5.2.15",
            "label": "JQ-點擊滑動至頂部",
            "image": "5/-.2.15.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "點擊按鈕視窗滑動到頂部。\n\ntemplate\n a(href=\"#app\" id=\"gotop\") Gotop\n\nmounted(){\n  let gotop = $(\"#gotop\"); //置頂icon\n    $(gotop).click(function() {\n      $(\"html, body\").animate({ scrollTop: 0 }, 900);\n      return false;\n })\n}",
            "labelLink": "#JQ-點擊滑動至頂部"
        },
        {
            "value": "5.2.16",
            "label": "Vue&JQ-點擊滑動到指定元素位置",
            "image": "5/-.2.16.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "點擊按鈕視窗滑動到指定元素位置上。\n\ntemplate\n section\n   a(href=\"#\" @click=\"to('point')\") To Point\n section\n   a(href=\"#\" @click=\"to('app')\") Go top\n\nmethods: {\n async to(id) {\n  let element = `#${id}` //取得元素 id\n  const elementOffsetTop = \n  await $(element)\n  .offset()\n  .top; \n  //取得元素距離body頂部距離\n   $(\"html, body\")\n  .animate({ scrollTop: elementOffsetTop }, 900);\n  //移動到元素距離\n  }\n}",
            "labelLink": "#Vue&JQ-點擊滑動到指定元素位置"
        },
        {
            "value": "5.2.17",
            "label": "Vue&JQ-自動滑動到指定元素位置",
            "image": "5/-.2.17.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "進入網頁後，視窗自動滑動到指定元素位置上。\n\ntemplate\n section\n   a(href=\"#\" @click=\"to('point')\") To Point\n section\n   a(href=\"#\" @click=\"to('app')\") Go top\n\nmethods: {\n async to(id) {\n  let element = `#${id}` //取得元素 id\n  const elementOffsetTop = \n  await $(element)\n  .offset()\n  .top; \n  //取得元素距離body頂部距離\n   $(\"html, body\")\n  .animate({ scrollTop: elementOffsetTop }, 900);\n  //移動到元素距離\n  }\n}\nmounted() {\n let vm = this;\n function thOffsetTop(key){\n  switch (key) {\n   case 1:\n    vm.to('point');\n   break;\n   default:\n    vm.to('app');\n   break;\n  }\n }\n thOffsetTop(1);\n}",
            "labelLink": "#Vue&JQ-自動滑動到指定元素位置"
        },
        {
            "value": "5.2.18",
            "label": "Vue-checkbox 切換顯示按鈕",
            "image": "5/-.2.18.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "點選符合對應的 checkbox，來顯示與隱藏按鈕。\n\n.a {\n  background-color: rgb(101, 101, 206);\n  color: #FFF;\n}\n.styleOne,\n.styleTwo,\n.a{\n  padding: 0.5rem;\n  border: none;\n  outline: none;\n}\n.styleOne {\n  background-color: #FFF;\n  border:2px solid rgb(66,221,167);\n      }\n      .styleTwo {\n        background-color: rgb(66,221,167);\n}\n\n<div>\n  <input type=\"checkbox\" v-model=\"check\" value=\"checkA\">\n  <label for=\"checked1\">確認1，請詳閱細部內容</label>\n</div>\n<div>\n  <input type=\"checkbox\" v-model=\"check\" value=\"checkB\">\n  <label for=\"checked1\">確認2，請詳閱細部內容</label>\n</div>\n<div>\n  <input type=\"checkbox\" v-model=\"check\" value=\"checkC\">\n  <label for=\"checked1\">確認3，請詳閱細部內容</label>\n</div>\n<div style=\"height:60px;\">\n  <p>第一種方式 v-if </p>\n  <input v-if=\"isButton\" type=\"button\" value=\"確認送出\" class=\"a\"></input>\n</div>\n<div>\n  <p>第二種方式 :class</p>\n  <input type=\"button\" value=\"確認送出\" :class=\"classList\">\n</div>\n\ndata: {\n  check: [],\n  isButton: false,\n  classList: {\n    styleOne: true,\n    styleTwo: false\n  }\n},\nwatch: {\n  check() {\n    if (this.check.length == 3) {\n      this.isButton = true\n      this.classList.styleTwo = true\n    } else {\n      this.isButton = false\n      this.classList.styleTwo = false\n    }\n  }\n}",
            "labelLink": "#Vue-checkbox 切換顯示按鈕"
        },
        {
            "value": "5.3",
            "label": "與操作資料相關",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "與操作資料相關",
            "labelLink": "#與操作資料相關"
        },
        {
            "value": "5.3.1",
            "label": "jQuery-To Do List",
            "image": "5/-.3.1/-.3.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "代辦清單，使用 JQuery 撰寫",
            "labelLink": "#jQuery-To Do List"
        },
        {
            "value": "5.3.2",
            "label": "Vue-將物件插入二維陣列中",
            "image": "5/-.3.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "輸入並將兩個資料變成一個物件，插入到二維陣列中儲存。\n\n  methods:{\n    add(){\n      let vm = this\n      vm.rows = {\n        groupName:this.groupName,\n        groupNameDescription:this.groupNameDescription,\n      }\n      this.newGroup[0].groupList.push(this.rows)\n      //console.log(this.rows)\n    }\n  }\n\nVue-將物件插入二維陣列中\nhttps://codepen.io/azpact/pen/eqyVZY",
            "labelLink": "#Vue-將物件插入二維陣列中"
        },
        {
            "value": "5.3.3",
            "label": "Vue-陣列大小排序",
            "image": "5/-.3.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "排序一個陣列物件的資料，依序 age 排序。\n\n<div id=\"app\">\n  <button @click=\"sortStudents\">排序 age</button>\n  <ul>\n    <li v-for=\"val in students\">{{val.name}} {{val.age}}</li>\n  </ul>  \n</div>\n\nnew Vue({\n  data:{\n     students:[\n      {name:'cjk',age:'38'} ,\n      {name:'zk',age:'26'},       \n      { name:'xxf',age:'29'},\n     ]\n  },\n  methods:{\n     sortStudents(){\n       return sortByKey(this.students,'age')\n     }\n  }\n}).$mount('#app')\n\nfunction sortByKey(array,key){\n  return array.sort(function(a,b){\n    let x = a[key]\n    let y = b[key]\n    return ((x>y)?-1:(x<y)?1:0) //由大排到小\n    //return ((x<y)?-1:(x>y)?1:0) //由小排到大\n  })\n} //將深入物件的資料判別，另外使用 function 處理\n\n參考資料\nVue-陣列大小排序\nhttps://codepen.io/azpact/pen/KjMoaO",
            "labelLink": "#Vue-陣列大小排序"
        },
        {
            "value": "5.3.4",
            "label": "Vue-圖片廊道",
            "image": "5/-.3.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "陣列顯示圖片、按鈕顯示前後一個圖片、顯示當前圖片\n\n\n參考資料\n1.Vue-圖片廊道\nhttps://codepen.io/azpact/pen/MMawgg\n\n2.Simple Vue Photo Gallery\nhttps://codepen.io/CSWApps/pen/YoyZJZ",
            "labelLink": "#Vue-圖片廊道"
        },
        {
            "value": "5.3.5",
            "label": "JS-移除重複值",
            "image": "5/-.3.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "div(id=\"app\")\n p 原始陣列數值:{{arr}}\n p 移除重複數值後: {{arrTwo}}\n\ndata(){\n    return{\n      arr:[1, 2, 3, 4, 5, 1, 2, 3, 4, 5,'a','c','a'] \n    }\n  },\n  computed:{\n    arrTwo:{\n     get(){\n      return [...(new Set(this.arr))]\n     }\n   }\n  }\n\n參考資料\nJS-移除重複值\nhttps://codepen.io/azpact/pen/oOoXry",
            "labelLink": "#JS-移除重複值"
        },
        {
            "value": "5.3.6",
            "label": "JQ-To do list",
            "image": "5/-.3.6.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 jQuery 撰寫的執行清單\n\nJQ-To do list\nhttps://codepen.io/azpact/pen/LvRgXW",
            "labelLink": "#JQ-To do list"
        },
        {
            "value": "5.3.7",
            "label": "Vue-按鈕開關燈泡",
            "image": "5/-.3.7.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "點擊按鈕，切換燈泡明滅\n1.組件 <light> \n2.toggle 兩個樣式 \n3.template 內使用 v-bind:class <light></light>\n\n參考資料\nVue-按鈕開關燈泡\nhttps://codepen.io/azpact/pen/mYgNKE",
            "labelLink": "#Vue-按鈕開關燈泡"
        },
        {
            "value": "5.3.8",
            "label": "Vue-mouseover & mouseleave",
            "image": "5/-.3.8.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "鼠標觸發事件、進場與出場\n\n@mouseover=\"mouseover\"\n@mouseleave=\"mouseleave\"\n\nbody {\n  \n  background: #333;\n  \n  #mouse {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    display: block;\n    width: 280px;\n    height: 50px;\n    margin: 0 auto;\n    line-height: 50px;\n    text-align: center;\n    color: #fff;\n    background: #007db9;\n\n    a {\n      display: block;\n      width: 100%;\n      height: 100%;\n      cursor: pointer;\n    }\n  }\n}\n\n<div id=\"mouse\">\n  <a\n    v-on:mouseover=\"mouseover\"\n    v-on:mouseleave=\"mouseleave\">\n    {{message}}\n  </a>\n</div>\n\nnew Vue({\n  el: '#mouse',\n  data: {\n    message: 'Hover Me!'\n  }, \n  methods: {\n    mouseover: function(){\n      this.message = 'Good!'\n    },    \n    mouseleave: function(){\n      this.message = 'Hover Me!'\n    }\n  }\n})\n\n參考資料\nVue-mouseover & mouseleave\nhttps://codepen.io/intotheprogram/pen/ZjxZdg",
            "labelLink": "#Vue-mouseover & mouseleave"
        },
        {
            "value": "5.3.9",
            "label": "Vue-click 切換三種背景色板",
            "image": "5/-.3.9.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "透過按下顏色區塊，變換背景的顏色\n\nstyleBackground1()、styleBackground2()、styleBackground3()\n\n參考資料\nVue-click 切換三種背景色板\nhttps://codepen.io/azpact/pen/areRXe",
            "labelLink": "#Vue-click 切換三種背景色板"
        },
        {
            "value": "5.3.10",
            "label": "Vue-判斷輸入資料給予畫面",
            "image": "5/-.3.10.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.輸入資料按下按鈕判別。\n2.密碼錯誤，給予提示。\n3.密碼正確，給予畫面\n\n參考資料\nVue-判斷輸入資料給予畫面\nhttps://codepen.io/azpact/pen/WBJGZX",
            "labelLink": "#Vue-判斷輸入資料給予畫面"
        },
        {
            "value": "5.3.11",
            "label": "Vue-個人基本資料表單",
            "image": "5/-.3.11.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.將中文輸入的個人資料，以英文版本自動輸出\n\n參考資料\nVue-個人基本資料表單\nhttps://codepen.io/azpact/pen/KLmjzO",
            "labelLink": "#Vue-個人基本資料表單"
        },
        {
            "value": "5.3.12",
            "label": "Vue-量尺單位即時轉換",
            "image": "5/-.3.12.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "輸入數值自動轉換數值單位\n\n1.v-model 綁定 data 的自訂屬性達成雙向資料。\n2.watch 去監聽 data 中自訂屬性的變化。\n3.在 watch 的 function 內撰寫撰寫值變化的規則\n\n參考資料\nVue-量尺單位即時轉換\nhttps://codepen.io/azpact/pen/ProGQV",
            "labelLink": "#Vue-量尺單位即時轉換"
        },
        {
            "value": "5.3.13",
            "label": "Vue-搜尋頁面",
            "image": "5/-.3.13.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "輸入內容得到相對應的搜索資料\n\n1.建立輸入框雙向綁定 \n2.撰寫 HTML 上要呈現的插值 \n3.data 使用陣列化資料 \n4.撰寫 computed 的 filter 篩選器\n\n參考資料\nVue-搜尋頁面\nhttps://codepen.io/azpact/pen/WBMQop",
            "labelLink": "#Vue-搜尋頁面"
        },
        {
            "value": "5.3.14",
            "label": "Vue-人口進出管制",
            "image": "5/-.3.14.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.點擊 A 與 B 的\"+\"與\"-\"，加減數值。\n2.總人數管制為 A 與 B 的加總 \n\n1.component 組件化 \n2.在組件中使用的 methods 內使用\n this.$emit('increment',參數) 傳遞參數給 el 的 methods \n3.再從 el 的 methods 操作資料到 HTML 上\n\n參考資料\nVue-人口進出管制\nhttps://codepen.io/azpact/pen/dEzqMe",
            "labelLink": "#Vue-人口進出管制"
        },
        {
            "value": "5.3.15",
            "label": "Vue-訂單列表實例",
            "image": "5/-.3.15.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.toggle 點擊每個商品會增加與減少金額。\n2.Total 會自動加總總金額\n\n1.@click=\"toggleActive(service) \n2.methods toggleActive(s){s.active=!s.active}\"\n\n參考資料\nVue-訂單列表實例\nhttps://codepen.io/azpact/pen/WBMvNq",
            "labelLink": "#Vue-訂單列表實例"
        },
        {
            "value": "5.3.16",
            "label": "Vue-簡單購物車",
            "image": "5/-.3.16.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ":disabled 屬性，當 iphone.count === 0 時，就禁止點擊以下這個按鈕\n\n<button \n  :disabled=\"iphone.count === 0\" \n  @click=\"iphone.count-=1\">-\n</button>  {{ iphone.count }}\n\n\nmethods: {\n    totalPrice: function () {\n      var totalP = 0;\n      \n      for (var i = 0, len = this.Ip_Json.length; i < len; i++) {\n        totalP += this.Ip_Json[i].price * this.Ip_Json[i].count;\n      }\n      return totalP;\n    }\n }\n\n\n參考資料\n1.Vue-簡單購物車\nhttps://codepen.io/azpact/pen/NVdjRo\n\n2.Vue 動態控制 input 的 disabled 屬性方法\nhttps://www.jb51.net/article/142633.htm",
            "labelLink": "#Vue-簡單購物車"
        },
        {
            "value": "5.3.17",
            "label": "Vue-網站登入前、中、後轉換畫面",
            "image": "5/-.3.17.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "網站需要透過密碼，才能觀看其他網頁資料\n\n1.Vue.directive，v-focus。\n2.Id，loginFirst、loginCheck。\n3.methods，checkLogin()/登入畫面、\ncheckFirst()/判別登入資料、checkOut()/登出畫面\n\n參考資料\nVue-網站登入前、中、後轉換畫面\nhttps://codepen.io/azpact/pen/LowqPq",
            "labelLink": "#Vue-網站登入前、中、後轉換畫面"
        },
        {
            "value": "5.3.18",
            "label": "Vue-顯示與隱藏可編輯文本",
            "image": "5/-.3.18.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "v-if true 與 false 顯示與隱藏內容\nmethods\n\n參考資料\nVue-顯示與隱藏可編輯文本\nhttps://codepen.io/azpact/pen/eorpZq",
            "labelLink": "#Vue-顯示與隱藏可編輯文本"
        },
        {
            "value": "5.3.19",
            "label": "Vue-合併兩個資料",
            "image": "5/-.3.19.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "\ncomputed: {\n fullName: {\n  get() {\n   console.log('computed getter')\n   return this.firstName + ' ' + this.lastName\n   },\n      set(value) {\n        console.log('computed setter')\n        this.firstName = value.split(' ')[0]\n        this.lastName = value.split(' ')[1]\n      }\n    }\n  },\n\n\n參考資料\nVue-computed get&set\nhttps://codepen.io/azpact/pen/wbxGmm",
            "labelLink": "#Vue-合併兩個資料"
        },
        {
            "value": "5.3.20",
            "label": "JS-點擊按鈕亂數計算",
            "image": "5/-.3.20.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "flottery() //亂數計算函數。\nMath.random() //方法是在 JavaScript 中產生亂數的方法。\n\nbutton (@click=\"flottery()\") 亂數計算\np {{ms}}\n\ndata() {\n  return {\n    ms: \"初始計算\"\n  };\n},\nmethods: {\n  flottery() {\n    const maxNumber = 5\n    const minNumber = 1\n    let cNumber =\n      Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber\n    this.ms = cNumber\n  }\n}",
            "labelLink": "#JS-點擊按鈕亂數計算"
        },
        {
            "value": "5.4",
            "label": "與重複性組件相關",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "與重複性組件相關、function 閉包",
            "labelLink": "#與重複性組件相關"
        },
        {
            "value": "5.4.1",
            "label": "JS-creat race",
            "image": "5/-.4.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 Obj 對應的值，建立出相對應的內容。\n\n<div>\n <form name=\"form_name\" id=\"form_name\">\n   <select name=\"race\">\n     <option value=\"protoss\">神族</option>\n     <option value=\"terran\">人族</option>\n     <option value=\"zerg\">蟲族</option>\n   </select>\n   <button onclick=\"createRole()\">創建角色</button>\n </form>\n</div>\n<p id=\"element\"></p>\n\n//建立模型\nlet gameRace = {\n  protoss: \"protoss\",\n  terran: \"terran\",\n  zerg: \"zerg\"\n};\n\n//執行模型\nfunction createRole(e) {\n  e = e || event;\n  e.preventDefault();\n  const form = document.getElementById(\"form_name\");\n  const element = document.getElementById(\"element\");\n  let race = form.race.value;\n  if (race == gameRace.protoss) {\n    element.innerHTML = \"創建神族角色\";\n  } else if (race == gameRace.terran) {\n    element.innerHTML = \"創建人族角色\";\n  } else if (race == gameRace.zerg) {\n    element.innerHTML = \"創建蟲族角色\";\n  }\n}\n\n參考資料\nJS-creat race\nhttps://codepen.io/azpact/pen/YzKBEMG",
            "labelLink": "#JS-creat race"
        },
        {
            "value": "6",
            "label": "基礎 Vue",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "簡易的完成前端事務",
            "labelLink": "#基礎 Vue"
        },
        {
            "value": "6.1",
            "label": "風格指南",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "參考 Vue 風格指南",
            "labelLink": "#風格指南"
        },
        {
            "value": "6.1.1",
            "label": "事前準備 - Vue",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "事前準備掛載資料\n\nbody\n div(id=\"#app\")\n  span {{ms}}\n \nscript\n new Vue({\n   data(){\n     return{\n       ms: \"123\"\n     }\n   },\n   methods:{\n     // 各種要用的 function 寫在這\n     methodsFunction(){\n       //..\n     }\n   },\n   mounted(){\n      // 接 API 通常放這\n\n   }\n })",
            "labelLink": "#事前準備 - Vue"
        },
        {
            "value": "6.1.2",
            "label": "自訂撰寫風格 - 組件、文件",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.組件樣板 - 短橫風格\n<v-item :v-item=\"codeItem\">\n\n2.組件- 短橫風格\nVue.component('v-item'){\n  //..\n}\n\n3.導出組件 - 大小寫風格\nexport default{\n name:\"VItem\"\n}\n\n4.組件檔案名稱 - 大小寫風格\n同 導出組件 name\n\nVitem.js\nVitem.vue\n\n4.1 The 前綴 - 前綴風格\n如果組件在其他組件中只出現一次，使用 The 前綴\n如 TheHeader、TheMain、TheFooter\n\nTheHeader.vue\nTheMain.vue\nTheFooter.vue\n\n4.2 V 前綴 - 前綴風格\n如果組件在其他組件出現多次，使用 V 前綴\n如 VInput、VBbtton\n\nVInput.vue\nVBbtton.vue\n\n5.父子組件命名 - 點聚集風格\n在一個搜尋 (search) 的組件，有按鈕 (button)、\n輸入框 (input)、文字框 (textBox)..等等。\n可以有效的方式命名組件。\n\nVSerch.vue\nVSerchButton.vue\nVSerchInput.vue\nVSerchTextBox.vue\n\n6. prop 詳細撰寫\nprops: {\n  status: {\n    type: String, //類型\n    required: true, //是否一定有傳值\n    validator: function (value) { //預設顯示的資料\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].indexOf(value) !== -1\n    }\n  }\n}\n\n7.使用 v-for要注意\n一定要為它加上 :key 屬性，以便維護元素上的狀態\nul\n li(v-for=\"item in listOne\" :key=\"item.id\")\n\n8.組件的樣式盡量在裡面完成 - scoped\n<template>\n  <button class=\"button button-close\">X</button>\n</template>\n\n<!-- 使用 `scoped` 特性 -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>\n\n9.私有屬性名\n類似 JavaScript 的私有域一樣，將 function 另外撰寫，\n保持模塊作用域不被外部訪問的函數，保持私有性。\n\nmethods:{\n  publicmethods(){\n    myPrivateFunction()\n  }\n},\nmoutend:{\n function myPrivateFunction(){\n   //..\n }\n}\n\n10.組件統一順序表\n\n1.副作用 (觸發組件外的影響)\n  el\n2.全局感知 (要求組件以外的知識)\n  name\n  parent\n3.組件類型 (更改組件的類型)\n  functional\n4.模板修改器 (改變模板的編譯方式)\n  delimiters\n  comments\n5.模板依賴 (模板內使用的資源)\n  components\n  directives\n  filters\n6.組合 (向選項里合並屬性)\n  extends\n  mixins\n7.接口 (組件的接口)\n  inheritAttrs\n  model\n  props/propsData\n8.本地狀態 (本地的響應式屬性)\n  data\n  computed\n9.事件 (通過響應式事件觸發的回調)\n  watch\n  9-1生命週期鉤子(按照它們被調用的順序)\n     beforeCreate\n     created\n     beforeMount\n     mounted\n     beforeUpdate\n     updated\n     activated\n     deactivated\n     beforeDestroy\n     destroyed\n10.非響應式的屬性 (不依賴響應系統的實例屬性)\n  methods\n11.渲染 (組件輸出的聲明式描述)\n  template/render\n  renderError\n\n11.文素特性順序\n\n1.定義 (提供組件的選項)\n  is\n2.列表渲染 (創建多個變化的相同元素)\n  v-for\n3.條件渲染 (元素是否渲染/顯示)\n  v-if\n  v-else-if\n  v-else\n  v-show\n  v-cloak\n4.渲染方式 (改變元素的渲染方式)\n  v-pre\n  v-once\n5.全局感知 (需要超越組件的知識)\n  id\n6.唯一的特性 (需要唯一值的特性)\n  ref\n  key\n  slot\n7.雙向綁定 (把綁定和事件結合起來)\n  v-model\n8.其它特性 (所有普通的綁定或未綁定的特性)\n9.事件 (組件事件監聽器)\n  v-on\n10.內容 (覆寫元素的內容)\n  v-html\n  v-text\n\n\n參考資料\n風格指南 - vue.js\nhttps://cn.vuejs.org/v2/style-guide/#%E4%BC%98%E5%85%88%E7%BA%A7-C-%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%9A%E6%8E%A8%E8%8D%90-%E5%B0%86%E9%80%89%E6%8B%A9%E5%92%8C%E8%AE%A4%E7%9F%A5%E6%88%90%E6%9C%AC%E6%9C%80%E5%B0%8F%E5%8C%96",
            "labelLink": "#自訂撰寫風格 - 組件、文件"
        },
        {
            "value": "6.1.3",
            "label": "自定義名稱 - Methods",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "methods、computed、mounted\n\n*常用 methods function 名稱\nfetch 取\nfetchData 取資料\nfetchAll 取全部\nget 得到\ngetData 得到資料\nadd 加\naddValue 加數值\naddLabel 加標籤\ndelete 刪除\nimput 輸入\n\n*常用 computed function 名稱\nanchor 錨點",
            "labelLink": "#自定義名稱 - Methods"
        },
        {
            "value": "6.1.4",
            "label": "監聽事件使用法則",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.Props 父傳子，Parent => Child Communication\n2.$emit 子傳父， 自定義事件，Child => Parent Communication\n3.Event Bus，類似於 Angular 2 的 services 用法，兄弟間建立橋樑傳遞資訊。",
            "labelLink": "#監聽事件使用法則"
        },
        {
            "value": "6.2",
            "label": "v-bind",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "綁定 Class、 Style、true/false",
            "labelLink": "#v-bind"
        },
        {
            "value": "6.2.1",
            "label": ":class - 物件",
            "image": "6/-.2.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "-將 Class 以 data 物件方式儲存\n-點擊按鈕，判別當前顯示的樣式\n\nstyle\n .styleOne {\n   margin-top: 0;\n   margin-left: 0;\n   background-color: burlywood;\n }\n .styleTwo {\n   margin-top: 2rem;\n   margin-left: 2rem;\n   background-color: rgb(184, 184, 184);\n }\n\nbutton(@click=\"moveTo()\") 按鈕\ndiv(:class=\"classList\") I am Data\n\ndata: {\n  classList: {\n    styleOne: true, // 物件名稱為 .styleOne 樣式名稱\n    styleTwo: true // 物件名稱為 .styleTwo 樣式名稱\n  }\n},\nmethods: {\n  moveTo() {\n    this.classList.styleTwo = !this.classList.styleTwo;\n  }\n}",
            "labelLink": "#:class - 物件"
        },
        {
            "value": "6.2.2",
            "label": ":style - 物件",
            "image": "6/-.2.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "-將 Style 以 data 物件方式儲存\n-點擊按鈕，判別是否使用樣式\n\nbutton(@click=\"moveTo()\") 按鈕\ndiv(:style=\"styleList\") I am Data\n\ndata: {\n  styleList: {\n    check: true, // 是否顯示這個樣式\n    marginTop: 0,\n    marginLeft: 0,\n    backgroundColor: \"burlywood\"\n  }\n},\nmethods: {\n  moveTo() {\n    let style = this.styleList;\n    style.check == true\n      ? ((style.backgroundColor = \"#696\"),\n        (style.marginTop = \"2rem\"),\n        (style.marginLeft = \"2rem\"))\n      : ((style.backgroundColor = \"burlywood\"),\n        (style.marginTop = \"0\"),\n        (style.marginLeft = \"0\"));\n    style.check = !style.check;\n  }\n}",
            "labelLink": "#:style - 物件"
        },
        {
            "value": "6.2.3",
            "label": ":style 動態修改樣式 - 物件",
            "image": "6/-.2.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "button(@click=\"moveTo(MarginLeft,MarginTop)\") 按鈕\ndiv\n label MarginLeft:\n input(type=\"text\" v-model.number=\"MarginLeft\")\n br\n label MarginTop:\n input(type=\"text\" v-model.number=\"MarginTop\") \ndiv(:style=\"styleList\") I am Data",
            "labelLink": "#:style 動態修改樣式 - 物件"
        },
        {
            "value": "6.2.4",
            "label": ":class 三則運算式",
            "image": "6/-.2.4.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": ".a,\n.b {\n  width: 90px;\n  height: 90px;\n  line-height: 10px;\n  border-radius: 50%;\n}\n.a {\n  background-color: red;\n}\n.b {\n  background-color: green;\n}\n\n<div id=\"app\">\n  <div :class=\"[aColor,isActive?bColor:'']\" \n@click=\"toggleColor()\">\n    &nbsp;\n  </div>\n</div>\n\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    aColor: 'a',\n    bColor: 'b',\n    isActive: true\n  },\n  methods: {\n    toggleColor() {\n      this.isActive = !this.isActive\n    }\n  }\n})\n\n參考資料\nVue-v-bind:class 三則運算式\nhttps://codepen.io/azpact/pen/byLjmW",
            "labelLink": "#:class 三則運算式"
        },
        {
            "value": "6.2.5",
            "label": "v-bind 所有用法",
            "image": "6/-.2.5.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  <p>{{ message }}</p>\n  <!-- 文本 -->\n  <p v-html=\"message\">Html</p>\n  <!-- Html -->\n  <p v-bind:class=\"{class1: use}\">class 套用 data 內的 Use</p>\n  <p v-bind:class=\"{class2:true}\">class 直接使用判斷式 套用樣式(true/false)</p>\n  <!-- 屬性 -->\n  <p v-bind:id=\"'list-' + id\">插值，</p>\n  <!-- 表達式 -->\n  <p v-if=\"seen\">現在你看的到我</p>\n  <!-- 指令 -->\n  <a v-bind:href=\"url\">Vue 學習</a><br>\n  <img v-bind:src=\"burl\"></img>\n  <!-- 參數 -->\n  <form v-on:submit.prevent=\"onSubmit\"></form>\n  <!-- 修飾符 -->\n  <input v-model=\"message\" />\n  <!-- 用戶輸入 -->\n  {{ message | capitalze }}\n  <!-- 過濾器 1 -->\n  <p v-bind:id=\"rawId | formatId\">Id 從 0 開始，透過過濾器 \n+ 1</p>\n  <!-- 過濾器 2 -->\n  <p>{{ message | filterA | filterB }}</p>\n  <!-- 過濾器 3 -->\n  <p>{{ message | filterA('arg1', 'arg2') }}</p>\n  <!-- 過濾器 4 -->\n</div>\n\n參考資料\nVue-v-bind\nhttps://codepen.io/azpact/pen/VNBjdK",
            "labelLink": "#v-bind 所有用法"
        },
        {
            "value": "6.3",
            "label": "Vue.Component",
            "image": "6/-.3.png",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "父組件: parent.vue\n子組件: child.vue\n孫組件: grandson.vue",
            "labelLink": "#Vue.Component"
        },
        {
            "value": "6.3.1",
            "label": "局部與全局的組件 - const",
            "image": "6/-.3.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "全局組件:\n只要以 Vue.component 為開頭就算是註冊組件，能立即使用。\n<v-item></v-item>\nVue.component(\"v-item\",{\n  template:``\n})\n\n局部組件:\n使用變量儲存 Vue.component 並在 Vue 實例中註冊使用它。\n使用變量儲存 Vue.component，HTML 就無法找到這個組件。\n\nlet v_item = Vue.component(\"v-item\",{\n               template:``\n             })\ncomponent:{\n  \"v-item\": v_item\n}\n\n// 實際操作\nv-button-one\nv-button-two\n\n// 全局組件\nVue.component(\"v-button-one\", {\n  template: `<div><button>全局組件按鈕</button></div>`\n});\n//局部組件\nlet v_button_two = Vue.component(\"v-button-two\", {\n  template: `<div><button>局部組件按鈕</button></div>`\n});\nnew Vue({\n  data() {\n    return {\n      ms: \"123\"\n    };\n  },\n  component: {\n    \"v-button-two\": v_button_two\n  }\n}).$mount(\"#app\");",
            "labelLink": "#局部與全局的組件 - const"
        },
        {
            "value": "6.3.2",
            "label": "使用 Child 內部資料 - data",
            "image": "6/-.3.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "建立的新組建，其內部的 data 都是獨立的\n\ndiv(id=\"app\")\n v-button\n v-button\n v-button\n\nVue.component(\"v-button\", {\n  data() {\n    return {\n      count: 0\n    };\n  },\n  template: `<button v-on:click=\"count++\">\n  You clicked me {{ count }} times.</button>`\n});\n",
            "labelLink": "#使用 Child 內部資料 - data"
        },
        {
            "value": "6.3.3",
            "label": "使用  Child 內部資料 -  v-for",
            "image": "6/-.3.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "data 內使用陣列資料，於 template 使用 v-for 顯示資料\n\ndata() {\n  return {\n    listOne: [\n      { label: \"壹頁\", value: \"1\" },\n      { label: \"貳頁\", value: \"2\" },\n      { label: \"叁頁\", value: \"3\" }\n    ]\n  };\n},\ntemplate: `\n<ul class=\"vNavbar\">\n <li \n    v-for=\"item in listOne\" \n   :key=\"item.id\">\n     {{item.value}} {{item.label}}\n </li>\n</ul>`",
            "labelLink": "#使用  Child 內部資料 -  v-for"
        },
        {
            "value": "6.3.4",
            "label": "使用 Child 套用 Child - data",
            "image": "6/-.3.4.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "想要子組件套用另一個子組件，可以使用變數儲存其中一個組件，另一個子組件再來套用\n\nchild-two Parent\n\nlet childOne = Vue.component(\"child-one\", {\n  template: `<div> Child One</div>`\n});\n\nlet childTwo = Vue.component(\"child-two\", {\n  template: `<div> Child Two <child-one></child-one></div>`,\n  components: {\n    \"child-one\": childOne\n  }\n});\n\ncomponents: {\n  \"child-two\": childTwo\n}",
            "labelLink": "#使用 Child 套用 Child - data"
        },
        {
            "value": "6.3.5",
            "label": "x-template",
            "image": "6/-.3.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "- 集中 template ，讓 component 可以重複使用資料格式\n- <script type=\"\"text/ x-template\"\" id = \"\"自訂ID\"\">\n\n\n<script type=\"text/x-template\" id=\"out-template\">\n  <li>{{ item.title }}</li>\n</script>\n<div class=\"app\">\n  <ol>\n    <out-template\n      :item=\"val\"\n      :key=\"val.id\"\n      v-for=\"val in cart\"\n    ></out-template\n    >\n  </ol>\n</div>\n<script> \nVue.component('out-template', {\n  props: ['item'],\n  template: '#out-template'\n})\nlet app = new Vue({\n  el: '.app',\n  data: {\n    cart: [{ title: 'Coffee' }, { title: 'Apple' }] //4\n  }\n})\n</script>\n\n參考資料\nVue-component x-template\nhttps://codepen.io/azpact/pen/LoKjXv",
            "labelLink": "#x-template"
        },
        {
            "value": "6.4",
            "label": "父傳子 (Props)",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "prop 是父組件用來傳遞數據的一個自定義屬性\n\n父傳多筆給子\n\nprops:{\n propA:{\n \n }\n}",
            "labelLink": "#父傳子 (Props)"
        },
        {
            "value": "6.4.1",
            "label": "Prop 傳遞的屬性",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "props:{\n  put_text: String,\n  put_num: Number,\n  put_array: Array,\n  put_object: Object,\n  put_function: Function,\n  put_boolean: Boolean,\n  put_Data : Date,\n  put_symbol: Symbol\n}",
            "labelLink": "#Prop 傳遞的屬性"
        },
        {
            "value": "6.4.2",
            "label": "Parent 傳值給 Child - prop",
            "image": "6/-.4.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "v-base(put_text=\"dataText\" :put_num=\"num\") \n\nVue.component(\"v-base\", {\n  props: {\n    put_text: String,\n    put_num: Number\n  },\n  template: `<div>{{put_text}} {{put_num}}</\ndiv>`\n});\n\nnew Vue({\n  data() {\n    return {\n      dataText: \"根實例輸入\",\n      num: 123\n    };\n  }\n}).$mount(\"#app\");",
            "labelLink": "#Parent 傳值給 Child - prop"
        },
        {
            "value": "6.4.3",
            "label": "Parent 傳值給 Child(動態) - v-bind",
            "image": "6/-.4.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<v-base :put_num=\"dnum\"></v-base>\n<v-base title=\"行內輸入\"></v-base>\n<v-base :title=\"ms\"></v-base>\n<v-base :title=\"listOne[0].label\"></v-base>\n<v-base :put_object=\"listOne[0]\"></v-base>\n<v-base :put_array=\"listOne\"></v-base>\n\nVue.component(\"v-base\", {\n  props: {\n    title: String,\n    put_num: Number,\n    put_array: Array,\n    put_object: Object\n  },\n  template: `<div> Base Test... {{title}}{{put_object}}{{put_array}}\n {{put_num}} </div>`\n});\n\ndata: {\n  ms: \"根實例輸入\",\n  dnum: 212,\n  listOne: [\n    { label: \"根實例 物件輸入\" },\n    { label: \"看到這段表示，根實例 陣列輸入\" }\n  ]\n}",
            "labelLink": "#Parent 傳值給 Child(動態) - v-bind"
        },
        {
            "value": "6.4.4",
            "label": "Parent 傳值給 Child(再使用) - data",
            "image": "6/-.4.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "div\n input(type=\"text\" v-model=\"ms\")\n v-base(:title=\"ms\")\n       \nVue.component(\"v-base\", {\n  props: {\n    put_text: String\n  },\n  data() {\n    return {\n      num: this.put_text\n    };\n  },\n  template: `\n  <div class=\"child\">\n    <h2>子層</h2>\n    <p>父資料 {{put_text}}</p>\n    <div>\n     <input type=\"text\" v-model=\"num\"/>\n     <p>子資料 {{num}}</p>\n    </div>\n  </div>`\n});\n\nnew Vue({\n  data: {\n    ms: \"123\"\n  }\n}).$mount(\"#app\");",
            "labelLink": "#Parent 傳值給 Child(再使用) - data"
        },
        {
            "value": "6.4.5",
            "label": "Prop 必填字符串 - required",
            "image": "6/-.4.5.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "必填的字符串\n\nv-base(put_text=\"123\")\nv-base   <!-- 沒有 put_text 屬性 會報錯 -->\n\nVue.component(\"v-base\", {\n  props: {\n    put_text: {\n      type: String,\n      required: true //自訂組件上必須有這個屬性\n    }\n  },\n\n  template: `\n  <div>{{put_text}}</div>`\n}); ",
            "labelLink": "#Prop 必填字符串 - required"
        },
        {
            "value": "6.4.6",
            "label": "Prop 預設值 - default",
            "image": "6/-.4.6.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<v-base></v-base>  <!-- 沒有輸入屬性，會自動顯示預設值-->\n\nVue.component(\"v-base\", {\n  props: {\n    put_num: {\n      type: Number,\n      default: 100\n    }\n  },\n\n  template: `\n  <div>{{put_num}}</div>`\n});\n\nnew Vue({\n  data: {\n    dnum: \"\"\n  }\n}).$mount(\"\"#app)",
            "labelLink": "#Prop 預設值 - default"
        },
        {
            "value": "6.4.7",
            "label": "Parent多筆值給Child - prop:{}",
            "image": "6/-.4.7.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<v-base></v-base>\n\nVue.component(\"v-base\", {\n  props: {\n    put_text: {\n      type: String,\n      default: \"測試文字\"\n    },\n\n    put_num: {\n      type: Number,\n      default: 100\n    }\n  },\n  template: `<div>{{put_text}} {{put_num}}</div>`\n});\n",
            "labelLink": "#Parent多筆值給Child - prop:{}"
        },
        {
            "value": "6.4.8",
            "label": "Parent 傳值給 Grandson - $attrs",
            "image": "6/-.4.8.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "如果有 A-B-C 組件，A 為父組件、C 為孫組件\n\n從 A 傳遞到 C 的過程中，B 尚未定義的 Prop 值，\n使用 $attrs 就不需要再重複撰寫 prop ，\n並可完成父組件傳值給孫組件\n\n一旦有使用過的 prop 值，就無法繼續讓子孫曾使用，\n如 da、db、dc、dd\nA 層prop使用 da，<B v-bind=\"$attrs\"></B> //往下傳遞 db、dc、dd\nB 層prop使用 db、dc，<C v-bind=\"$attrs\"></C> //往下傳遞 dd\nC 層 //只有接收 dd 這個資料，其他 da、db、dc 都沒有接收到\n\nlet vc = {\n  props:[\"text\"] //使用 text，尚未使用 age\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-c\": vc\n  },\n  created() {\n    console.log(this.$attrs); // A 組件資料\n  }\n}\n\nlet vB = {\n  props:[\"msg\"] //使用 msg，尚未使用 text\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-c\": vc\n  },\n  created() {\n    console.log(this.$attrs); // A 組件資料\n  }\n}\n\nlet vA = {\n  data(){\n    return{\n      text: \"A 組件資料\",\n      msg: 100\n    }\n  },\n  template: `<div><v-b :text=\"text\" :msg=\"msg\"></v-b></div>`,\n  components:{\n    \"v-b\": vb\n  }\n}",
            "labelLink": "#Parent 傳值給 Grandson - $attrs"
        },
        {
            "value": "6.5",
            "label": "子傳父 ($emit v-on)",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "如果父組件使用 props 傳遞數據給子組件，但如果子組件要把數據傳遞回去，就需要使用自定義事件\n\n你可以使用 v-on 綁定自定義事件，每個 vue 實例都實現事件接口，即:\n1.使用 $on(eventName) 監聽事件\n2.使用 $emit(eventName) 觸發事件\n\n父組件可以使用子組件的地方直接使用 v-on 監聽子組件觸發的事件。\n\n\n參考資料\n菜鳥教程 - Vue 組件\nhttps://www.runoob.com/vue2/vue-component.html",
            "labelLink": "#子傳父 ($emit v-on)"
        },
        {
            "value": "6.5.1",
            "label": "Child 觸發 Parent - $emit、v-on",
            "image": "6/-.5.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "**快速子組件修改父組件資料的方法\n可以不在子組件內，設定 data，於父組件設定 data，透過 prop 傳遞進父組件的資料，再用子組件去觸發原本父組件的事件調正這個 prop 的值。\n\nv-emit 為自訂觸發名稱\n要特別注意自訂觸發名稱，不可有大寫，否則會錯誤\n\n分別於 Child template button 內，\n      寫上 @click=\"childHandler\" //註冊函數(子)\n分別於 Child methods childHandler(){} 內，\n      寫上 this.$emit('v-emit') //註冊觸發名稱\n\n分別於 Parent 的 Child 組件上，\n      使用 @v-emit=\"parentHandler\" //使用自定義名稱與函數\n分別於 Parent methods parentHandler(){} 內， //註冊函數(父)\n      寫上函數執行內容\n\n//Parent\ndiv\n p total\n v-base(@v-emit=\"parentHandler\")\n\n//Child\nlet vBase = Vue.component(\"v-base\", {\n  data() {\n    return {\n      counter: 0\n    };\n  },\n  template: `\n  <div class=\"vBase\">\n      VBase {{counter}} \n    <button @click=\"childHandler\">\n      按鈕\n    </button>\n  </div>`,\n  methods: {\n    childHandler() {\n      this.counter += 1;\n      this.$emit(\"v-emit\");\n    }\n  }\n});\n\n//Parent\ndata() {\n  return {\n    total: 0\n  };\n},\nmethods: {\n  parentHandler() {\n    this.total += 1;\n  }\n},\ncomponents: {\n  \"v-base\": vBase\n}",
            "labelLink": "#Child 觸發 Parent - $emit、v-on"
        },
        {
            "value": "6.5.2",
            "label": "Child 觸發 Farent(傳參) - $emit、v-on",
            "image": "6/-.5.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "透過傳遞參數的方式，才傳遞子組件 data 到 父組件 data\n\n分別於 Child template button 內，\n      寫上 @click=\"childHandler(12)\" //傳遞參數\n分別於 Child methods childHandler(val){} 內，\n      寫上 this.$emit('v-emit',val) //註冊觸發名稱，並傳送參數\n\n分別於 Parent 的 Child 組件上，\n      使用 @v-emit=\"parentHandler\" //此處就不需要再傳入參數\n分別於 Parent methods parentHandler(val){} 內， //接收參數，並使用\n      寫上函數執行內容",
            "labelLink": "#Child 觸發 Farent(傳參) - $emit、v-on"
        },
        {
            "value": "6.5.3",
            "label": "Child 觸發 Farent - .native、$emit",
            "image": "6/-.5.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 .native 就可以直接使用這個元素上的屬性與資料\n簡單來說就是使用父層上的 methods,不用再透過 @emit 事件監聽子組件內的觸發後，再回來觸發。\n適用於最底層基礎的組件，自訂 button\n\n//自定義組件 v-button 組件\ntemplate\n button(type=\"button\" @click=\"clickHandler\")\n\nmethods:{\n  clickHandler(){\n    this.$emit('vclick')\n  }\n}\n\n//引用 v-button 組件\nv-button(@click=\"clickHandler @vclick=\"vClickHandler\")\n\nmethods:{\n  clickHandler () {\n    alert('onclick') // 此處不會執行，因為組件中未定義 click 事件\n  },\n  vClickHandler () {\n      alert('onvclick') // 觸發 vclick 自定義事件\n  }\n}\n\n// 則如果將下面修改成\nv-button(@click.native=\"clickHandler @vclick=\"vClickHandler\")\n那麼兩個事件都會執行\n\n\n參考資料\nVue 中自定義按鈕組件為什麼要加 .native\nhttps://segmentfault.com/q/1010000011186651/a-1020000011187890",
            "labelLink": "#Child 觸發 Farent - .native、$emit"
        },
        {
            "value": "6.5.4",
            "label": "Farent 間接使用 Child data - .native",
            "image": "6/-.5.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "v-item(\n  v-for=\"item in listOne\"\n  :list=\"item\"\n  :key=\"item.id\"\n  @click.native=\"add(item)\"\n  )\n\nlet vItem = Vue.component(\"v-item\", {\n  props: {\n    list: Object\n  },\n  template: `\n  <div class=\"vItem\">\n    <ul>\n     <li>{{list.label}} -- {{list.value}}</li>\n    </ul>\n  </div>`\n});\n\ndata() {\n  return {\n    listOne: [\n      { label: \"A\", value: 001 },\n      { label: \"B\", value: 002 },\n      { label: \"C\", value: 003 }\n    ]\n  };\n},\nmethods: {\n  add(val) {\n    alert(val.label);\n  }\n},\ncomponents: {\n  \"v-item\": vItem\n}",
            "labelLink": "#Farent 間接使用 Child data - .native"
        },
        {
            "value": "6.6",
            "label": "兄傳弟 (EventBus)",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "eventBus 透過 emit 來發送資料，擁有 data、methods 等屬性可以使用。\neventBus 也像元件一樣也擁有 data 屬性可儲存，這可以讓我們自由運用。\neventBus 使用上非常方便，但維護性不高，最好把握幾個原則:\n\n1.僅限於同層的兄弟元件通訊，父子通訊透過 Props / $emit 來進行溝通\n2.eventBus缺點是記憶體會殘留，有監聽的地方要記得去清除，像是beforeDestroy等。\n3.專案規模很大，可以考慮用 vuex來管理共同狀態。\n\n鉤子\nbeforeCreate() 註冊事件\nbeforeDestroy() 註銷事件\n\n函數\n$destroy() 清除它與其他實例的連結，解綁它全部指令及事件監聽器\n$off() 移除所有事件的監聽\n\n參考資料\nVue 元件之間的傳話筒 總整理\nhttps://wualnz.com/Vue-%E5%85%83%E4%BB%B6%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E8%A9%B1%E7%AD%92-%E7%B8%BD%E6%95%B4%E7%90%86/",
            "labelLink": "#兄傳弟 (EventBus)"
        },
        {
            "value": "6.6.1",
            "label": "本地監聽事件 - this.$on",
            "image": "6/-.6.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "beforeCreate() 與 beforeDestroy() el 建立前與 el 註銷\n$on 監聽自定義事件要在事件前被監聽。所以例子中在生命週期 beforeCreate 就開始了監聽自定義事件。\n\ndiv\n p {{ms}}\n input(type=\"text\" @click=\"aler()\")\ndata() {\n  return {\n    ms: \"123\"\n  };\n},\nbeforeCreate() {\n  // 監聽觸發\n  this.$on(\"start\", (arg) => {\n    alert(arg)\n  })\n},\nbeforeDestroy(){\n  this.$off(\"start\",arg)\n},\nmethods: {\n  aler() {\n    // 觸發點\n    this.$emit(\"start\", \"監聽器聽到 start 函數被觸發\")\n    this.ms = \"methods 觸發\"\n  }\n}",
            "labelLink": "#本地監聽事件 - this.$on"
        },
        {
            "value": "6.6.2",
            "label": "兄弟間監聽事件 - EventBus.$on",
            "image": "6/-.6.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "let EventBus = new Vue(); //建立資料傳遞的橋樑\nEventBus.$destroy();  $destroy 清除它與其他實例的連結，解綁它全部指令及事件監聽器\nEventBus.$off();  $off() 移除所有事件的監聽\n\ndiv\n h2 兄層\n p {{ms}}\n input(type=\"text\" v-model=\"inputData\" @change=\"toGive()\" placeholder=\"傳值給兄弟\")\n v-base\n\nlet VBase = Vue.component(\"v-base\",{\n  data(){\n    return{\n       changeData:\"\"\n    }\n  },\n  template:`<div>\n    <h2>弟層</h2>\n    <input type=\"text\" @click=\"aler()\">\n    <p>{{changeData}}</p>\n  </div>`,\n  beforeCreate(){\n      // 監聽 B 觸發\n      EventBus.$on(\"toGive\",(val)=>{\n      this.changeData = val\n    })\n  },\n  beforeDestroy(){\n    EventBus.$destroy();\n  },\n  methods:{\n    aler(){\n      // 觸發點 A\n      EventBus.$emit(\"start\",\"Child: 監聽器聽到 start 函數被觸發\")\n    }\n  }\n})\n\nlet EventBus = new Vue(); //建立資料傳遞的橋樑\n\ndata(){\n  return{\n    ms: \"123\",\n    inputData: \"\"\n  }\n},\nbeforeCreate:function(){\n  // 監聽 A 觸發\n    EventBus.$on(\"start\",(arg)=>{\n    alert(`這裡是 Parent: ${arg}`)\n  })\n},\nbeforeDestroy(){\n   EventBus.$destroy();\n},\nmethods:{\n  toGive(){\n    // 觸發點 B\n    EventBus.$emit(\"toGive\",this.inputData)\n    console.log(this.inputData)\n  }\n},\ncomponents:{\n  \"v-base\": VBase\n}",
            "labelLink": "#兄弟間監聽事件 - EventBus.$on"
        },
        {
            "value": "6.6.3",
            "label": "EventBus 方法 - methods",
            "image": "6/-.6.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "eventBus 除了可以讓子元件平行溝通外，\n也能建立 methods 方法，並讓元件們共用。\nlet EventBus = new Vue({\n  methods:{\n    changeAge(age){ //1\n      this.$emit('changeAge', `${age} 歲`) //2\n    }\n  }\n});\n組件間可以透過 EventBus 來觸發 methods，\n將 EventBus 內的 methods 名稱(1)與，\nmethods 內的觸發事件名稱(2)設定一樣，減少查詢名稱上的問題。\n\nBig Brother\ndiv(id=\"app\")\n p 兄: {{userAge}}</p> <button @click=\"editAge()\">按鈕\n v-base\n\nlet EventBus = new Vue({\n  methods:{\n    changeAge(age){ //1\n      this.$emit('changeAge', `${age} 歲`) //2\n    }\n  }\n});\nnew Vue({\n  data(){\n    return{\n      userAge:\"\"\n    }\n  },\n  methods:{\n    editAge(){\n      this.userAge = 30;\n      EventBus.changeAge(this.userAge)\n    }\n  },\n  components:{\n    \"v-base\": VBase\n  }\n\nLitter Brother\nlet VBase = Vue.component('v-base',{\n  data(){\n    return{\n      data: \"\"\n    }\n  },\n  template:`<div>HaHa 弟: {{data}}</div>`,\n  beforeCreate(){\n    EventBus.$on(\"changeAge\",(age)=>{\n      this.data = age\n    })\n  },\n  beforeDestroy(){\n     EventBus.$off(\"changeAge\",age);\n  },\n})",
            "labelLink": "#EventBus 方法 - methods"
        },
        {
            "value": "6.6.4",
            "label": "Vue Router & EventVus",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Event Bus 的 $on 監聽事件不會因為元件被銷毀而取消監聽，必須自己手動取消。\n參考資料\nVue 中的 Event Bus 跟 Router 撞出新地雷\nhttps://medium.com/@ceall8650/vue%E4%B8%AD%E7%9A%84event-bus%E8%B7%9Frouter%E6%92%9E%E5%87%BA%E6%96%B0%E5%9C%B0%E9%9B%B7-5d3e52545cec",
            "labelLink": "#Vue Router & EventVus"
        },
        {
            "value": "6.7",
            "label": "Computed",
            "image": "6/-.7.png",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-在 Vue 中 computed 是經常會使用到的屬性，\n因為在 Vue 中透過 computed 會 cache 住沒有改變的資料，\n因此正確且適當的使用 computed 將可以減少資料重新運算的次數，\n讓網頁的效能提升。\n-使用 computed 計算時，盡量以兩個單位之間做計算。\n\n實體範例:商品計算\n-會員有三個級別，分別為 Lv:1、Lv:2 與 Lv:3\n-會員的三個級別，分別折扣為 0.95%、0.9%、0.8%\n-一般商品買超過一千則回饋一百，條件為會員折扣後仍需滿\n一千元以上才符合回饋",
            "labelLink": "#Computed"
        },
        {
            "value": "6.7.1",
            "label": "回傳 - get ()",
            "image": "6/-.7.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "computed 計算屬性，使用 data 屬性內的值，透過 return \n回傳一個新的變動資料到 HTML 上。\n有兩種方式撰寫\n// 第一種，Object 方式\nchangeOne:{\n get(){\n  return this.message + \" change One\";\n }\n}\n// 第二種， Function 方式\nchangeTwo:function(){\n  return this.message + \" change Two\";\n}\n\ndiv\n input(type=\"text\" v-model=\"message\")\n div {{changeOne}}\n div {{changeTwo}}\ndata() {\n  return {\n    message: \"hello\"\n  };\n},\ncomputed: {\n  changeOne: {\n    // 計算屬性:依賴 message 變化而變化， \n    // 依賴沒變化就不會重新渲染\n    get() {\n      return this.message + \" change One\";\n    }\n  },\n  changeTwo: function() {\n    return this.message + \" change Two\";\n  }\n}\n",
            "labelLink": "#回傳 - get ()"
        },
        {
            "value": "6.7.2",
            "label": "設定 - set ()",
            "image": "6/-.7.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 get() 與 set() 回傳賦予的值\n\ndiv\n button(@click=\"clickComputed()\") Setting Computed\n div 原始資料: {{didi}} {{family}}\n div Computed: {{didiFamily}}\n div Set Computed: {{set}}\n\ndata() {\n  return {\n    didi: \"didi\",\n    family: \"family\"\n  };\n},\ncomputed: {\n  didiFamily: {\n    //getter\n    get() {\n      return this.didi + \" \" + this.family;\n    },\n    set(newValue) {\n      // setter\n      console.log(newValue);\n      this.didi = 123;\n      this.family = 456;\n    }\n  }\n},\nmethods: {\n  //賦值，調用 setter\n  clickComputed() {\n    this.didiFamily = \"John Don\";\n  }\n}",
            "labelLink": "#設定 - set ()"
        },
        {
            "value": "6.7.3",
            "label": "與 v-for 計算",
            "image": "6/-.7.3.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  <ul>\n    <li v-for=\"n in evenNumbers\">{{ n }}</li>\n  </ul>\n</div>\n\nlet vm = new Vue({\n  data: {\n    numbers: [1, 2, 3, 4, 5]\n  },\n  computed: {\n    evenNumbers: function() {\n      return this.numbers.filter(function(number) {\n        return number % 2 === 0\n      })\n    }\n  }\n}).$mount('#app')\n\n參考資料\nVue-component filter data\nhttps://codepen.io/azpact/pen/LowXEN",
            "labelLink": "#與 v-for 計算"
        },
        {
            "value": "6.7.4",
            "label": "get & set",
            "image": "6/-.7.4.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  {{site}} \n</div>\n\nlet vm = new Vue({\n  el:'#app',\n  data:{\n    name:'Google',\n    url: 'http://www.google.com'\n  },\n  computed: {\n    site: {\n      // getter\n      get: function () {\n        return this.name + ' ' + this.url\n      },\n      // setter\n      set: function (newValue) {\n        let names = newValue.split(' ')\n        this.name = names[0]\n        this.url = names[names.length - 1]\n      }\n    }\n  }\n})\n\n參考資料\nVue-computed\nhttps://codepen.io/azpact/pen/mYLRgd",
            "labelLink": "#get & set"
        },
        {
            "value": "6.8",
            "label": "Vue Transition",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "1.增加顯示與隱藏的判斷式\ndata(){\n return{\n  isShow:false\n }\n}\n\n2.增加 transition 標籤及 v-if 進場與隱藏控制\ntransition(\n  enter-active-class=\"messageBox-enter-active\"\n  leave-active-class=\"messageBox-leave-active\"\n)\n div(v-if=\"isShow\") show thing..\n\n3.撰寫 css 進場與隱藏的時間\n.messageBox-enter-active {\n  animation: goMessageBox 1s;\n}\n.messageBox-leave-active {\n  animation: backMessageBox 1s;\n}\n\n4.撰寫進場與隱藏的動畫\n@keyframes backFeatures {\n  from {\n    opacity: 1;\n    margin-bottom: 0;\n  }\n  to {\n    opacity: 0;\n    margin-bottom: -12%;\n  }\n}\n@keyframes goMessageBox {\n  from {\n    margin-left: -10%;\n    opacity: 0;\n  }\n  to {\n    margin-left: 0;\n    opacity: 1;\n  }\n}",
            "labelLink": "#Vue Transition"
        },
        {
            "value": "6.8.1",
            "label": "按鈕點擊進場與出場",
            "image": "6/-.8.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "按鈕點擊進場與出場的動畫\n\n\n<div id=\"app\">\n  <button @click=\"show = !show\">Toggle</button>\n  <transition \n    enter-active-class=\"fade-enter-active\" \n    leave-active-class=\"fade-leave-active\">\n    <div class=\"block\" v-if=\"show\"></div>\n  </transition>\n</div>\n\n參考資料\nVue-animations\nhttps://codepen.io/azpact/pen/OKWQov",
            "labelLink": "#按鈕點擊進場與出場"
        },
        {
            "value": "6.8.2",
            "label": "按鈕點擊進場與出場",
            "image": "6/-.8.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "反覆按下按鈕，使動畫移出與移入\n\n1.按下按鈕讓 show=!show 反覆顯示動畫內容 \n2.將動畫寫在<transition name=\"xx\">元素內 \n3.name=\"xx\" xx 為自訂 css 樣式自訂名稱\n\n參考資料\nVue-transition\nhttps://codepen.io/azpact/pen/zQPgOY",
            "labelLink": "#按鈕點擊進場與出場"
        },
        {
            "value": "6.9",
            "label": "生命週期鉤子",
            "image": "6/-.9.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "生命週期鉤子表示元素的創立與毀滅。\n\nbeforeCreate: function() {\n  console.log(`beforeCreate:My name is ${this.name}`);\n}, //1\ncreated: function() {\n  console.log(`created:My name is ${this.name}`);\n  // 已可存取 this.$data\n}, //2\nbeforeMount: function() {\n  console.log(`beforeMount:My name is ${this.name}`);\n}, //3\nmounted: function() {\n  console.log(`mounted:My name is ${this.name}`);\n  // 已可存取 this.$el\n}, //4\nbeforeUpdate: function() {\n  console.log(`beforeUpdate:My name is ${this.name}`);\n}, //5\nupdated: function() {\n  console.log(`updated:My name is ${this.name}`);\n  // 狀態已更新\n}, //6\nbeforeDestroy: function() {\n  console.log(\"beforeDestroy\");\n  // 可以用來清除事件綁定\n}, //7\ndestroyed: function() {\n  console.log(\"destroyed\");\n  // 實例被銷毀\n}",
            "labelLink": "#生命週期鉤子"
        },
        {
            "value": "6.9.1",
            "label": "關於 beforeCreate & beforeDestroy",
            "image": " 6/-.10.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 EevnBus 時，需要在這兩個階段中撰寫程式碼\n\nbeforeCreate(){\n  // 註冊事件名\n  EventBus.$on(\"fMessageBox\",(val)=>{\n    this.fMessageBox(val,\"\")\n  })\n},\nbeforeDestroy(){\n  // 銷毀事件名\n  EventBus.$off(\"fMessageBox\",val,text)\n // 或是註銷事件與移除實例 (兩者功能些許相同)\n  EventBus.$destroy()\n}",
            "labelLink": "#關於 beforeCreate & beforeDestroy"
        },
        {
            "value": "6.10",
            "label": "Created",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "mouted 與 created 的區別，\ncreated: 在模板渲染成 Html 前調用，即通常初始化\n某些屬性值，然後再渲染成視圖。\nmouted: 在模板渲染成 Html 後調用，通常是初始化\n頁面完成後，再對 html 的 DOM 的節點進行一些操作。\n\n參考資料\nVue生命周期中mounted和created的區別\nhttps://blog.csdn.net/xdnloveme/article/details/78035065",
            "labelLink": "#Created"
        },
        {
            "value": "6.10.1",
            "label": "全局監聽鍵盤帶入 data - 原型",
            "image": "6/-.10.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "document.onkeydown 監聽全局事件\n\ndata() {\n  return {\n    message: \"\"\n  };\n},\ncreated() {\n  // 全局監聽鍵盤事件\n  let vm = this;\n  document.onkeydown = function(e) {\n    let key = window.event.keyCode;\n    vm.message = key;\n  };\n}",
            "labelLink": "#全局監聽鍵盤帶入 data - 原型"
        },
        {
            "value": "6.10.2",
            "label": "全局監聽鍵盤帶入 function",
            "image": "6/-.10.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "created()鉤子，使用 methods 內的事件\n\nmethods: {\n  up(val) {\n    this.message = `${val} 上`;\n  },\n  down(val) {\n    this.message = `${val} 下`;\n  },\n  left(val) {\n    this.message = `${val} 左`;\n  },\n  right(val) {\n    this.message = `${val} 右`;\n  }\n},\ncreated() {\n  // 全局監聽鍵盤事件\n  let vm = this;\n  document.onkeydown = function(e) {\n    let key = window.event.keyCode;\n    switch (key) {\n      case 38:\n        vm.up(key);\n        break;\n      case 40:\n        vm.down(key);\n        break;\n      case 37:\n        vm.left(key);\n        break;\n      case 39:\n        vm.right(key);\n        break;\n      default:\n        break;\n    }\n  };\n}",
            "labelLink": "#全局監聽鍵盤帶入 function"
        },
        {
            "value": "6.11",
            "label": "v-html",
            "image": "6/-.11.png",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "插入 HTML 元素\n\n<div id=\"app\">\n  <div v-html=\"message\"></div>\n</div>\n\nlet vm = new Vue({\n  data: {\n    message: '<a href=\"#!\">我是超連結</a>'\n  }\n}).$mount('#app')",
            "labelLink": "#v-html"
        },
        {
            "value": "6.12",
            "label": "directives 自訂指令",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用 directives 自訂指令。",
            "labelLink": "#directives 自訂指令"
        },
        {
            "value": "6.12.1",
            "label": "限制輸入為數字",
            "image": "6/-.12.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "限制輸入僅為數字\n\n1.指令 v-number-only \n2.利用自定義指令裡的鉤子函數，來處理被綁定的元素\n\n<div id=\"app\">\n <input type=\"text\" v-number-only />\n</div>\n\nlet vm = new Vue({\n  directives: {\n    numberOnly: {\n      bind: function(el) {\n        el.handler = function() {\n          el.value = el.value.replace(/\\D+/, '')\n        }\n        el.addEventListener('input', el.handler)\n      },\n      unbind: function(el) {\n        el.removeEventListener('input', el.handler)\n      }\n    }\n  }\n}).$mount('#app')\n\n參考資料\nVue-directives limit input number\nhttps://codepen.io/azpact/pen/mZdzNe",
            "labelLink": "#限制輸入為數字"
        },
        {
            "value": "6.12.2",
            "label": "避免語法與後端發生錯誤",
            "image": "6/-.12.2.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  <h1>避免語法與後端發生錯誤</h1>\n  ${ message }\n</div>\n\nlet vm = new Vue({\n  delimiters: ['${', '}'],\n  data: {\n    message: 'Hello Vue.js'\n  }\n}).$mount('#app')\n\n參考資料\n避免語法與後端發生錯誤\nhttps://codepen.io/azpact/pen/oROwBM",
            "labelLink": "#避免語法與後端發生錯誤"
        },
        {
            "value": "6.13",
            "label": "Vue 與 DOM",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Vue methods 上與 DOM 的處理。",
            "labelLink": "#Vue 與 DOM"
        },
        {
            "value": "6.13.1",
            "label": "Vue 與 DOM",
            "image": "6/-.13.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<button @click=\"greet()\" value=\"ValBtn\">\nmethods: {\n    greet() {\n      if (event) {\n        this.aMessage = event.target.tagName\n        this.bMessage = event.target.innerText\n        this.cMessage = event.target.value\n        this.dMessage = event.target.baseURI\n        this.eMessage = event.timeStamp\n        this.fMessage = event.target.textContent\n      }\n    }\n  }\n\nevent.target.tagName // 取得元素的標籤名稱\nevent.target.innerText // 取得元素內的文字\nevent.target.value // 取的元素的 value 值\nevent.target.baseURI // 回傳節點的絕對網址\nevent.timeStamp // 回傳事件建立的時間(毫秒)\nevent.target.textContent // 取得元素內的內容\n\n參考資料\nVue-DOM event\nhttps://codepen.io/azpact/pen/BeXGpx",
            "labelLink": "#Vue 與 DOM"
        },
        {
            "value": "6.13.2",
            "label": "傳遞元素 $event",
            "image": "6/-.13.2.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<button @click=\"onlyEvent($event)\">傳event參數</button>\n\nmethods:{\n  onlyEvent(event) {\n      if (event) {\n        this.dMessage = event.target.innerText\n      }\n    }\n}\n\n參考資料\nVue-methods $event\nhttps://codepen.io/azpact/pen/XwvwNP",
            "labelLink": "#傳遞元素 $event"
        },
        {
            "value": "6.14",
            "label": "watch",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Watch 監聽",
            "labelLink": "#watch"
        },
        {
            "value": "6.14.1",
            "label": "監聽屬性 $watch",
            "image": "6/-.14.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n <p>舊值與新值的變化： {{oval}} > {{nval}}!</p>\n <p>計數器：{{counter}}</p>\n <button class=\"btn\" @click=\"counter++\">點我</button>\n</div>\n\nlet vm = new Vue({\n  el:'#app',\n  data:{\n    counter:0,\n    oval:0,\n    nval:'-'\n  }\n   \n})\nvm.$watch('counter', function (nval, oval) {\n   this.oval = oval\n   this.nval = nval\n}); \n\n參考資料\nVue-$watch\nhttps://codepen.io/azpact/pen/LKYRxj",
            "labelLink": "#監聽屬性 $watch"
        },
        {
            "value": "6.15",
            "label": "v-if & v-else",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "v-if & v-else",
            "labelLink": "#v-if & v-else"
        },
        {
            "value": "6.15.1",
            "label": "按鈕切換顯示畫面",
            "image": "6/-.15.1.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  目前顯示狀態 {{ isShow }}\n  <div v-if=\"isShow\">\n    <span>顯示資料 A</span>\n  </div>\n  <div v-else=\"isShow\">\n    <span>顯示資料 B</span>\n  </div>\n  <button @click=\"toggle\">切換顯示條件</button>\n</div>\n\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    isShow: true\n  },\n  methods: {\n    toggle() {\n      this.isShow = !this.isShow\n    }\n  }\n})\n\n參考資料\nVue-v-if&v-else 按鈕切換\nhttps://codepen.io/azpact/pen/MdGggd\n",
            "labelLink": "#按鈕切換顯示畫面"
        },
        {
            "value": "6.16",
            "label": "v-for",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "v-for",
            "labelLink": "#v-for"
        },
        {
            "value": "6.16.1",
            "label": "物件陣列處理",
            "image": "6/-.16.1.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "一層資料\narray\nobject\n\n二層資料\n物件下陣列\n物件下物件\n\n參考資料\nVue-v-for Obj&Array\nhttps://codepen.io/azpact/pen/qGMyxR",
            "labelLink": "#物件陣列處理"
        },
        {
            "value": "6.16.2",
            "label": "同時顯示物件與非物件",
            "image": "6/-.16.2.png",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  <h1>v-for 嵌入物件與非物件</h1>\n  <ul>\n    <li v-for=\"(val,key) in instanceList\">\n      <p v-if=\"typeof val!='object'\">{{ val }}</p>\n      <p v-else>{{ key }}</p>\n      <ul v-if=\"typeof val=='object'\">\n        <li v-for=\"(val,key) in val\">\n          {{ val.own }} / {{ val.content }} / {{ val.contentText }} /\n          {{ val.url }}\n        </li>\n      </ul>\n    </li>\n  </ul>\n</div>\n\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    instanceList: {\n      name: '非物件資料a',\n      text: [\n        {\n          own: true,\n          content: '文字資料標題',\n          contentText: '文字資料內容a',\n          url: 'aaa'\n        },\n        {\n          own: true,\n          content: '文字資料標題',\n          contentText: '文字資料內容b',\n          url: 'bbb'\n        }\n      ],\n      data: [\n        {\n          own: true,\n          content: '資料資料標題',\n          contentText: '資料資料內容a',\n          url: 'aaa'\n        },\n        {\n          own: true,\n          content: '資料資料標題',\n          contentText: '資料資料內容b',\n          url: 'bbb'\n        }\n      ]\n    }\n  }\n})\n\n參考資料\nVue-v-for Obj&no-Obj\nhttps://codepen.io/azpact/pen/arqGde",
            "labelLink": "#同時顯示物件與非物件"
        },
        {
            "value": "6.17",
            "label": "v-on",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "v-on",
            "labelLink": "#v-on"
        },
        {
            "value": "6.17.1",
            "label": "vue 所有觸發事件",
            "image": "6/-.17.1.gif",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "@click=\"onClick()\"\n@click=\"onClickClass\"\n@mouseover=\"onMouseenter()\"  //滑鼠移入\n@mouseout=\"onMouseleave()\" //滑鼠移出\n@keydown.enter //鍵盤 enter 事件\n\n參考資料\nVue-Methods Event\nhttps://codepen.io/azpact/pen/arxVow",
            "labelLink": "#vue 所有觸發事件"
        },
        {
            "value": "6.18",
            "label": "修飾符",
            "image": "6/-.18.gif",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "<div id=\"app\">\n  <a v-on:click.stop=\"doThis\"></a>\n  <!-- 阻止單擊事件冒泡 -->\n  <form v-on:submit.prevent=\"onSubmit\"></form>\n  <!-- 提交事件不再重載頁面 -->\n  <a v-on:click.stop.prevent=\"doThat\"></a>\n  <!-- 修飾符可以串聯  -->\n  <form><button v-on:submit.prevent>按鈕</button></form>\n  <!-- 只有修飾符 -->\n  <div v-on:click.capture=\"doThis\">18 to 20</div>\n  <!-- 添加事件監聽器時使用事件捕獲模式 -->\n  <!-- 只當事件在該元素本身（而不是子元素）觸發時處發回調 -->\n  <div v-on:click.self=\"doThat\">alert text</div>\n  <a v-on:click.once=\"doThis\"></a\n  ><!-- click 事件只能点击一次-->\n  <input v-model.lazy=\"msg\" /> //在 \"change\" 而不是 \"input\" 事件中更新\n  <input v-model.number=\"age\" type=\"number\" /> //將輸入值自動轉為 Number類型\n  <input v-model.trim=\"msg\" /> //過濾輸入值的頭尾空白\n</div>\n\n修飾符\nhttps://codepen.io/azpact/pen/bPGWqp",
            "labelLink": "#修飾符"
        },
        {
            "value": "6.19",
            "label": "Vue.filter",
            "image": "6/-.19.png",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "使用 filter\n<span>{{ ms | fourSpace}}</span>\n//每四個字隔一個空格\nVue.filter('fourSpace', function(val) {\n  if (val) {\n    return val.replace(/\\s/g, '').replace(/(.{4})/g, \"$1 \")\n  }\n});\n//去除最左最右邊空格\nVue.filter('noGap', function(val) {\n  let str = val.trim();\n  return str\n});\n//金錢三位一逗號，小數位保留兩位\nVue.filter('money', function(val) {\n  val = val.toString().replace(/\\$|\\,/g, '');\n  if (isNaN(val)) {\n    val = \"0\";\n  }\n  let sign = (val == (val = Math.abs(val)));\n  val = Math.floor(val * 100 + 0.50000000001);\n  let cents = val % 100;\n  val = Math.floor(val / 100).toString();\n  if (cents < 10) {\n    cents = \"0\" + cents\n  }\n  for (var i = 0; i < Math.floor((val.length - (1 + i)) / 3); i++) {\n    val = val.substring(0, val.length - (4 * i + 3)) + ',' + val.substring(val.length - (4 * i + 3));\n  }\n    return (((sign) ? '' : '-') + val + '.' + cents);\n  })\n  //電話號碼過濾\n  Vue.filter('telFormat', function(val) {\n    if (val) {\n      return val.replace(/^(.{3})(?:\\d+)(.{4})$/, \"$1****$2\")\n    }\n  });\n  //身分證字號過濾\n  Vue.filter('idcardFormat', function(val) {\n    if (val) {\n      return val.replace(/^(.{4})(?:\\d+)(.{3})$/, \"$1***$2\")\n    }\n});\n\n參考資料\nVue 常用過濾器\nhttps://blog.csdn.net/dylan_zeng92/article/details/77850143",
            "labelLink": "#Vue.filter"
        },
        {
            "value": "7",
            "label": "Vue 組件庫",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "自訂的 vue 組件庫",
            "labelLink": "#Vue 組件庫"
        },
        {
            "value": "7.1",
            "label": "v-button",
            "image": "7/-.7.1.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "說明\n<v-button 屬性 @click.native=\"add()\">\n\n//@click.native=\"function()\"，.native 使用父層的事件\n\n屬性:\nname，v-button name\n\n樣式:\n#Vbutton\n\n範例:\ntemplate\n{{ms}}\n<v-button \n  name=\"你好\" \n  @click.native=\"add()\">\n</v-button>\n\nscript\nVue.component(\"v-button\", {\n  props: {\n    name:{\n      type: String,\n      default: \"button\"\n    }\n  },\n  template: `\n   <div id=\"VButton\">\n    <button>{{name}}</button>\n   </div>`\n});\nnew Vue({\n  data: {\n    ms: \"123\"\n  },\n  methods:{\n    add(){\n      this.ms = \"456\"\n    }\n  }\n}).$mount(\"#app\");\n ",
            "labelLink": "#v-button"
        },
        {
            "value": "7.2",
            "label": "v-registered-page 表單註冊頁",
            "image": "7/-.7.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "組件<v-registered-page>\n網站會員，表單註冊頁\n\n參考資料\nvue-表單註冊\nhttps://codepen.io/azpact/pen/byPNXr",
            "labelLink": "#v-registered-page 表單註冊頁"
        },
        {
            "value": "8",
            "label": "Vue Cli 4",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "\n\nA 組件匯入另一個組件\nhttps://blog.csdn.net/lzzattack03x/article/details/79244687",
            "labelLink": "#Vue Cli 4"
        },
        {
            "value": "8.1",
            "label": "必要知道知識",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "關於 Vue Cli 4 必要知道知識與一些避開碰壁的坑。",
            "labelLink": "#必要知道知識"
        },
        {
            "value": "8.1.1",
            "label": "安裝 vue cli 4",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*舊版本升級\n1.卸載 vue cli 2\nnpm uninstall vue-cli -g\nyarn global remove vue-cli\n\n2.接續 *完整安裝順序\n\n\n*完整安裝順序\n1.安裝 node.js\nnode版本在8.9 以上\nhttps://nodejs.org/zh-tw/download/\n\n2.安裝 npm\n安裝 node.js 的同時會安裝 npm\n\n3.安裝 yarn\nyarn 是由 Facebook 所發佈的一款 JavaScript 套件管理工具，\nYarn 可以解決套件安裝速度及自動調整套件安裝順序的功能。\nYarn 是快速、安全、可靠的。\n\n以下以使用 npm 安裝:\nnpm install -g yarn\nhttps://legacy.yarnpkg.com/en/docs/install/#windows-stable\n\n參考資料\n[Node.js] yarn 安裝教學\nhttps://oranwind.org/node-js-yarn-install/\n\n*檢查安裝版本\n$ node -v\n$ npm -v \n$ yarn -v\n\n4.安裝 vue cli4\nyarn global add @vue/cli",
            "labelLink": "#安裝 vue cli 4"
        },
        {
            "value": "8.1.2",
            "label": "安裝依賴與執行依賴",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "dependencies(專案、執行依賴庫) 與 devDependencies(開發依賴庫)\n\n1.devDependencies 裡面的插件只用於開發環境 。\n（構建工具比如glup、webpack這些只是在開發中使用的）\n\n2.dependencies 是需要發佈到生產環境。\n比如我們寫一個項目要依賴jQuery，沒有這個包的依賴運行就會報錯，\n這時候就把這個依賴寫入dependencies，會被打包進最終的js文件裡。\n＠dev是develop的簡寫。\n\n參考資料\n[npm]dependencies 與devDependencies 的區別\nhttps://dotblogs.com.tw/gra/2018/01/15/224301",
            "labelLink": "#安裝依賴與執行依賴"
        },
        {
            "value": "8.1.3",
            "label": "執行專案",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "要執行專案時，切換至專案目錄並執行\n\n$ npm run dev\n\n以下是由 vue cli 安裝後所設定的指令\n$ vue-cli-service serve //開啟 Server (執行專案)\n$ vue-cli-service build //打包 build (打包專案)\n$ vue-cli-service lint  //檢查 lint\n\n一般來說，這些指令會寫在 package.json 的 scripts 內\n\"scripts\": {\n \"serve\": \"vue-cli-service serve\",\n \"build\": \"vue-cli-service build\",\n \"lint\": \"vue-cli-service lint\"\n}",
            "labelLink": "#執行專案"
        },
        {
            "value": "8.1.4",
            "label": "vue 前後端聯調",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.什麼是前後端聯調?\n當我們在測試時會使用 ajax 數據串自己的假資料，\n如果代碼編寫完畢，後端的接口也寫好後嘗試使用後端提供的數據、\n調用，這個過程我們就可以稱前後端的接口聯調。\n\n2.為什麼要聯調?\n本地端的假資料是自己前端寫的，肯定符合前端需求，\n但是後端街口首先需要測試通不通，格式對不對，\n還有後端有沒有填寫足夠的數據，比如寫列表頁，前端想分頁，\n如果後端就寫了兩條測試數據，你怎麼處理?\n所以根據後端接口的調整。\n\n3.如何實現前後端接口聯調?\n首先，我們已經知道，目前的前後端分離架構應用分為兩種情況\n(1) 前後端完全分離，前後端分別擁有自己的域名和服務器\n(2) 前後端開發分離，但是部署時是一個域名和一台服務器\n\n雖然架構可以採用前後端分離，但是部署有可能就不一樣，\n這和項目的大小，公司的情況等等都有關係了，\n兩種不同的部署情況直接導致前期在設計聯調方案的時候就不同。\n\n(1) 如果你的公司的項目在部署是兩台服務器對應兩個域名，\n恭喜你，這是最好的方案，也是聯調最舒服的方式。\n(2) 如果是前後端分離，部署時是一個域名和一台服務器，\n在項目根目錄的 static 文件夾下新建的 mock 文件夾，\n裡面寫一些 json 文件，當我們做聯調的時候，這些 mock \n數據就沒用了，我們要把 mock 數據切換成後端提供給我們的\n真實數據。\n\nstatic\n|-mock\n  |-index.json\n\n把 static 文件夾下的 mock 數據刪除後，在運行項目，\n發現報錯，瀏覽器告訴你訪問的 mock 下的 index.js 會是 404\n因為，我們平時在本地端開發環境 dev 地址大多\n是 localhost:8080，而後端服務器的訪問地址就是很多情況了，\n譬如後端程序員本地 ip 127.0.0.1:8889，或是外網域名，\n當前後端進行數據交流時，自然會出現跨域問題\n(後台服務沒做處理下)。axios 不支援 jsonp，\n所以我們就要使用 http-proxy-middleware 中間件做代理。\n\n前端修改 vue cli 配置: vue cli 中 config/index.js 下\n配置 dev 選項的 (proxyTable)\n\nconfig\n|-index.js\n\nproxyTable: {\n    '/api': {\n        target: '127.0.0.1:8889', // 真實請求的地址\n        changeOrigin: true,  // 是否跨域\n    }\n}\n\n如果你像在公司的 vue 項目中實現前後端聯調，不需要再使用類似\nfiddler Charles 的抓包代理工具了，\n只需要使用 proxyTable 這個配置項，\n把你需要請求的後端服務器地址寫在 target 值裡就 OK 了\n\n參考資料\nvue 前後端聯調\nhttps://blog.csdn.net/qq_36457584/article/details/80924761",
            "labelLink": "#vue 前後端聯調"
        },
        {
            "value": "8.1.5",
            "label": "打包後-前後端聯調注意事項",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.css、js 和圖片等靜態文件\n(1) 如果你採用相對路徑根目錄的書寫方式來寫靜態文件路徑，\n一定要和後端商量好，將來項目部署的時候他會把你的前端整個\n項目放在哪裡?\n譬如你的 reset 路徑是\n/exports/styles/common/reset.css，\n後端把你的前段項目放在根目錄下的 frontEnd 文件下，\nreset.css 文件就會報 404 了。\n\n如果後端採用 Java，你就需要特別注意的是，Tomcat 的根目錄\n並不是 webapps 文件，後端項目默認是部署在\n webapps/root 文件下的，\n所以你如果使用了相對路徑的書寫方式來寫你的靜態文件路徑時，\n就會報 404 了。\n\n(2) ajax 後端數據\n因為現在唯一的一台服務器還在後端程序員那裡，\n所以此時你還是可以寫絕對路徑(域名+請求路徑)，\n利用 hosts 文件來改變域名映射實現聯調。\n\n參考資料\nvue 前後端聯調\nhttps://blog.csdn.net/qq_36457584/article/details/80924761",
            "labelLink": "#打包後-前後端聯調注意事項"
        },
        {
            "value": "8.1.6",
            "label": "打包後-路徑解決問題",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "解決一: 資源請求問題\n於 src/ 文件夾下建立一個 vue.config.js 文件，並寫入\n\nmodule.exports = {\n  publicPath: process.env.NODE_ENV ===\n   'production' ?\n    './' :\n    '/'\n}\n\n讓 vue.config.js 中為打包後的路徑做為當前目錄路徑 \"./\"\n題外話， baseUrl 於 vuc-cli 3.3 後棄坑，\n所以使用 publicPath\n\n解決二: 路徑解決問題\n因為 vue-router 的模式不同，導致服務器不能夠識別，\n解決方案就是在 router/index.js 中更改路由的訪問模式\n\nconst mode = \"history\"; //預設模式\nconst mode = \"hash\"; //修改成這個模式\n\nconst router = new VueRouter({\n  mode,\n  routes\n});\n\n再次打包後上傳服務器，訪問成功。\n\n\n參考資料\nvue cli 3 build 打包之後路徑錯誤問題\nhttps://blog.csdn.net/wy_Blog/article/details/88914364\nERROR Invalid options in vue.config.js: \"baseUrl\" is not allowed\nhttps://www.jianshu.com/p/f5b3d3c7009f",
            "labelLink": "#打包後-路徑解決問題"
        },
        {
            "value": "8.2",
            "label": "projrctRoot - 專案結構",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "自訂的專案配置",
            "labelLink": "#projrctRoot - 專案結構"
        },
        {
            "value": "8.2.1",
            "label": "public/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*html 和靜態資源目錄結構\n\nprojectRoot\n├── public/\n│    ├── favicon.io\n│    └── index.html\n\n[index.html]\n*關於\npublic/index.html 文件一個會被 html-webpack-plugin\n處理的樣板。在建構過程中，資源連結會被自動注入。\n\n*插植\n因為 index 文件被用作模板，所以你可以使用 lodash template\n語法插入內容\n\n<%= VALUE %> 用來不轉譯插值\n<%- VALUE %> 用來做 HTML 轉譯插值\n<% expression %> 用來描述 JavaScript 流程控制\nBASE_URL 所有客戶端環境變數\n\n<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n\n*public 文件夾\n任何放置在 public 文件夾的靜態資源都會被簡單的複製，\n而不會經過 webpack，你需要通過絕對路徑來引用它們。\n\n建議通過 webpack 處理，public 目錄提供的是一個應急手段。\n\n模板中，導入:\ndata () {\n  return {\n    publicPath: process.env.BASE_URL\n  }\n}\n然後:\n<img :src=\"`${publicPath}my-image.png`\">\n\n\n*何時使用 public 文件夾\n-你需要在建構輸出中指定一個文件名稱\n-你有上千個圖片，需要動態引用它們的路徑\n-有些庫可能和 webpack 不兼容，這時你除了將其用一個獨立的\n<script> 標籤引入沒有別的選擇",
            "labelLink": "#public/"
        },
        {
            "value": "8.2.2",
            "label": "public/ - 處理靜態資源",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*靜態資源可以通過兩種方式處理:\n-在 JavaScript 被引入或在 template/CSS 中通過相對路徑被\n引用。這類引用會被 webpack 處理。\n-放置在 public 目錄下或通過絕對路徑被引用。這類資源將直接被\n拷貝，而不會經過 webpack 的處理。\n\n*從相對路徑引入\n當你在 JavaScrupt、CSS 或 *.vue 文件中使用相對路徑\n(必須以 . 開頭)引用一個靜態資源，該資源將會被包含進入\nwebpack 的依賴途中。所有諸如 <img src=\"...\">、\nbackground: url(...) 和 CSS @import 的資源 URL\n都會被解析為一個模塊依賴\n\n例如，url(./image.png) 會被翻譯為 \nrequire('./image.png') 而\n<img src=\"./image.png\"> 會被編譯為\nh('img',{ attrs: { src:require('./image.png')}})\n\n*URL 轉換規則\n如果 URL 以 @ 開頭，它也會做為一個模塊請求被解析。\n它的用處在於 Vue Cli 默認設置一個指向\n<projectRoot>/src 的別名 @。(僅作用於模板中)\n\n參考資料\nHTML 和靜態資源\nhttps://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E4%BB%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%AF%BC%E5%85%A5",
            "labelLink": "#public/ - 處理靜態資源"
        },
        {
            "value": "8.2.3",
            "label": "src/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "src/\n放置原始碼的地方，也就是開發都在這個目錄下進行\n\nprojectRoot\n├── src/\n│    ├── assets/                # 放置靜態檔案\n│    │    ├── logo.png\n│    ├── components/            # 放置 .vue 元件\n│    │    ├──HelloWorld.vue\n│    ├── router/                # 配置路由\n│    │    ├── index.js         \n│    ├── App.vue                # 根組件\n│    └── main.js                # 入口檔案",
            "labelLink": "#src/"
        },
        {
            "value": "8.2.4",
            "label": "src/main.js",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*code\nimport Vue from \"vue\";\nimport App from \"./App.vue\";    // 載入 App 元件\nimport store from \"./store\";\nimport router from \"./router\";  // 載入路由\n\n// install node_modules\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\n\nVue.config.productionTip = false; //開發環境提示，預設為 false\n\nnew Vue({\n  store,\n  router,\n  render: h => h(App)\n}).$mount(\"#app\");\n\n*關於 main.js\nmain.js 是整個專案的入口檔案，也是 webpack 打包的入口檔案\n要使用 .vue 元件的話都記得要先 import！\n",
            "labelLink": "#src/main.js"
        },
        {
            "value": "8.2.5",
            "label": "src/App.vue",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*code\n<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <!-- 路由渲染區域 -->\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n\n*關於 App.vue\nApp.vue 是專案的入口頁面，<router-view/>則是路由的渲染區域。\nvue 代表的是單一元件檔案 (single-file components)，\n通常分成三部分：<template>、<script>、<style>，\n需要經由 webpack 等工具編譯成 js 才能使用。\n由於 Vue-cli 主要是用來開發大型應用程式，當架構變複雜時，\n就不太適合在同一個檔案裡面定義及引用組元件，因此在 Vue-cli \n裡就把它拉出來變成單一的 .vue 檔案。\n\n*自訂撰寫\n<template>\n  <div id=\"app\">\n    <TheSide></TheSide>\n    <TheMain></TheMain>\n  </div>\n</template>\n<script>\nimport TheMain from \"@/views/TheMain.vue\"\nimport TheSide from \"@/components/TheSide.vue\"\n\nexport default {\n  name: \"app\", \n  data(){\n    return{\n      //\n    }\n  },\n  components: {\n    TheSide,\n    TheMain\n  }\n};\n</script>\n<style lang=\"scss\">\n@import \"./assets/style/style.scss\";\n\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: $color3;\n  display: flex;\n\n  #TheSide {\n    width: 35%;\n    width: 320px;\n    height: 100vh;\n    background-color: $color4;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n  }\n\n  #TheMain {\n    width: 100%;\n  }\n}",
            "labelLink": "#src/App.vue"
        },
        {
            "value": "8.2.5",
            "label": "src/router/index.js",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*code\nimport Vue from \"vue\";\nimport VueRouter from \"vue-router\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: \"/\",\n    name: \"TheIndex\",\n    component: () =>\n      import( \"../views/TheIndex.vue\")\n  },\n  {\n    path: \"/TheAboutMe\",\n    name: \"TheAboutMe\",\n    component: () =>\n      import( \"../views/TheAboutMe.vue\")\n  },{\n    path: \"/TheContactMe\",\n    name: \"TheContactMe\",\n    component: () =>\n      import( \"../views/TheContactMe.vue\")\n  }\n];\n\nconst router = new VueRouter({\n  routes\n});\n\nexport default router;\n\n\n*關於 router/index.js\n這支是配置路由的檔案，預設路徑為'/'（首頁）",
            "labelLink": "#src/router/index.js"
        },
        {
            "value": "8.2.6",
            "label": "src/components/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*自訂組件\nprojectRoot\n├── src/components\n│    ├── VCircularImg //圓形圖片\n│    ├── VIcon        //標誌\n│    ├── VRaisedBtn   //圖示按鈕\n│    ├── VFloatingBtn //浮動按鈕\n│    └── VFlatBtn     //無框按鈕\n\n*組件表格\n\n\n*快速使用\n<!-- use components -->\n<VCircularImg></VCircularImg>\n<VIcon></VIcon>\n<VRaisedBtn></VRaisedBtn>\n<VFloatingBtn></VFloatingBtn>\n<VFlatBtn></VFlatBtn>\n\n// import components\nimport VCircularImg from \"@/components/VCircularImg.vue\"\nimport VIcon from \"@/components/VIcon.vue\"\nimport VRaisedBtn from \"@/components/VRaisedBtn.vue\"\nimport VFloatingBtn from \"@/components/VFloatingBtn.vue\"\nimport VFlatBtn from \"@/components/VFlatBtn.vue\"\n\n// components\ncomponents: {\n  VCircularImg,\n  VIcon,\n  VRaisedBtn,\n  VFloatingBtn,\n  VFlatBtn\n}\n\n*關於 components\ncomponents/ 是放置所有元件的資料夾，.vue如之前所述\n就是單一元件檔案，舉例來說：頁面中有個搜索框，\n可能在很多頁面都會用到，將搜索框變成元件後，\n就可以一直重複利用，不用一再編寫，這就是元化的基本概念。\n",
            "labelLink": "#src/components/"
        },
        {
            "value": "8.2.7",
            "label": "src/views",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*自訂組件\nprojectRoot\n├── src/views\n│    ├── TheIndex.vue  //首頁 (path:/)\n│    ├── ...\n│    └── ...\n\n*關於 views\n自己 Vue-router 路徑所對應到的組件，放置 views。",
            "labelLink": "#src/views"
        },
        {
            "value": "8.2.8",
            "label": "src/assets/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*自訂組件\nprojectRoot\n├── src/assets\n│    ├── img     //放置圖片\n│    └── style   //放置樣式\n\n*關於 assets\nassets/ 是放置靜態資源的資料夾，元件會使用到的圖片、\njs、css 都可放在這個檔案裡，需特別注意的是，\n這裡檔案是會被 webpack 打包的，\n所以要使用相對路徑./assets/[filename]，\n如果不想被打包就要放到 static/ 的資料夾下。",
            "labelLink": "#src/assets/"
        },
        {
            "value": "8.2.9",
            "label": "static/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*關於 static\nstatic/ 也是用來放置靜態資源，但與 assets/ \n最大的不同在於 static/ 下的檔案完全不會經過\n webpack 壓縮。\n\n讓我們來做的小實驗，同時在 assets/ 及 \nstatic/ 裡放置 harden-test.jpg 這個檔案，\n再執行 npm run build，接著查看 dist/ 資料夾\n就會發現圖片打包後檔案位置的差異。\n\n如果 static/ img/ 下沒出現所置入的圖片，那是因為\n webpack 預設當圖片小於 10kb 時，就會壓成 base-64\n 格式直接嵌在程式碼裡，就不會出現在 static/ img/ 下。\n\n一樣需要注意的是，任何放在 static/ 中的檔案引入時\n都要使用絕對路徑/static/[filename]",
            "labelLink": "#static/"
        },
        {
            "value": "8.2.10",
            "label": "dist/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*dist 目錄結構\n├── dist/\n│    ├── static/\n│    │    ├── css/\n│    │    │    ├── ...\n│    │    ├── img/\n│    │    │    ├── ...\n│    │    ├── js/\n│    │    │    ├── ...\n│    └── index.html\n\n*index.html\n開啟 index.html 會發現程式碼都已經壓縮過了，還原來看的話，\n看出與根目錄的 index.html 有什麼不同了嗎？分別加載了壓縮過的\n css 及 js 檔案，而不難看出壓縮過的檔案都放置在 static/ 下。",
            "labelLink": "#dist/"
        },
        {
            "value": "8.2.11",
            "label": "dist/static/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "-app.css ：\n檔案裡的 css 都會打包成這個檔案。\n\n-manifest.js：\n比較像索引文件，在運行時可藉由\n該檔案解析並加載相對應的組件。\n\n-vendor.js：\n打包第三方 js 檔案，因第三方代碼更動次數較少，\n獨立打包可減少 app.js 加載時的負荷。\n\n-app.js：\nwebpack 入口文件，基本上就是打包所開發的程式碼，\n也就是 App.vue。\n",
            "labelLink": "#dist/static/"
        },
        {
            "value": "8.2.12",
            "label": "build/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*目錄結構\n├── build/\n│    ├── build.js                 # npm run build 的執行腳本\n│    ├── check-versions.js        # 在 build 之前會先檢查 npm、node.js 版本\n│    ├── utils.js                 \n│    ├── vue-loader.conf.js       \n│    ├── webpack.base.conf.js     # webpack 基本配置\n│    ├── webpack.dev.conf.js      # webpack 開發環境配置\n│    └── webpack.prod.conf.js     # webpack 打包環境配置\n\n*關於 build\n主要是 webpack 於開發及打包的環境配置，基本上專案建立時，\n就已經把環境設定好了，不太需要去額外調整。\n\n如果想要自定 webpack loader 的配置，可以查看 \nwebpack.base.conf.js 這支檔案。",
            "labelLink": "#build/"
        },
        {
            "value": "8.2.13",
            "label": "build/config/",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*目錄結構\n├── build/\n│    ├── dev.env.js \n│    ├── index.js\n│    └── prod.env.js\n\n*關於 config\n當 localhost 的 port 相衝沖或更改打包輸出路徑、\n是否開啟 sourceMap 等，就可在 index.js 裡更改。",
            "labelLink": "#build/config/"
        },
        {
            "value": "8.2.14",
            "label": "package.json",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*code\n{\n  \"name\": \"azpactio\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.19.2\",\n    \"core-js\": \"^3.4.4\",\n    \"jquery\": \"^3.4.1\",\n    \"vue\": \"^2.6.10\",\n    \"vue-router\": \"^3.1.3\",\n    \"vuex\": \"^3.1.2\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"^4.1.2\",\n    \"@vue/cli-plugin-eslint\": \"^4.1.0\",\n    \"@vue/cli-plugin-router\": \"^4.1.2\",\n    \"@vue/cli-plugin-vuex\": \"^4.1.0\",\n    \"@vue/cli-service\": \"^4.1.0\",\n    \"@vue/eslint-config-prettier\": \"^5.0.0\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-plugin-prettier\": \"^3.1.1\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"node-sass\": \"^4.12.0\",\n    \"prettier\": \"^1.19.1\",\n    \"sass-loader\": \"^8.0.0\",\n    \"vue-template-compiler\": \"^2.6.10\"\n  }\n}\n\n*關於 package.json\nnode 配置檔案，可查看已安裝套件及一些基本資訊（如項目名稱、\n版本等）\n\n在裡面有 @vue/cli-plugin- 開頭的。插件可以修改\nwebpack 的內部配置，也可以向 vue-cli-server 注入命令。",
            "labelLink": "#package.json"
        },
        {
            "value": "8.3",
            "label": "基礎開發 - img",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "自己習慣的配置方式\n在 main.js 或其他撰寫的時候，記住要使用雙引號使用 \"\"，除錯。\n\n\n//main.js\n*自訂路由\n@，表示 src 這個資料夾\n@/xx.vue，表示 src 下面的 xx.vue 文件\n",
            "labelLink": "#基礎開發 - img"
        },
        {
            "value": "8.3.1",
            "label": "單檔內動態引用圖片-:src",
            "image": "8/-.3.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "使用 require() 引用圖片\ntemplate\n img(:src=\"src\")\nscript\n data(){\n  return{\n   img: require('@/assets/img/logo.png')\n  }\n }\n\n\n<template>\n  <div class=\"VCircularImg\">\n    <p>一般圖片</p>\n    <img src=\"@/assets/img/logo.png\" alt=\"vue photo\">\n\n    <p>動態圖片</p>\n    <img :src=\"src\" alt=\"vue photo\">\n  </div>\n</template>\n<script>\nexport default {\n  name: \"VCircularImg\",\n  data() {\n    return {\n      img: require('@/assets/img/logo.png')\n    }\n  }\n};\n</script>\n\n參考資料\nVue 中顯示 im，顯示不出來\nhttps://blog.csdn.net/qq_41387882/article/details/82690337",
            "labelLink": "#單檔內動態引用圖片-:src"
        },
        {
            "value": "8.3.2",
            "label": "props 動態引用圖片-mounted",
            "image": "8/-.3.2.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "在 mounte() 中引用編譯過的圖片位置來動態使用到此單組件內\n\n\n<template>\n  <div class=\"VCircularImg container\">\n    <span>{{theSrc}}</span>\n    <img :src=theSrc alt=\"vue photo\">\n  </div>\n</template>\n<script>\nexport default {\n  name: \"VCircularImg\",\n  props: {\n    src: {\n      default: require('@/assets/img/logo.png')\n    }\n  },\n  data() {\n    return {\n      theSrc:\"\"\n    }\n  },\n  mounted(){\n    this.theSrc = this.src\n  }\n};",
            "labelLink": "#props 動態引用圖片-mounted"
        },
        {
            "value": "8.4",
            "label": "基礎開發 - .vue",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Vue Cli 使用單文件，其中主要以三個標籤組成，\ntemplate、script、style",
            "labelLink": "#基礎開發 - .vue"
        },
        {
            "value": "8.4.1",
            "label": "單檔引用單檔 - import",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.目錄結構\ncompoments\n|-TheSide.vue\nViews\n|-TheHome.vue\n\n//2.components/TheSide.vue，建立單檔\n<template>\n <div id=\"TheSide\">\n  <span>我是邊界的導覽列...</span>\n </div>\n</template>\n<script>\nexport default {\n  name: 'TheSide',\n};\n</script>\n\n//3.views/TheHome.vue，引用單檔\n<template>\n  <div id=\"TheHome\">\n    <the_side></the_side>\n  </div>\n</template>\n\n<script>\nimport the_side from '@/components/TheSide.vue'\n\nexport default {\n  name: 'TheHome',\n  components:{\n   the_side\n  }\n}\n</script>",
            "labelLink": "#單檔引用單檔 - import"
        },
        {
            "value": "8.4.2",
            "label": "單檔使用 a - public",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "只要是在 .vue 的頁面使用 a 超連結，\n其連結的根目錄都會是在 public/ 下。\n以 App.vue 為例:\n\n//src/App.vue\n<a href=\"test.html\">Test</a>\n\n//public/test.html\n<span> 放置於 public 目錄下的文件</span>\n\n從 App.vue 超連結的位置是 public/ 目錄下",
            "labelLink": "#單檔使用 a - public"
        },
        {
            "value": "8.5",
            "label": "基礎開發 - CSS/SCSS",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Vue cli 4 環境中與 CSS 及 SCSS 相關的撰寫設定",
            "labelLink": "#基礎開發 - CSS/SCSS"
        },
        {
            "value": "8.5.1",
            "label": "style 設定 SCSS 語言 - lang",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "lang 為定義 style 的內使用的語言，\nscopes 為定義此 style 僅限在這一份組件當中使用\n\n<style lang=\"scss\" scoped>\n\n  @import \"../../style/common.scss\";\n  #test {\n    width: 100vh;\n       @include backgroundStyle(#fff, flex, center, wrap);\n  }\n</style>",
            "labelLink": "#style 設定 SCSS 語言 - lang"
        },
        {
            "value": "8.5.2",
            "label": "單文件內引用 SCSS",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//目錄\nstyle\n|-common.scss\nscr\n|-views\n  |-aComponent.vue\n\n//1.安裝編譯 SCSS 需要的 loader\n//由於使用 vue-cli 所以省略 loader 的配置\n\n//2.安裝 load\n$ npm install sass-loader node-sass --save\n\n//3.common.scss，自訂通用的SCSS 檔案\n@mixin backgroundStyle(\n    $background-color,\n    $display,\n    $justify-content,\n    $flex-wrap\n  ) {\n    background-color: $background-color;\n    display: $display;\n    justify-content: $justify-content;\n    flex-wrap: $flex-wrap;\n  }\n\n//4.aComponent.vue\n//在組件中匯入通用的SCSS 檔案\n//lang 為定義 style 的內使用的語言，scopes \n//為定義此 style 僅限在這一份組件當中使用\n\n<style lang=\"scss\" scoped>\n  @import \"../../style/common.scss\";\n  #test {\n    width: 100vh;\n       @include backgroundStyle(#fff, flex, center, wrap);\n  }\n</style>\n\n\n參考資料\nvue-cli中使用Sass\nhttps://bingzhe.github.io/2017/06/22/vue-cli-%E4%B8%AD%E4%BD%BF%E7%94%A8sass/",
            "labelLink": "#單文件內引用 SCSS"
        },
        {
            "value": "8.5.3",
            "label": "man.js 內引用 SCSS",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//目錄\nsrc\n|-main.js\nstyle\n|-style.scss\n\n//1.main.js，引用 SCSS\nimport '../style/style.scss'\n\n//2.style.scss，設定樣式\n.container { \n  background-color:bisque\n}",
            "labelLink": "#man.js 內引用 SCSS"
        },
        {
            "value": "8.5.4",
            "label": "main.js 內引用 prettify",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//目錄\npublic\n|-index.html\nsrc\n|-main.js\n|-views\n  |-Home.vue\nstyle\n|-pretty.scss\n\n//1.main.js，引用 css\nimport 'https://cdn.jsdelivr.net/gh/google/code-prettify\n@master/loader/run_prettify.js'\n\n//2.Home.vue，撰寫 prettify 程式碼\n<template>\n  <pre class=\"prettyprint\">\n    //撰寫 coding..\n  </pre>\n</template>\n<script>\nexport default({\n  name:'Home'\n})\n</script>\n<style lang=\"scss\" scoped>\n</style>",
            "labelLink": "#main.js 內引用 prettify"
        },
        {
            "value": "8.6",
            "label": "載入第三方套件",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "使用 webpack 的配置方式仔入第三方套件。",
            "labelLink": "#載入第三方套件"
        },
        {
            "value": "8.6.1",
            "label": "jQuery",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "projectRoot\n├── build/\n│    └── webpack.base.conf.js\n└── eslintrc.js\n\n//webpack.base.conf.js\n// 引入 webpack\nconst webpack = require('webpack')\n\nmodule.exports = {\n  // 新增 plugins\n  plugins: [\n    new webpack.ProvidePlugin({\n       $: \"jquery\"\n    })\n  ]\n}\n\n//eslintrc.js\n\nenv: {\n    browser: true,\n    jquery: true\n}\n\n添加完成後再執行一次npm run dev，應該就不會有錯誤訊息囉",
            "labelLink": "#jQuery"
        },
        {
            "value": "9",
            "label": "Web & Server",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "伺服器與瀏覽器、客戶端的溝通。",
            "labelLink": "#Web & Server"
        },
        {
            "value": "9.1",
            "label": "運作原理",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "運作、流程、設計的原理\n\nAPI 程式介面\nAjax 非同步 JavaScript 與 XML\nSame Origin Policy 同源政策\nCORS 跨來源資源共享\nPreflight Request 預檢請求\nJSONP JSON with Padding",
            "labelLink": "#運作原理"
        },
        {
            "value": "9.1.1",
            "label": "HTTP 運作原理",
            "image": "9/-.1.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "完整的 HTTP 流程，通常有下面七個步驟:\n1.建立 TCP 連結\n2.瀏覽器: 向「Web 伺服器」發送請求命令\n3.瀏覽器: 發送請求表頭 (headers)\n4.Web 伺服器: 回應 (response)\n5.Web 伺服器: 發送回應 (response) 資訊\n6.Web 伺服器: 向「瀏覽器」發送資訊 \n7.Web 伺服器: 關閉 TCP 連結\n\n參考資料\nAJAX JavaScript 與 jQuery 教學範例 for PHP\nhttps://www.footmark.info/programming-language/php/ajax-javascript-jquery-example-php/",
            "labelLink": "#HTTP 運作原理"
        },
        {
            "value": "9.1.2",
            "label": "XMLHttpRequest 運作原理",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "瀏覽器將它們的 HTTP API 定義一個 XMLHttpRequest 物件上。\n此物件的每個實體皆代表一組 requset/response 的配對，\n而這個物件的屬性與方法讓你能夠\n\n-做出 POST、HEAD、及 GET 請求的能力\n-同步 (sync) 或非同步 (async) 擷取 Web 伺服器的回應 (response)，並\n且能夠以「文字」或一個「DOM」檔案的形式返回內容\n\n//XMLHttpRequest 它並不限於只能用在 XML 檔案，它可以接收\n任何形式的文字檔案",
            "labelLink": "#XMLHttpRequest 運作原理"
        },
        {
            "value": "9.1.3",
            "label": "Ajax 運作原理",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Ajax 應用可以僅向伺服器傳送並取回指定資料，接著客戶使用\n JavaScript 處理伺服器回應的資料，因只取需要的資料，\n所以伺服器回應更快且負荷也減少。\n\n1.使用者在「瀏覽器」觸發一個事件，例如點擊按鈕。\n2.將上述獲的事件的同時，使用 JavaScript 的 XMLHttpRequest 物件，在背景對「Web 伺服器」發送一個 HTTP 請求，達到與「Web 伺服器」\n進行資料的非同步交換\n3.將從「Web 伺服器」取得的資料，使用 JavaScript 操作 DOM，\n來實現動態局部更新「瀏覽器」的網頁內容\n\n參考資料\n輕鬆理解 Ajax 與跨來源請求\nhttps://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/",
            "labelLink": "#Ajax 運作原理"
        },
        {
            "value": "9.1.4",
            "label": "API 運作原理",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*什麼是 API\n想像一下電腦上不是有一個 USB 插槽嗎?然後你就會想拿買來的\nUSB 隨身碟插上並使用。而明明是不同廠牌做的東西，都可以讀的到、\n都可以差到 USB 插槽裡面。\n\n因為有一項標準叫做 USB 介面，當這套標準訂出來以後。\n所有廠家只要按照這一套標準開發，就可以保證能夠連接電腦跟 USB 隨身碟。\n\nAPI 也是，只是變成程式跟程式之間的串接。今天我寫的程式需要讀取檔案，那麼我就要去串接一個「讀取檔案的 API」。\n\n例如說今天我想要讓我的網頁能夠用 Facebook 登入，那要怎麼辦？\n我就要去串接「Facebook 提供的 API」，\n就等於說是 Facebook 向外提供給大家的一套介面、一套標準，\n任何想要接入 Facebook 服務的開發者們，\n都可以遵循著那套規範拿到自己想要的資料，這個東西就叫做 API。\n\n*API 串接 (Documentation)\nAPI 的串接，一定要有文件才知道怎麼串，不然根本串不起來，因為你連要傳什麼參數都不知道\n\n例如 Node.js 的讀取檔案\nfs.readdir(path[,options],callback)\n\npath <string>|<buffer>\noptions <string>|<Object>\n encoding <string> defalut='utf8'\ncallback <Function>",
            "labelLink": "#API 運作原理"
        },
        {
            "value": "9.2",
            "label": "HTTP request - 請求",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "一個 HTTP 請求由四個\n1.HTTP 請求方法 (method) 或「動詞」(verb)，比如 GET 或 POST 請求\n2.要請求的 URL，就是請求的網址\n3.一組選擇性的請求表頭 (headers)，包含一些「客戶端環境」與「身分驗證」資訊..\n4.一個選擇性的請求主體 (body)，也就是請求正文，包含客戶提交的「查詢字串」或「表單」資訊..",
            "labelLink": "#HTTP request - 請求"
        },
        {
            "value": "9.2.1",
            "label": "HTTP 請求內容",
            "image": "9/-.2.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "請求方法：GET\n請求地址：/service.php?number=1020501\nHTTP 版本：HTTP/1.1\n請求表頭：紅色部分\n請求主體：綠色部分\n\n//請求「表頭」與「主體」之間有一個空行，\n用來表示請求「表頭」已經結束了，接下來是請求「主體」\n\n//紅色部分，GET /service.php?number=1020501 HTTP/1.1\nHost: localhost\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36\nq=0.01\nAccept: */*\nReferer: http://localhost/javascript-demo.html\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4\n\n//綠色部分\nnumber=1020501",
            "labelLink": "#HTTP 請求內容"
        },
        {
            "value": "9.2.2",
            "label": "CORS 跨來源資源共用",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "如果你想開啟來源 HTTP 請求的話，Server 必須在 Response 的 Header 裡面加上 Access-Control-Allow-Origin。\n\n當瀏覽起收到 Response 之後，會先檢查 Access-Control-Allow-Origin裡面的內容，如果裡面有包含現在這個發起 Request 的 Origin 的話，就會允許通過，讓程式順利接收到 Response。\n\n重點是這一行：Access-Control-Allow-Origin: *，星號就代表萬用字元，意思是任何一個 Origin 都接受。所以當瀏覽器接收到這個 Response 之後，比對目前的 Origin 符合*這個規則，檢驗通過，允許我們接受跨來源請求的回應。\n\n總結一下，如果你想要發起跨來源 HTTP 請求並且順利收到回應的話，需要確保 Server 端有加上Access-Control-Allow-Origin，不然 Response 會被瀏覽器給擋下來並且顯示出錯誤訊息。",
            "labelLink": "#CORS 跨來源資源共用"
        },
        {
            "value": "9.3",
            "label": "HTTP response - 回應",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "伺服器的 HTTP 回應 (response) 有三個部分\n1.由數值文字所組成的狀態碼 (status code)，指示請求成功或失敗\n2.一組回應表頭 (headers) 包含許多有用的資訊，例如伺服器類型、日期時間、內容類型和長度\n3.回應主體 (body) 也就是回應正文，例如「文字字串」或「HTML 代碼」",
            "labelLink": "#HTTP response - 回應"
        },
        {
            "value": "9.3.1",
            "label": "HTTP 回應內容",
            "image": "9/-.3.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text":"HTTP 版本：HTTP/1.1\n回應狀態碼：200 OK，代表請求成功\n回應資料類型：application/json; charset=UTF-8，代表資料類型 JSON；編碼格式 UTF-8\n回應表頭：紅色部分\n回應主體：綠色部分（這裡回應的資料格式為 JSON）\n\n//回應「表頭」與「主體」之間有一個空行，用來表示回應「表頭」已經結束了，接下來是回應「主體」\n\n//紅色部分，HTTP/1.1 200 OK\nDate: Sat, 26 Sep 2015 06:12:28 GMT\nServer: Apache/2.4.12 (Win32) OpenSSL/1.0.1l PHP/5.6.8\nX-Powered-By: PHP/5.6.8\nContent-Length: 111\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: application/json; charset=UTF-8\n\n//綠色部分\n{\"number\":\"1020501\",\"name\":\"\王\一\傑\",\"sex\":\"\男\"}",
            "labelLink": "#HTTP 回應內容"
        },
        {
            "value": "9.4",
            "label": "HTTP status code - 狀態碼",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-1xx:指示訊息。表示收到 Web 瀏覽器請求，正在進一步的處理。\n-2xx:成功訊息。表示請求已經正確接收，並已經被理解和接受。例: 200 OK\n-3xx:重新導向。表示請求沒有成功，必須採取進一步的動作以完成請求。\n-4xx:客戶端錯誤。表示客戶端提交的請求有錯誤或者不能被完成。例: 404 Not Found，代表請求中引用的檔案不存在\n-5xx:伺服器錯誤。表示伺服器不能完成請求的處理，儘管請求正確。例: 500 Internal Server Error，代表伺服器遇到了一個未曾預料的狀況，通常是伺服器的程式碼錯誤。",
            "labelLink": "#HTTP status code - 狀態碼"
        },
        {
            "value": "11",
            "label": "D3",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "快速繪製圖式\n\n參考資料\n讓你資料美美的(d3.js+vue.js)\nhttps://ithelp.ithome.com.tw/users/20105602/ironman/1582",
            "labelLink": "#D3"
        },
        {
            "value": "11.1",
            "label": "基本語法",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "d3 所使用的基本語法",
            "labelLink": "#基本語法"
        },
        {
            "value": "11.1.1",
            "label": "選擇元素 - select & selectAll",
            "image": "11/-.1.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "d3 有兩個方式選擇元素，一個是單選、一個是多選\n\ndiv(id=\"#app\")\n button(@click=\"fSelect()\") set select)\n button(@click=\"fSelectAll()) set selectAll\n p 我是第一行\n p 我是第二行\n\nfSelect() {\n  d3.select(\"p\")\n    .style(\"color\", \"red\")\n    .text(\"新年快樂\")\n},\nfSelectAll() {\n  d3.selectAll(\"p\").\n  style(\"color\", \"blue\")\n  .text(\"恭喜發財\")\n}",
            "labelLink": "#選擇元素 - select & selectAll"
        },
        {
            "value": "11.1.2",
            "label": "綁定資料 - datum & data",
            "image": "11/-.1.2.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "datum 綁定單一的資料，data 綁定一組資料(陣列資料)\n\n也就是說 datum 將單一個資料插入到指定元素內\n而 data 則是將一整筆資料插入到指定元素內\n\ndiv(id=\"#app\")\n button(@click=\"fSelect()\") set select)\n button(@click=\"fSelectAll()) set selectAll\n p(class=\"datum\") Apple\n p(class=\"datum\") Banana\n p(class=\"data\") Apple\n p(class=\"data\") Banana\n p(class=\"data\") lemon\n\nmethods: {\n  fDatum() {},\n  fData() {},\n},\nmounted() {\n  this.fDatum = function fDatum() {\n    let body = d3.select(\"body\");\n    let str = \"change\";\n    let pdatum = body.selectAll(\".datum\");\n        pdatum.datum(str).text(function(d, i) {\n          return \"第 \" + (i + 1) + \" 個 \" + d;\n        });\n      };\n      this.fData = function fData() {\n        let body = d3.select(\"body\");\n        let fruits = [\"蘋果\", \"香蕉\", \"檸檬\"];\n        let pdata = body.selectAll(\".data\");\n        pdata.data(fruits).text(function(d) {\n          return d;\n        });\n      };\n}",
            "labelLink": "#綁定資料 - datum & data"
        },
        {
            "value": "11.1.3",
            "label": "綁定資料(補齊) - data、enter",
            "image": "11/-.1.3.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "enter 是用來補齊資料\n在資料上，data 有 4 筆資料，指定元素有 1 個，\n畫面更新 data 末 3 個更新到畫面上。\n\n在資料上，data 有 4 筆資料，指定元素有 0 個，\n畫面更新 data 4 個更新到畫面上。\n\nbutton(@click=\"fEnter(1)\") set data > 指定元素\nbutton(@click=\"fEnter(2)\") set data > 沒有元素\np(class=\"data\") Banana\n\ndata() {\n  return {\n    listOne: [4, 8, 6, 4],\n    listTwo: [4, 8, 15, 16, 20, 53]\n  }\n},\nmethods: {\n  async fEnter(val) {\n    let [listOne, listTwo] = [this.listOne, this.listTwo]\n    let [elEnterData, elEnterNo] = [d3.selectAll(\".data\"), d3.selectAll(\".no\")]\n    switch (val) {\n      case 1:\n        elEnterData\n          .data(listOne)\n          .enter()\n          .append(\"p\")\n          .text(function(d, i) {\n            return `I’m number \" + ${d} + \"! 有找到元素 ${i}`;\n          });\n        console.log(listOne)\n        break;\n      case 2:\n        elEnterNo\n          .data(listOne)\n          .enter()\n          .append(\"p\")\n          .text(function(d, i) {\n            return `I’m number \" + ${d} + \"! 沒有找到元素 ${i}`;\n          });\n        break;\n      default:\n            break;\n        }\n      }\n},\nmounted(){\n  this.fEnter()\n}",
            "labelLink": "#綁定資料(補齊) - data、enter"
        },
        {
            "value": "11.1.4",
            "label": "綁定資料(更新) - data、update",
            "image": "11/-.1.4.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "update 是將更新資料的，所有指定元素都使用 data 的資料\n\n在資料上，data 有 4 筆資料，指定元素上有 7 個，\ndata 全部更新到指定元素上，指定元素前 4 個更新。\n在畫面上，data 有 4 筆資料，指定元素上有 2 個，\ndata 更新 2 個到指定元素上。\n\nbutton(@click=\"fUpdate(1)\") set data < 指定元素\nbutton(@click=\"fUpdate(2)\") set data > 指定元素\ndiv\n p(class=\"data\") Apple\n p(class=\"data\") Banana\n p(class=\"data\") lemon\n p(class=\"data\") lemon\n p(class=\"data\") lemon\n p(class=\"data\") lemon\n p(class=\"data\") lemon\ndiv\n p(class=\"other\") lemon\n p(class=\"other\") lemon\n\ndata() {\n  return {\n    listOne: [4, 8, 15, 16]\n  }\n},\nmethods: {\n  fUpdate(val) {\n    let listOne = this.listOne\n    let [body, upDate, upOther] = [d3.select(\"body\"), \"\"]\n        switch (val) {\n          case 1:\n            upDate = body.selectAll(\".data\")\n            upDate.data(listOne).text(function(d) {\n              return d;\n            });\n            break;\n          case 2:\n            upDate = body.selectAll(\".other\")\n            upDate.data(listOne).text(function(d) {\n              return d;\n            });\n            break;\n          default:\n            break;\n        }\n      }\n}",
            "labelLink": "#綁定資料(更新) - data、update"
        },
        {
            "value": "11.2",
            "label": "開始繪圖",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "1.準備資料 data/array\ndata(){\n  listOne: [100, 8, 15, 23, 4, 2, 158, 50]\n}\n\n2.繪製圖表 chart/寬、高\nsvg(class=\"chart\")\n\nlet chart = \"\"\nchart = d3\n          .select(\".chart\")\n          .attr(\"width\", 800)\n          .attr(\"height\", 800);\n3. 使用片段\nam_d3_chart       svg class 為 chart 片段\nam_d3_fBarGraph   長條圖片段\n\n",
            "labelLink": "#開始繪圖"
        },
        {
            "value": "11.2.1",
            "label": "基本長條圖",
            "image": "11/-.2.1.png",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "命名:\nBarGraph 長條圖\nrHeight 長條圖高度\nchart 圖表\nrect 直長\n\n3-1.撰寫 template\nbutton(@click=\"fBarGraph\") set 長條圖\nsvg(class=\"chart\")\n\n以下在 methods(){fBarGraph(){...}} 內\n3-2.設定變數\nlet [rHeight, listOne, chart] = [25, this.listOne, \"\"]\n// [長條圖高度, listOne, 圖表]\n3-4.繪製畫布\nchart = d3\n  .select(\".chart\")\n  .attr(\"width\", 800)\n  .attr(\"height\", 800);\n\n3-4.使用畫布 - 繪製 x 軸、y 軸\nchart\n  .selectAll(\"svg\")\n  .data(listOne)\n  .enter()\n  .append(\"rect\")\n  //自訂長條圖 x 軸\n  .attr(\"x\", 35)\n  // 自訂長條圖 y 軸\n  .attr(\"y\", function(d, i) {\n    return i * rHeight;\n  })\n  // 自訂長條圖 水平長度\n  .attr(\"width\", function(d) {\n    return d * 3\n  })\n  //每個長條圖之間垂直的距離\n  .attr(\"height\", rHeight - 2)\n  //長條圖顏色\n  .attr(\"fill\", \"steelblue\");\n\n3-5.使用畫布 - 繪製 data 文字\nchart\n  .selectAll(\"svg\")\n  .data(listOne)\n  .enter()\n  .append(\"text\")\n  //每個文字之間的水平距離\n  .attr(\"x\", 0)\n  //每個文字之間的垂直距離\n  .attr(\"y\", function(d, i) {\n    return i * rHeight + 18\n  })\n  // 文字樣式\n  .style(\"fill\", \"#44951D\")\n  .style(\"font-size\", \"1.25rem\")\n  // 返回文字\n  .text(function(d) {\n    return d;\n  });",
            "labelLink": "#基本長條圖"
        },
        {
            "value": "12",
            "label": "UI 介面",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "UI 介面",
            "labelLink": "#UI 介面"
        },
        {
            "value": "12.1",
            "label": "欄位",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "水平欄位\n垂直欄位",
            "labelLink": "#欄位"
        },
        {
            "value": "12.1.1",
            "label": "欄位-三欄",
            "image": "12/-.1.1/-.1.1.gif",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "導覽列+副導覽列+主要內容\n左側導覽列有兩層\n\n\n參考資料\nSample-UI 三欄式\nhttps://codepen.io/azpact/pen/wZoLZV",
            "labelLink": "#欄位-三欄"
        },
        {
            "value": "13",
            "label": "Git",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "Git 指令操作",
            "labelLink": "#Git"
        },
        {
            "value": "13.1",
            "label": "Git 指令操作",
            "image": "13/-.1.png",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "指令\t\t\t說明\n$ git init\t\t\t使用 git 對當前目錄進行版本控制\n$ git add --all\t\t\t一口氣把全部的檔案加入到暫存區\n$ git status\t\t\t是用來查詢現在目錄的狀態 (status 記錄此目錄歷史的指令與狀態)\n$ git commit -m \"初始化 init\"\t將暫存區的內容永久的存活下來，\"初始化 init\"為此次commit 的名稱\n\n$ git commit --allow-empty -m \"增加一個空的 commit\"\n\t\t\t\t做一個空的 commit\n\n$ git commit -a -m \"update content\"\n\t\t\t\t直接省略 add 動作直接到 commit，但對新加入的檔案無效\n\n$ git log \t\t\t檢視所有 commit 的詳細資料\n$ git log --oneline\t\t檢視精簡的 commit 的資料\n$ git commit --amend\t\t進入 Vim 模式修改\n\n$ git commit --amend -m \"更改名稱\"\n\t\t\t\t如此可以修改最後一次 commit 的訊息\n\n$ git reflog\t\t\t找尋被刪除的 commit (可以在30天內找回誤刪除的 commit )\n$ git log -p dog.txt\t\t檢視 dog.txt 的commit 紀錄\n$ git blame index.html \t\t這個檔案的程式碼每行的修改紀錄\n$ git reset e12d8ef^\t\t拆解e12d8ef這個的 commit\n$ git branch\t\t\t檢視當前的分支\n$ git branch cat\t\t新增一個名稱為 cat 的分支\n$ git branch -m cat tiger\t修改分支的名稱(git branch -m舊名稱 新名稱)\n$ git branch -d dog\t\t刪除 dog這個分支\n$ git branch -D dog\t\t強制刪除尚未合併的 dog 分支\n$ git checkout cat\t\t切換到 cat分支\n$ git checkout b1ea289\t\t將當前的 HEAD 切換至b1ea2895 這個 commit 上\n$ git merge cat\t\t\t合併 cat 這個分支",
            "labelLink": "#Git 指令操作"
        },
        {
            "value": "13.2",
            "label": "Git 操作技巧",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "Git 操作技巧與疑難雜症解決辦法",
            "labelLink": "#Git 操作技巧"
        },
        {
            "value": "13.2.1",
            "label": "如何 Push 上傳 GitHub?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//0.準備前面的 git init、git add、git commit… 等等\n//1.準備把東西推上遠端的Git 伺服器。首先需要設定一個端節的節點\n$ git remote add origin git@github.com:kaochenlong/practice-git.git\n\n//2.推上東西\n$ git push -u origin master \n\n//2-1.如果你能理解上面這個指令的意思，你就可以再做一些變化。\n//例如你的遠端節點叫做 dragonball，而且你想把 cat 分支推上去：\n$ git push dragonball cat\n\n參考資料\n如何 Push 上傳 GitHub?\nhttps://gitbook.tw/chapters/github/push-to-github.html",
            "labelLink": "#如何 Push 上傳 GitHub?"
        },
        {
            "value": "13.2.2",
            "label": "刪除或調整某些 Commit",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.想要在 Git 調整 Commit 順序，可以呼叫歷史紀錄\n$ git log --oneline\n27f6ed6 (HEAD -> master) add dog 2\n2bab3e7 add dog 1\nca40fc9 add 2 cats\n1de2076 add cat 2\ncd82f29 add cat 1\n382a2a5 add database settings\nbb0c9c2 init commit\n\n//2.針對要調整的區段輸入此段程式碼\n$ git rebase -i bb0c9c2\n\n//3.會跑出這段\npick 382a2a5 add database settings\npick cd82f29 add cat 1\npick 1de2076 add cat 2\npick ca40fc9 add 2 cats\npick 2bab3e7 add dog 1\npick 27f6ed6 add dog 2\n//4.在 Rebase 狀態看到的這個紀錄是跟我們平常看的紀錄是反過來的，\n//越新的 Commit 在越下面。接下來我只要這樣移動一下，\n//請參考下面參考資料\n\n參考資料\n想要刪除某幾個 Commit 或是調整 Commit 的順序\nhttps://gitbook.tw/chapters/rewrite-history/remove-and-reorder-commit.html",
            "labelLink": "#刪除或調整某些 Commit"
        },
        {
            "value": "13.2.3",
            "label": "把多個 Commit 合併成一個 Commit?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.查詢歷史紀錄\n$ git log --oneline\n27f6ed6 (HEAD -> master) add dog 2\n2bab3e7 add dog 1\nca40fc9 add 2 cats\n1de2076 add cat 2\ncd82f29 add cat 1\n382a2a5 add database settings\nbb0c9c2 init commit                \n\n//2.輸入要調整的區域\n$git rebase -i bb0c9c2 \n\n//3-1.會跑出以下紀錄，\n//在互動模式的紀錄由上而下是從最舊到最新，\n//跟 git log 指令所呈現的結果是相反的。\n//3-2.要開始處理的 commit，\n//接著一樣再次出現 Vim 編輯器視窗\npick 382a2a5 add database settings\npick cd82f29 add cat 1\npick 1de2076 add cat 2\npick ca40fc9 add 2 cats\npick 2bab3e7 add dog 1\npick 27f6ed6 add dog 2\n\n# Rebase bb0c9c2..27f6ed6 onto bb0c9c2 \n(6 commands)\n#\n# Commands:\n# ...[略]...\n\n//4.使用 squash 指令，將上面內容修改如下\npick 382a2a5 add database settings\npick cd82f29 add cat 1\nsquash 1de2076 add cat 2\nsquash ca40fc9 add 2 cats\npick 2bab3e7 add dog 1\nsquash 27f6ed6 add dog 2\n\n//5.存檔並離開，會開始進行 Rabase\n//6-1.上面所發生的事情是，最後一行的 27f6ed6 \n//會跟前一個 Commit 2bab3e7 進行合併，\n//也就是 add dog 1 跟 add dog 2 這個 Commit 會合在一起。\n//6-2.倒數第三號的 ca40fc9 會跟前一個 \n//Commit 1de2076 合併，但因為 1de2076 \n//又會再往前一個 Commit cd82f29 合併，\n//所以整個跟 cat 有關的這三個 Commit 會併成同一個。\n\n參考資料\n把多個 Commit 合併成一個 Commit\nhttps://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit.html",
            "labelLink": "#把多個 Commit 合併成一個 Commit?"
        },
        {
            "value": "13.2.4",
            "label": "從過去的一個 Commit 再長出一個分支",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.移動到那個分支\n$ git checkout 657fce7 \n\n//2.你可以從現在這個 Commit 開新的分支出去，\n//讓我們直接使用 Checkout 指令的 -b 參數直接建立分支並自動切換過去\n$ git checkout -b brid\n\n參考資料\n我可以從過去的某個 Commit 再長一個新的分支出來嗎?\nhttps://gitbook.tw/chapters/branch/branch-from-old-commit.html",
            "labelLink": "#從過去的一個 Commit 再長出一個分支"
        },
        {
            "value": "13.2.5",
            "label": "合併發生衝突了，怎麼辦?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "去看合併有問題的檔案，並直接看要使用哪一分支的內容，\n//最後add 與 commit 完成合併，完成合併\n\n參考資料\n合併發生衝突了，怎麼辦?\nhttps://gitbook.tw/chapters/branch/fix-conflict.html",
            "labelLink": "#合併發生衝突了，怎麼辦?"
        },
        {
            "value": "13.2.6",
            "label": "查詢被刪掉的分支?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.你可以從 git reflog 指令去翻翻看，Reflog \n//預設會保留 30 天，所以 30 天內應該都還找得到。\n$ git reflog",
            "labelLink": "#查詢被刪掉的分支?"
        },
        {
            "value": "13.2.7",
            "label": "合併兩個分支?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "我從 master 分支開了一個 cat 分支，並且做了兩次 Commit。\n任務執行的差不多了，就要準備合併回來了。\n如果我想要 master 分支來合併 cat 分支的話，我會先切回 master 分支 \n\n//1.切換分支\n$ git checkout master\n\n//2.合併 cat 分支\n$ git merge cat\n\n//3.在 cat 分支新增的 cat1.html 跟 cat2.html，\n//因為 master 現在已經合併 cat 分支，\n//所以現在在 master 分支也有一份了。",
            "labelLink": "#合併兩個分支?"
        },
        {
            "value": "13.2.8",
            "label": "切換分支的檔案?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "目前 master 分支有4個檔案，切換到 cat 分支後新增兩個檔案，\n再切換到 master 分支。\n咦？剛剛那兩個檔案不見了！別擔心，其實他們都還在的，\n只是在不同的分支而已，只要切回(checkout) cat 分支，\n檔案就會出現了。 ",
            "labelLink": "#切換分支的檔案?"
        },
        {
            "value": "13.2.9",
            "label": "HEAD 是什麼東西?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "HEAD 是一個指標，指向某一個分支，通常你可以把 HEAD \n當做「目前所在分支」看待。",
            "labelLink": "#HEAD 是什麼東西?"
        },
        {
            "value": "13.2.10",
            "label": "在 Vim 模式修改最後一個 Commit 的名稱",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.開始修改最後一個 commit\n$ git commit –amend \n\n//2.輸入e，進入編輯\ne\n\n//3.輸入a，進入 append，開始修改名稱\na\n\n//4.按下後退到 Normal 模式\nesc\n\n//5.進行儲存並關閉這個檔案\n:wq",
            "labelLink": "#在 Vim 模式修改最後一個 Commit 的名稱"
        },
        {
            "value": "13.2.11",
            "label": "為什麼要二段式這麼麻煩?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "先 add 再 commit 這樣二段式感覺可能有點麻煩，但也是有好處\n的。你可以想像你有一個倉庫，在倉庫門口有個小廣場，這個廣場的\n概念就像跟暫存區一樣，你把要存放到倉庫的貨物先放到這邊（git\n add），然後等收集的差不多了就可以打開倉庫門，把在廣場上的\n\n貨物送進倉庫裡（git commit），並且記錄下來這批貨是什麼用\n途的、誰送來的。\n當然，你也可以每來一件貨物就開倉門存一次、紀錄一次，但這樣\n一來開倉庫的次數就會非常多。老實說這樣也沒什麼過錯，只是因\n為太過零碎的 Commit，有時候要查閱紀錄可能會有點不太方便；\n另外，過於零碎的 Commit 也可能給你的同事帶來一些困擾，例\n如要進行 Code Review 的時候，比較有整理的 Commit 可以\n一次看到比較完整的內容，而不需要一個一個 Commit 慢慢看。 ",
            "labelLink": "#為什麼要二段式這麼麻煩?"
        },
        {
            "value": "13.2.12",
            "label": "所以，什麼時候要 Commit?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "這個問題沒有標準答案，你可以很多檔案修改好再一口氣全部一起\nCommit，也可只改一個字就 Commit。常見的 Commit 的時間點有：\n1.修改幾個字\n2.完成一個頁面\n3.完成一個進度\n4.完成一個小系統\n5.下班前來一個 Commit\nx.你想要 Commit 的時候就可以 Commit。",
            "labelLink": "#所以，什麼時候要 Commit?"
        },
        {
            "value": "13.2.13",
            "label": "平行時空，關於修改 Commit 名稱的時機?",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "記得在 Git 中 Push 出去之後，就不要再更改 Commit 的訊息\n，否則可能會造成其它人的困擾。",
            "labelLink": "#平行時空，關於修改 Commit 名稱的時機?"
        },
        {
            "value": "13.3",
            "label": "本地端資料上傳到 GitHub 步驟",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "從下載 Git 軟體到將本地端的資料同步到 GitHub 遠端的操作步驟。",
            "labelLink": "#本地端資料上傳到 GitHub 步驟"
        },
        {
            "value": "13.3.1",
            "label": "安裝 Git",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "-至 Git 官網安裝軟體，選擇好版本後，安裝就可以一路按下一步\n按到底\n-安裝完成，電腦上搜尋 Git Bash 並開啟它，它類似命令提示字\n元的小黑框(它本身模擬了一個在 Linux 的世界還滿有知名度的軟\n體)\n-體驗一下Git 是不是有安裝起來，以及版本資訊對不對 \n\n//1.git 安裝位址\n$ which git\n\n//2.git 目前版本\n$ git --version ",
            "labelLink": "#安裝 Git"
        },
        {
            "value": "13.3.2",
            "label": "開啟 Git Base",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*本基端產生 SSH Key 的方法?\n//1.輸入指令，獲得 SSH Key\n$ ssh-keygen -t rsa -C \"your_email@example.com\" \n//1-1 \"\" 內輸入自己的信箱\n//1-2接著按下 3次 Enter，略過 passphrase 等等\n//1-3後會顯示我們的 SSH Key 的 fingerprint\n\n//2.SSH key\nThe key fingerprint is:\nSHA256:sqKOi11S8Lg26TOOOA+gFIn7XXGyr9OI7BqDOO w53652456@gmail.com\n\n*透過 SSH Key 自動登入 GitHub?\n\n//3.輸入指令，啟動 ssh-agent\n//4.在 SSH Key 的情況下，才可以執行 git 的 clone 等操作\n$ ssh-agent -s\n\n//5.將剛剛產生的 key 加入 ssh-agent\n$ ssh-add ~/.ssh/id_rsa\n\n//6.若無法出現錯誤的話，再次輸入此行指令，就可以執行 shh-add\nssh-agent bash\n\n*獲得讓 GitHub 使用的 SSH Key?\n//7.輸入指令，獲得 SSH key           \nclip <~/.ssh/id_rsa.pub     \n\nssh-rsa OOOOB3NzaC1yc2EAAAADAQABAAABAQDH8GYUWNDSVPPxLo+ibE0gPngPhBWI5wm1OpUWY2LH\nd0UKGeKcVi+BBB1C5RcwxS2YnlY+05ZEfuBpbGOQpfUO2aSgLt/FiDNI3dGBhFvPUybD+OOOOOOVcYjB\nTqOOOOOOOJyn/br9sV39fw7W14YLT7WX4kv1OOOOOOOOUepu1SSb3fna1Y7Di9SqQE5PYHJM4ia+or/7\nH7/wSWLq89Ldu3kNvfxyvcj/fz5OB/R8kCnTI0eYM1Ozy3oiJB8f0uPltl8w4bOOOOOOOOOabxMiAmTV\nDgcm2DZRxpKPL44rXJr3HQk0MA0ub w53652456@gmail.com",
            "labelLink": "#開啟 Git Base"
        },
        {
            "value": "13.3.3",
            "label": "GitHub 上添加 SSH Key",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*如何添加 SSH Key?\n-在自己的 GitHub 頭像上點選 Settings 進入找到 SSH and GPG keys\n-將上面獲得的 SSH key 右鍵貼上 'key' 上，並為這個 'key' 命一個 'title' 的名稱\n-完成後點擊 ADD SSH key 完成使用\n\n*如何驗證是否有使用成功?\n//1.開啟 Git Bash 並輸入指令\n$ ssh -T git@github.com\n\n//2.有看到專案的名稱，即成功使用 SSH Key 於 GitHub 上",
            "labelLink": "#GitHub 上添加 SSH Key"
        },
        {
            "value": "13.3.4",
            "label": "本地端資料同步到 GitHub 上",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.第一次需要這樣撰寫 (指令當前要上傳的目標位置)\n$ git remote add origin https://github.com/azpact/azpact.github.io.git\n\n//2.第一次需要這樣撰寫 (指令當前要上傳的是哪個分支名稱)\n$ git push -u origin master\n\n//3.完成前兩個指令後，就可以直接以此指令將本機端的資料上傳到 GitHub 上(除非有要上傳到其他專案或分支)\n$ git push",
            "labelLink": "#本地端資料同步到 GitHub 上"
        },
        {
            "value": "13.4",
            "label": "怎麼有時 Git Push 不上去?",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "通常這個狀況會發生在多人一起開發的時候，想像一下這個情境：\n1.Sherly 跟 Eddie 兩個人在差不多的時間都從 \nGit Server 上拉了一份資料下來準備進行開發。\n2.Sherly 手腳比較快，先完成了，於是先把做好的成果推一份上去。\n3.Eddie 不久後也完成了，但當他要推上去的時候發現推不上去了…",
            "labelLink": "#怎麼有時 Git Push 不上去?"
        },
        {
            "value": "13.4.1",
            "label": "解法一，先拉再推",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.你應該先拉一份線上版本的回來更新，然後再推一次\n$ git pull –rebase \n//1-2. --rebase 參數是表示「內容抓下來之後請\n//使用 Rebase 方式合併\n\n//2.推資料\n$ git push",
            "labelLink": "#解法一，先拉再推"
        },
        {
            "value": "13.4.2",
            "label": "解法二，直接推",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.直接無視之前的 commit，強迫推上去\n$ git push -f",
            "labelLink": "#解法二，直接推"
        },
        {
            "value": "13.4.3",
            "label": "解法三，non-fast-foreard 錯誤的衝突辦法",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.輸入兩個指令        \n$ git config branch.master.remote origin\n$ git config branch.master.merge refs/heads/master\n\n//2.再重新 git pull，就可以pull你的代碼\n$ git pull\n\n//3.最後 git push\n$ git push\n\n參考資料\nGit 錯誤 non-fast-foreard 後的衝突解決\nhttps://blog.csdn.net/sinat_25306771/article/details/55257901",
            "labelLink": "#解法三，non-fast-foreard 錯誤的衝突辦法"
        },
        {
            "value": "14",
            "label": "Muse-UI",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "基於 Vue2.0 的優雅 Material Design UI 組件庫\n\n參考資料\n官方網站\nhttps://muse-ui.org/#/zh-CN\n",
            "labelLink": "#Muse-UI"
        },
        {
            "value": "14.1",
            "label": "Muse-UI 基礎設定",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Mese UI Webpack 撰寫方式",
            "labelLink": "#Muse-UI 基礎設定"
        },
        {
            "value": "14.1.1",
            "label": "環境設定",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.npm 安裝\nnpm i muse-ui -S\n\n//2.目錄內撰寫程式碼\nindex.html\nmain.js\n\n//2-1.index.html，使用 Roboto Font 與 Font Icons 樣式\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic\">\n<link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/material-design-icons/3.0.1/iconfont/material-icons.css\">\n\n//3.main.js，引用 Muse-ui\nimport Vue from 'vue';\nimport MuseUI from 'muse-ui';\nimport 'muse-ui/dist/muse-ui.css';\n\nVue.use(MuseUI);\nnew Vue({\n  el: '#app',\n  render (h) {\n    return h('mu-button', {}, 'Hello World');\n  }\n});",
            "labelLink": "#環境設定"
        },
        {
            "value": "14.1.2",
            "label": "使用色彩與Icon",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.組件中使用 color\n<mu-button color=\"#1565c0\"> Custom </mu-button>          \n\n//2.組件中使用 icon\n<mu-icon value=\"home\"></mu-icon>\n\n參考資料\nIcons\nhttps://material.io/resources/icons/?style=baseline",
            "labelLink": "#使用色彩與Icon"
        },
        {
            "value": "14.1.3",
            "label": "常用的 layout 布局",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<mu-flex justify-content=\"center\"></mu-flex>\n\njustify-content  start/center/end/between/around\nwrap             wrap/nowrap/wrap-reverse\nalign-items      start/center/end/baseline/stretch\ndirection        row/column/row-reverse/column-reverse",
            "labelLink": "#常用的 layout 布局"
        },
        {
            "value": "14.1.4",
            "label": "常用的 Grid 網格",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "<mu-container class=\"demo-container is-stripe\">\n<mu-row gutter>\n  <mu-col span=\"8\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"1\">\n      <div class=\"grid-cell\"></div>\n  </mu-col>\n  <mu-col span=\"4\" sm=\"6\" md=\"8\" lg=\"9\" xl=\"11\">\n      <div class=\"grid-cell\"></div></mu-col>\n  <mu-col span=\"4\" sm=\"6\" md=\"8\" lg=\"9\" xl=\"11\">\n      <div class=\"grid-cell\"></div></mu-col>\n  <mu-col span=\"8\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"1\">\n      <div class=\"grid-cell\"></div></mu-col>\n</mu-row>\n</mu-container>\n\n* 預設四個響應式尺寸:sm、md、lg和xl\nsm >= 576px\nmd >= 768px\nlg >= 992px\nxl >=1200px\n使用 span 或是四個響應式尺寸去調整寬度，最大 12 最小 1，合計水平12\nCSS 設定上可以直接使用 .col、.row 去修改樣式\n\n<mu-row gutter>\n  <mu-col span=\"6\">\n    <div class=\"grid-cell\"></div>\n  </mu-col>\n  <mu-col span=\"6\"><\n    div class=\"grid-cell\"></div>\n  </mu-col>\n</mu-row>\n\n參考資料\n網格布局\nhttps://muse-ui.org/#/zh-CN/grid",
            "labelLink": "#常用的 Grid 網格"
        },
        {
            "value": "14.2",
            "label": "Muse-UI 基礎工具",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "Mese-UI 所提供的內建工具",
            "labelLink": "#Muse-UI 基礎工具"
        },
        {
            "value": "14.2.1",
            "label": "引用工具",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//main.js\nimport Vue from 'vue';\nimport Helpers from 'muse-ui/lib/Helpers';\nVue.use(Helpers);",
            "labelLink": "#引用工具"
        },
        {
            "value": "14.2.2",
            "label": "Transitions 過度動畫",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Fade 淡出淡入，原地淡入淡出\nSilde 滑入滑出，上下左右四個方位滑入滑出\nExpand 展開摺疊，上下摺疊\nScale 縮放，原地縮放\n\n參考資料\nTransitions 過度動畫\nhttps://muse-ui.org/#/zh-CN/transitions",
            "labelLink": "#Transitions 過度動畫"
        },
        {
            "value": "14.2.3",
            "label": "Directives 指令",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "ClickOutside，點進與點出，觸發兩種狀態\nResize，響應式，接收當前 width 與 height\nResize，接收當前 ScrollTop 的位置\nElevation，數值型拉霸\n\n參考資料\n指令\nhttps://muse-ui.org/#/zh-CN/directives",
            "labelLink": "#Directives 指令"
        },
        {
            "value": "14.2.4",
            "label": "Ripple 波紋組件",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "參考資料\n波紋組件\nhttps://muse-ui.org/#/zh-CN/ripple",
            "labelLink": "#Ripple 波紋組件"
        },
        {
            "value": "14.2.5",
            "label": "解決伏法使用 Muse-UI Ripple",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "需事前把三個 loader 安裝起來\nless、less-lasder、babel-plugin-import\n即可正常使用",
            "labelLink": "#解決伏法使用 Muse-UI Ripple"
        },
        {
            "value": "14.3",
            "label": "Muse-UI 組件",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "組件  說明\nAlert mu-alert \n組件來向用戶傳達訊息。\n提示框/icon提示框/動畫提示框 message:傳遞訊息\n\nAppBar  mu-appbar \n組件作為頁面標題、logo、菜單和操作按鈕的容器。\n必定使用，頂部導覽列\n\nAvatar  mu-avatar \n用於顯示用戶頭向、簡短的問題和圖示\n頭像/顯示文字或圖示\n\nBadge mu-badge \n可以配合圖示、按鈕、列表等組件，用於標記一些數字和文字\n徽章/像是Line 來幾則的紅色數字樣式\n\nBottom Navigation mu-bottom-navigation \n用於底部的導覽組件\n手機適用，底部導覽\n\nBottom Sheet  mu-bottom-sheet \n底部表單是一個從屏幕底部邊緣向上滑出的一個面板，\n使用這種方式向用戶呈現一組功能。手機適用，底部導覽\n\nBreadcrumbs mu-breadcrumbs \n組件是一個頁面輔助導覽器\n麵包屑導覽\n\nButtons mu-button \n按鈕組件，可以制定不同顏色或圖示來替換標準的 html 按鈕\n\nCard  mu-card \n卡片式包含一組特定數據的紙片，數據集含有各種相關信息，\n例如，關於單一主題的照片，文本，和連結。\n\nCarousel  mu-carousel \n組件用於網站首頁廣告圖切換 輪播\n\nChip  mu-chip \n是一種小塊的用於呈現複雜實體的塊。\n比如說歷史事件或聯絡人，薄片適用大量清單中某些需要關注的資料\n\nData Table  mu-data-table\n用於顯示表格數據，並且通常用於桌面企業產品中\n數據表格，推薦使用\n\nDialog  mu-dialog \n用於提示用戶做一些決定，或者是完成某個任務時需要的一些其他額外的訊息\n對話框，推薦使用，彈跳出來的對話框\n\nDivider mu-divider \n主要用於管理和分隔列表和頁面布局的內容 分隔線，類似 hr 標籤\n\nDrawer  mu-drawer \n從側邊彈出的對話框，側邊的導覽列\n\nExpansion Panel mu-expansion-panel \n包含創建流和允許輕量級編輯的一個元素\n擴展面板\n\nGrid List mu-grid-list \n網格列表示一種標準列表圖示的可選組件。\n網格列表與應用於布局和其他可視圖中的網格有著明顯區別。\n網格列表，適用大量圖片的網格顯示\n\nForm  mu-form \n用於實現表單布局以及提供簡單的驗證功能。\n推薦使用，輸入表單，有一般輸入、日期輸入及輸入後的表單驗證\n\nDate Input  mu-data-input \n用於選擇日期。\n將mu-text-field、mu-data-picker、mu-time-picker \n組合在一起行稱一個新的組件。\n時間輸入框，設定開始時間與結束時間\n\nSelect  mu-select \n用於從選擇列表中收集用戶提供的訊息\n選擇框，推薦使用\n\nSelect Controls \n選擇控件允許用戶選擇的選項，\n分為 mu-checkbox，mu-radio和 mu-switch\n推薦使用\n\nText Field  mu-text-field \n用於收集用戶提供的訊息\n文本輸入框，必定使用\n\nAuto Complete mu-auto-complete \n是普通文本輸入框的擴展，可以動態的自選完成輸入\n自動補全輸入，配合上面的 mu-text-field\n\nList  mu-list \n列表作為一個單一的連續元素以垂直排列的方式顯示多行條目\n列表，推薦使用\n\nLoadMore  mu-load-more \n內置下拉加載和無線滾動功能\n加載控件，預先顯示5個內容，下拉後再顯示內容\n\nMenu  mu-menu \n組件展示一個菜單用於激活它的元素的位置上\n菜單，配合 mu-appbar、mu-bottom-navigation..等導覽列使用\n\nPagination  mu-pagination \n組件用於分隔數據集\n分頁，好幾頁的分頁按鈕\n\nPaper mu-paper \n是一個陰影效果的容器\n紙片，包裹一個內容、圖片..等的陰影設定\n\nDate Picker mu-date-picker \n用於選擇日期\n日期選擇器， 配合上面的其他組件使用\n\nTime Picker mu-time-picker \n用於時間選擇\n時間選擇器， 配合上面的其他組件使用\n\nPopover mu-popover \n用於彈出提示，它封裝在 mu-meun 組件內\n彈出框\n\nProgress  mu-linear-progress 和 mu-circular-progress \n用於向用戶顯示數據加載進度\n進度條， 直條進度、圓形進度\n\nSlide Picker  mu-slide-picker \n用於行動裝置上的滑動選擇器\n滑動選擇器\n\nSlider  mu-slider \n用於一個固定區間內進行選擇\n滑塊\n\nSnackbar  mu-snackbar \n是一種針對操作的輕量級反饋機制，常以一個小的彈出框形式\n小吃吧， 有趣使用，但如有需要 push 資料，目前尚無法解決\n\n參考資料\n組件\nhttps://muse-ui.org/#/zh-CN/alert",
            "labelLink": "#Muse-UI 組件"
        },
        {
            "value": "15",
            "label": "Vuex",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "Vuex 共用資料",
            "labelLink": "#Vuex"
        },
        {
            "value": "15.1",
            "label": "計數器",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/vuex/3.1.1/vuex.min.js\n\n<div id=\"app\">\n  <p>{{ count }}</p>\n  <p>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n  </p>\n</div>\n\nconst store = new Vuex.Store({\n  state:{\n    count:0\n  },\n  mutations:{\n    increment:state=>state.count++,\n    decrement:state=>state.count--\n  }\n})\n\nnew Vue({\n  el:'#app',\n  computed:{\n    count(){\n      return store.state.count\n    }\n  },\n  methods:{\n    increment(){\n      store.commit('increment')\n    },\n    decrement(){\n      store.commit('decrement')\n    }\n  }\n})",
            "labelLink": "#計數器"
        },
        {
            "value": "16",
            "label": "Vue Router",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "Vue router",
            "labelLink": "#Vue Router"
        },
        {
            "value": "16.1",
            "label": "使用 vue router",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "router-link (to=\"/\")\nrouter-link (:to=\"{path:'/Home'}\")\nrouter-link (:to=\"{name:'Home'}\")\nrouter-link (:to=\"{name:'Home',query:{id:'itemNote'}}\") //設定參數\n\n\n//接收參數\nmounted(){\n  console.log(this.$route.query.id)  //itemNote\n}",
            "labelLink": "#使用 vue router"
        },
        {
            "value": "16.1.1",
            "label": "安裝與撰寫環境",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.npm 安裝 Vue 與 Vue Router\n$ npm install  -g vue vue-router --save\n\n\n//2.建立目錄\nsrc\n|-views\n  |-Home.vue\nApp.vue\nrouter.js\nmain.js\n\n//3.main.js，設定引用套件與建立 Vue 實例\nimport Vue from 'vue'\nimport router from './router' //使用自訂 router\nimport App from './App'\n\n//4.設定 false 以阻止 vue 在啟動時生成生產提示\nVue.config.productionTip = false \n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n\n//5.Home.vue，設定 view 組件畫面\n<template>\n  <div>\n    <h3>Home</h3>\n  </div>\n</template>\n<script>\n  export default {\n    name: \"Home\"\n  };\n</script>\n<style></style>\n\n//6.router.js，設定 router 路徑\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Home from '@/views/Home'\nVue.use(Router)\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home\n    },\n  ]\n})\n\n//7.App.vue，設定進入組件\n<template>\n  <div>\n    <h3>App.vue</h3>\n    <div class=\"container\">\n      <router-link :to=\"/\">Home</router-link> //使用vue-router 的路徑\n      <Home></Home> //引用自訂組件\n      <router-view></router-view> //顯示 router-link 進來的組件畫面\n    </div>\n  </div>\n</template>\n<script>\n  import Home from \"@/views/Home.vue\";\n  export default {\n    name: \"App\",\n    component: {\n      Home\n    }\n  };\n</script>\n\n參考資料\n安裝 vue-router \nhttps://dotblogs.com.tw/h20/2019/07/03/172640",
            "labelLink": "#安裝與撰寫環境"
        },
        {
            "value": "16.1.2",
            "label": "router-link 兩種方式",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "//1.建立目錄\nApp.vue\nrouter.js\n\n//2.router.js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nexport default new Router({\nroutes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home\n    }\n]\n)}\n\n\n//App.vue\n//3-1方式一，使用 path 路徑\n<router-link to=\"/\">hone</router-link>\n\n//3-2方式二，使用 name 為路徑\n<router-link :to=\"{ name: 'home'}\">User</router-link>\n//使用在 router.js 內的自訂名稱;名稱就像是 ID 只有唯一性，不可有重複的 name 取名名稱。",
            "labelLink": "#router-link 兩種方式"
        },
        {
            "value": "16.2",
            "label": "AB 網頁跳轉錨點",
            "image": "16/-.2.gif",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": true,
            "text": "",
            "labelLink": "#AB 網頁跳轉錨點"
        },
        {
            "value": "21",
            "label": "Drawer 抽屜",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "-隱藏與開啟左側導覽列的 Drawer 抽屜",
            "labelLink": "#Drawer 抽屜"
        },
        {
            "value": "21.1",
            "label": "Menu Drawer 導覽列抽屜-原型",
            "image": "21/-.1.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "\n-Menu Drawer 分兩個部分，單獨得 Menu 導覽列以及 Menu & Main 網站組要內容的組合。\n-對於要隱藏的區塊，記得在父層多加入 height 來避免隱藏時變動畫面的排版。\n\n1.Menu (Vue 與 Css)\n v-if 控制顯示與隱藏\n moveMenu 判斷顯示與隱藏\n clickMenu 控制 moveMenu 判斷\n tranisition 呈現進場與出場的效果\n .move-enter-active 進場效果\n .move-leave-active 出場效果\n margin-left 去調整位置\n opacity 去調整漸進與漸出\n position: relative;top:0;\n\n2.Menu & Main  (Vue 與 Css)\nmenu 的撰寫(同上css略為不同)\n v-if 控制顯示與隱藏\n moveMenu 判斷顯示與隱藏\n closeMenu() this.moveMenu = false\n .menu 導覽樣式\n .el-icon-close X 樣式\n .delectButton 刪除按鈕樣式\n .move-enter-active 進場效果\n .move-leave-active 出場效果\n\n.menu {\n   margin-top: 5rem;\n   max-width: 150px;\n   width: 13%;\n   height: 100%;\n   text-align: center;\n   position: fixed;\n   top: 0;\n   left: 0;\n   background-color: #fff;\n   z-index: 10;\n}\n\n3.html\nmain\n div(:class=\"{leftMain:moveMenu,rightMain:!moveMenu}\") //移動 main 區塊\n  transition(enter-active-class=\"move-enter-active\" leave-active-class=\"move-leave-active\")\n   section(class=\"delectButton v-if=\"!moveMenu\")\n    i(@click=\"clickMenu() class=\"el-icon-d-arrow-right\")",
            "labelLink": "#Menu Drawer 導覽列抽屜-原型"
        },
        {
            "value": "21.2",
            "label": "Menu Drawer 導覽列抽屜-排版",
            "image": "21/-.2.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-分別是左側導覽列與主要內容\n-左側導覽列:可隱藏與開啟，並固定於畫面上\n-主要內容:可用滾輪延伸內容，不與左側導覽列衝突\n\n1.Css\n#app {\n  display: flex;\n}\nsection {\n  background-color: rgb(241, 117, 80);\n  border: 1px solid black;\n}\nsection:nth-child(1) {\n  width: 30%;\n  overflow-y: scroll;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100vh;\n}\nsection:nth-child(2) {\n  margin-left: 30%;\n  width: 70%;\n  height: 120vh;\n}\n\n2.Html\ndiv(#app)\n section 導覽列\n section 主要內容",
            "labelLink": "#Menu Drawer 導覽列抽屜-排版"
        },
        {
            "value": "22",
            "label": "Select 選擇器-下拉選單",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "當選項過多時，使用下拉選單展示並選擇內容",
            "labelLink": "#Select 選擇器-下拉選單"
        },
        {
            "value": "22.1",
            "label": "el-option-group + Icon",
            "image": "22/-.1.gif",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "el-secect(v-model=\"selectValue\") //建立下拉選單\n el-option-group(v-for=\"group in listOne\"\n               :key=\"group.label\"\n               :label=\"group.label\") //群組資料\n  el-option(v-for=\"item in group.options\"\n                 :key=\"item.value\"\n                 :label=\"item.label\"\n                 :value=\"item.value\") //要放的 label 區塊\n   span(style=\"float:left\") {{item.label}} //顯示 label\n   span(style=\"float:right\") .. 顯示其他內容   ",
            "labelLink": "#el-option-group + Icon"
        },
        {
            "value": "31",
            "label": "疑問與解題?",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "疑問與解題",
            "labelLink": "#疑問與解題?"
        },
        {
            "value": "31.1",
            "label": "什麼是 TCP?",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "-傳輸控制協定 (Transmission Control Protocol)，是一種連接導向\n、基於位元組流的傳輸層通訊協定。\n-TCP協定的執行可劃分為三個階段：\n連接建立(connection establishment)、\n資料傳送（data transfer）和\n連接終止（connection termination）。",
            "labelLink": "#什麼是 TCP?"
        },
        {
            "value": "41",
            "label": "語法與快捷鍵",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "常用語法及快捷鍵的紀錄",
            "labelLink": "#語法與快捷鍵"
        },
        {
            "value": "41.1",
            "label": "sublime",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "輕便、快速的編輯器",
            "labelLink": "#sublime"
        },
        {
            "value": "41.1.1",
            "label": "sublime - LiveServer",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "進入要 livereload 的目錄，\n點擊右鍵 Git Base Here > 輸入 live-server ，\n即可進入 local http://127.0.0.1:8080/ 的端口，",
            "labelLink": "#sublime - LiveServer"
        },
        {
            "value": "41.1.2",
            "label": "sublime - 快捷鍵",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Sublime\nctrl+shift+p 安裝套件(輸入 install Package)\nshif+alt+up 向上增加光標\nshif+alt+down 向下增加光標\nctrl+d 複製一行至下方\nctrl+k 刪除一行\nctrl+`  叫出 console.log\nctrl+/  註解程式碼\nctrl+J 選取多行並合併成一行\nalt+up 目前光標程式碼向上移動\nalt+down 目前光標程式碼向下移動\n\nSublime-HTMLPrettify-master\nshift+alt+f 自動整理程式碼\n\n.jsbeautifyrc.defaults.json\n\"indent_size\": 2 //修改分隔行數\n\nColorPick\nshift+alt+d 開啟調色盤\n\n自訂快捷鍵文件:\nPerference → Key Bindings 加上下方文字\n\n當前自訂:\n[\n { \"keys\": [\"shift+alt+f\"], \"command\": \"reindent\" },\n { \"keys\": [\"ctrl+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Line.sublime-macro\"} },\n { \"keys\": [\"ctrl+d\"], \"command\": \"duplicate_line\" },\n { \"keys\": [\"shift+alt+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} },\n { \"keys\": [\"shift+alt+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} },\n { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },\n { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },\n]\n",
            "labelLink": "#sublime - 快捷鍵"
        },
        {
            "value": "41.1.3",
            "label": "sublime - 插件軟體",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "*All Autocomplete 自動完成頁面中寫過的 id/class/標籤名稱\n*ColorPicker 調色盤\n使用方式: shift+alt+d 開啟調色盤\n\n*Compass 可以使用 SASS 的輔助背景執行\n*Color highlighter 顯示色碼色彩，直接在色碼上顯示顏色\n*ConventToUTF8 Sublime 配置檔案\n*JavaScript Completions 是 JS 代碼快速編輯和提示工具\n*Jsonchema 用於驗證 JSON 模式\n*Livereload 存檔時自動重新整理瀏覽器內的網頁內容\n使用方式 - 進入端口方式 :\n\n*sublime 安裝完成 livereload  後，\n進入要 livereload 的目錄，\n點擊右鍵 Git Base Here > 輸入 live-server ，\n即可進入 local http://127.0.0.1:8080/ 的端口，\n\n*PyV8  是一個 Python 封裝 V8 引擎的殼，\n提供簡單可用的 API，能夠利用 python 來建構 JavaScript 的運行時環境。\n\n*Sublime-HTMLPrettify-master 程式碼快速格式化\n*User 使用者自訂設定\n*Vuejs Snippets，提供 vue 常用的語法\n*vue-syntax-highlight-master 提高 .vue 語法亮度\n參考資料\nhttps://packagecontrol.io/packages/Vuejs%20Snippets\n\nvuec ⇢ Vue component\nvuef ⇢  Vue filter\nv-on ⇢  @evt=\"callback\"\n\n\n*sublime_marge_build 更好的 Git 操作\nhttps://github.com/vuejs/vue-syntax-highlight\n直接下載整個 gitHub 包後放到安裝檔，自動安裝\n\n\n參考資料\nSublime Text 網頁勞工常用擴充套件\nhttps://blog.user.today/sublime-text/\n安裝與使用 live server\nhttps://www.youtube.com/watch?v=K-i5jgvmIlo",
            "labelLink": "#sublime - 插件軟體"
        },
        {
            "value": "41.1.4",
            "label": "sublime - 新增片段",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "1.建立程式碼片段\nPreferences>Browse PackAges>User 之下，\n新增一個自訂名稱資料夾 amos 方便管理，\n並且要建立的程式碼片段以 .sublime-snippet 為副檔名\n2.新增一個檔案 base.sublime-snippet \n<snippet>\n  <content><![CDATA[ ....完整原始碼內容.. ]]></content>\n  <tabTrigger>短碼</tabTrigger>\n  <description>註解</description>\n</snippet>\n\n<snippet>\n  <content><![CDATA[<div v-for=\"item in \" :key=\"item.id\">\n\t{{item}}\n</div>]]></content>\n  <tabTrigger>am_vue_vfor</tabTrigger>\n  <description>Vue v-for 的片段</description>\n</snippet>\n3.游標順序的表示法\n使用 $0 表示游標最後的位置，\n$0 $1 $2，表示 tab 順序「$1->$2->$0」\n\n4.輸入特殊字元\n<content><![CDATA[this.\\$emit(\"$1\"$0)]]></content>\n輸入 \"\\\" 屏除掉無法顯示特殊字元\n\n5.編碼規則 : 識別字+分類+名稱\n如以下\namos_cdn_JQ\namos_cdn_cssReset\namos_html_導覽列\namos_css_導覽列\namos_html_分面\n\n參考資料\nsublime text 急速應用教學\nhttps://www.slideshare.net/banPrint/sublime-text-51689543\nSublime Text教學 - 自訂常用的程式片段，只需輸入短碼立即產生完整原始碼\nhttps://www.minwt.com/webdesign-dev/html/17946.html\nSublime Text - 教你如何自訂習慣用的片段，加速程式碼的編寫\nhttp://jsnwork.kiiuo.com/archives/2023/sublime-text-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82%E7%BF%92%E6%85%A3%E7%94%A8%E7%9A%84%E7%89%87%E6%AE%B5%EF%BC%8C%E5%8A%A0%E9%80%9F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84/\n",
            "labelLink": "#sublime - 新增片段"
        },
        {
            "value": "41.1.5",
            "label": "sublime - 自訂片段",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "自訂程式碼片段\nCdn\nam_cdn_ base\telement-ui.css、element.js、vue\n                、axios、jquery 的 cdn 片段\nam_cdn_router\tVue Router 的片段\nam_cdn_d3\td3 片段\n\nFunction\nlog\t              console.log 片段\n\nVue\nam_vue_vfor\t      v-for 片段\nam_vue_Vue.component  Vue.component 片段\nam_vue_emit           $emit 片段\nam_vue_el\t      Vue el 實例片段\nam_vue_router\t      Vue Router 實例片段\n",
            "labelLink": "#sublime - 自訂片段"
        },
        {
            "value": "41.2",
            "label": "VSCode",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "IED 編輯器",
            "labelLink": "#VSCode"
        },
        {
            "value": "41.2.1",
            "label": "VSCode - 快速鍵",
            "image": " ",
            "styleValue": 1,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "Ctrl + D，快速選取當前亮起的文字",
            "labelLink": "#VSCode - 快速鍵"
        },
        {
            "value": "51",
            "label": "專案",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "51 專案\n51.1 個人網站\n51.2 IN-範本\n51.3 IN-編碼\n51.4 股價分析",
            "labelLink": "#專案"
        },
        {
            "value": "51.1",
            "label": "個人網站",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "首頁 index\n-左側 VSide\n-導覽列 VNavbar\n-主要內容 TheIndex\n關於我 AboutMe\n-左側 VSide\n-導覽列 VNavbar\n-主要內容 TheAboutMe\n範例 Example\n-左側 VSide\n-導覽列 VNavbar\n-主要內容 TheExample\n\nviews\n|-AboutMe\n|-Example\ncomponent\n|-\nexample\n|-ItemNote\n     |-index.html\njs\n  |-main.js\n  |-router.js\nplugins\n\n\n-首頁作品\n作品圖片\n作品介紹\n使用技術\n參考資料\n參考資料\nhttps://dezchuang.github.io/works-collection-demo/views/06.html\n\n-修改-codepen\n彙整 codepen，盡量以英文或主題的方式編寫小案例名稱\n\n-修改-github\nREADME.md 將作品做文件化與介紹，內容可以包含以下幾點：\n-簡述作品功能與動機\n-作品截圖及 live demo 網址\n-在本地端架設環境的使用方法\n-專案檔案結構\n-條列簡述所使用到的技術，甚至可以解釋選擇技術的原因\n\nGitHub 上的 README.md\nIN-範本\nItem Note\n個人項目筆記\nLive demo (超連結到線上位置)\n\n參考資料\nREADME.md 的參考\nhttps://github.com/DezChuang/vue-date-picker",
            "labelLink": "#個人網站"
        },
        {
            "value": "51.2",
            "label": "IN-範本",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "[修正功能]\n*手機版修改\nTheSide\n導覽列高度縮短\n圖片高度調高\nTheImageBox\nwidth 縮短\nheight auto\nTheSearchBar\n調整按鈕位置\nTheCloseBox與TheOpenMore\nbottom 增加，向上\nTheFeatues\n按鈕區塊調整位置\nTheMore\n調整div padding\n調整 td padding\n調整 button height,width",
            "labelLink": "#IN-範本"
        },
        {
            "value": "51.3",
            "label": "IN-編碼",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "跟隨著 IN-範本 架構作修正。",
            "labelLink": "#IN-編碼"
        },
        {
            "value": "51.4",
            "label": "股價分析",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "技術線\n- 非同步抓取\n -\n- 股票 API\n- D3 顯示\n- Google 登入\n\n非同步抓取\n// GET\nasync fetchList() {\n  try {\n    const instance = axios.create({\n      timeout: 6000,\n      headers: {\n        \"secret-key\":\n          \"5454\"\n      }\n    });\n    const get = await instance.get(\n      \"https://api.jsonbin.io/b/5df85634bda54254c5edebc8\"\n    );\n    const { data } = get; //資料在 data 屬性\n    this.listOne = data.listOne; //將GET的資料放到Vue上的groupList陣列中\n  } catch (error) {\n    throw new Error(error);\n  }\n},",
            "labelLink": "#股價分析"
        },
        {
            "value": "99",
            "label": "分門別類",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "文章分門別類\n\n[文章]\n*重要緊急-文章\n*重要不緊急-文章\n\n[實例]\n*重要緊急-實例\n*重要不緊急-實例\n*不重要不緊急-實例",
            "labelLink": "#分門別類"
        },
        {
            "value": "99.0",
            "label": "立即處理",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "(ing)調整 Git/\n\n(0)過濾資料-資料 IN-編碼化\n(1)範例\n#form\n#fieldset 標籤\nhttps://www.w3school.com.cn/tags/tag_fieldset.asp\n\n#JS setTimeout\nhttp://josephj.com/prototype/JosephJiang/Study/SetTimeout/\n\n(2)影片\n#youtube\n#Design Principles of Vue 3.0 by Evan You\nhttps://youtu.be/WLpLYhnGqPA\n\n(3)Dropbox - word\n(4)專案-個人網站\n(5)專案-IN-編碼\n(6)99.1.1 重要緊急-文章\n(7)99.2.1 重要不緊急-實例\n(8)準備面試",
            "labelLink": "#立即處理"
        },
        {
            "value": "99.1",
            "label": "文章",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "觀看文章",
            "labelLink": "#文章"
        },
        {
            "value": "99.1.1",
            "label": "重要緊急-文章",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "vue-meta 讓 vue SPA 也能分享有分頁式的 meta 管理\nhttps://kakadodo.github.io/2019/05/20/vue-vue-meta/\n\n#解坑\n#vue實踐中的常見知識漏洞001\nhttps://kknews.cc/code/x6kl4lg.amp\n\n#Nuxt - 使用 Vue.js 做 SSR 的第一哩路\nhttps://ithelp.ithome.com.tw/users/20103424/ironman/1961\n\n#解決跨域問題\n#全局引入_function.scss\n#pug\n#基於vuecli基礎上，完善搭建項目\nhttps://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/660422/#outline__10\n\n#第三方登入 - Google\n使用Google OAuth 2.0 存取Google API\nhttp://blog.kenyang.net/2012/09/15/google-oauth-20-google-ap\n\n#ES6\n#JavaScript\n#從ES6 開始的 JavaScript 學習生活\nhttps://eyesofkids.gitbooks.io/javascript-start-from-es6/content/\n\n#路由\n#懶加載\n#關於 vue cli 單文件加載\nhttps://kknews.cc/digital/bmmrn5o.html\n為打包文件使用路由懶加載\n\n#自動化的端對端測試\n#單元測試\n#一次搞懂單元測試、整合測試、端對端測試之間的差異\nhttps://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing\n\n#unit test\n#Jest\n#單元測試\nhttps://cn.vuejs.org/v2/guide/unit-testing.html\n你不必為了測性在組件中做任何特殊的操作，倒出原始設置就可以。\n\n#Object.assign\n#vue.delete\n#vue.set\n#vue 陣列修改不觸發視圖更新、vue 響應式對象添加或刪除屬性\nhttps://blog.csdn.net/zhouzuoluo/article/details/84633340",
            "labelLink": "#重要緊急-文章"
        },
        {
            "value": "99.1.2",
            "label": "重要不緊急-文章",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "#Vuex 學習網站\nhttps://scrimba.com/g/gvuex\n線上學習 vuex 的撰寫\n\n#Vue 3 中那些激動人心的新功能\nhttps://www.infoq.cn/article/VzxPwxX2GpERAJymrN3U\n\n#SEO\n#SSR\n#Vue SSR 指南 - Vue SEO\nhttps://ssr.vuejs.org/zh/guide/caching.html#%E7%BB%84%E4%BB%B6%E7%BA%A7%E5%88%AB%E7%BC%93%E5%AD%98-component-level-caching\n為什麼使用服務器端渲染(SSR)？\n更好的SEO，由於搜索引擎爬蟲抓取工具可以直接查看完全渲染的頁面。\n\n#自訂組件\n#webpack\n#webpack 自動化導入 Vue 全局組件\nhttps://juejin.im/post/5dbff37bf265da4cfa7bb756\n\n#vuex 學習筆記 IT幫\nhttps://ithelp.ithome.com.tw/users/20107601/ironman\n\n#網路安全\n#何謂 XSS 攻擊\nhttps://forum.gamer.com.tw/Co.php?bsn=60292&sn=11267\nxss 可中譯為跨網站指令碼攻擊，如插入代碼讓它以 AJAX 方式傳送到攻擊者的伺服器即可\n\n#Git 筆記 - 分支管理策略\n#操作Git 的心法\nhttps://blog.darkthread.net/blog/git-branching-strategies/\n\n#HTTP\n#循序漸進理解 HTTP Cache 機制\nhttps://blog.techbridge.cc/2017/06/17/cache-introduction/\n認識 HTTP Cache 的結構\n\n#資料庫\n#資料規劃\n#網站系統規劃\nhttps://ithelp.ithome.com.tw/m/articles/10098978\n\n#Router\n#Event bus\n#Vue中的Event bus跟Router撞出新地雷\nhttps://medium.com/@ceall8650/vue%E4%B8%AD%E7%9A%84event-bus%E8%B7%9Frouter%E6%92%9E%E5%87%BA%E6%96%B0%E5%9C%B0%E9%9B%B7-5d3e52545cec\n\n#vue cli\n#單文件使用 EventBus\nhttps://ithelp.ithome.com.tw/m/articles/10204202\n\n#vue.use\n#vue.config.js\n#基於 vue-cli 3 打造屬於自己的 UI 庫\n#自製組件\nhttps://kknews.cc/code/423vg5v.html",
            "labelLink": "#重要不緊急-文章"
        },
        {
            "value": "99.2",
            "label": "實例",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "操作範例",
            "labelLink": "#實例"
        },
        {
            "value": "99.2.1",
            "label": "重要緊急-實例",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "#Vue Router\n#登入頁\n#跳轉首頁\nVue Router 登入頁面處理?\nvue頁面剛進來是登錄頁，點擊登陸後跳轉到首頁\nhttps://segmentfault.com/q/1010000017714980?sort=created",
            "labelLink": "#重要緊急-實例"
        },
        {
            "value": "99.2.2",
            "label": "重要不緊急-實例",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "#表單驗證\n#vue.js\n#.vue\n應用 Vuelidate vue 驗證表單\nhttps://vuejsdevelopers.com/2018/08/27/vue-js-form-handling-vuelidate/\n\n#優化窗口\n#前端面試題-長列表怎麼優化\nhttps://juejin.im/post/5de31df76fb9a071bb7cab7b",
            "labelLink": "#重要不緊急-實例"
        },
        {
            "value": "99.2.3",
            "label": "不重要不緊急-實例",
            "image": " ",
            "styleValue": 3,
            "style": "margin-left:2rem;font-style:italic",
            "status": "warning",
            "modify": false,
            "text": "#Mini Music Player - VueJS\nhttps://codepen.io/JavaScriptJunkie/pen/qBWrRyg?editors=1010\n漂亮的音樂盒\ntransition-group :name\nsvg\n",
            "labelLink": "#不重要不緊急-實例"
        },
        {
            "value": "101",
            "label": "補齊項目  2月底前補齊",
            "image": " ",
            "styleValue": 1,
            "style": "font-weight:bold;margin-left:0",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#補齊項目  2月底前補齊"
        },
        {
            "value": "101.1",
            "label": "HTTP Request RESTful API",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#HTTP Request RESTful API"
        },
        {
            "value": "101.2",
            "label": "Vue 開發 SPA 網頁經驗",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#Vue 開發 SPA 網頁經驗"
        },
        {
            "value": "101.3",
            "label": "串接 Google Login 經驗",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#串接 Google Login 經驗"
        },
        {
            "value": "101.4",
            "label": "串接 FB Login 經驗",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#串接 FB Login 經驗"
        },
        {
            "value": "101.5",
            "label": "使用 Chrome Dev Tools 除錯",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#使用 Chrome Dev Tools 除錯"
        },
        {
            "value": "101.6",
            "label": "使用 Nuxt.js",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#使用 Nuxt.js"
        },
        {
            "value": "101.7",
            "label": "一個 vue.js 的實作項目",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#一個 vue.js 的實作項目"
        },
        {
            "value": "101.8",
            "label": "ES6 觀念",
            "image": " ",
            "styleValue": 2,
            "style": "margin-left:1rem;",
            "status": "warning",
            "modify": false,
            "text": "",
            "labelLink": "#ES6 觀念"
        }
    ]
}